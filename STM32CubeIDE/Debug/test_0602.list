
test_0602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe1c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  08010000  08010000  00011000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010864  08010864  000126d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010864  08010864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801086c  0801086c  000126d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801086c  0801086c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010870  08010870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006d4  20000000  08010874  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d0  200006d4  08010f48  000126d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020a4  08010f48  000130a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000126d4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004f674  00000000  00000000  00012704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006d  00000000  00000000  00061d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004f03b  00000000  00000000  00061de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009dc7  00000000  00000000  000b0e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022d0  00000000  00000000  000babe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010c9e0  00000000  00000000  000bceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003980  00000000  00000000  001c9898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00020ce2  00000000  00000000  001cd218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002f85f  00000000  00000000  001edefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021d759  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f9c  00000000  00000000  0021d79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006d4 	.word	0x200006d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ffe4 	.word	0x0800ffe4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006d8 	.word	0x200006d8
 800021c:	0800ffe4 	.word	0x0800ffe4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 8001070:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001072:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001074:	f004 fba6 	bl	80057c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <LoopForever+0x6>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <LoopForever+0xe>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <LoopForever+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f00b fc1f 	bl	800c8e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a2:	f000 fbed 	bl	8001880 <main>

080010a6 <LoopForever>:

LoopForever:
    b LoopForever
 80010a6:	e7fe      	b.n	80010a6 <LoopForever>
 ldr   r0, =_estack
 80010a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	200006d4 	.word	0x200006d4
  ldr r2, =_sidata
 80010b4:	08010874 	.word	0x08010874
  ldr r2, =_sbss
 80010b8:	200006d4 	.word	0x200006d4
  ldr r4, =_ebss
 80010bc:	200020a4 	.word	0x200020a4

080010c0 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <BusFault_Handler>
	...

080010c4 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 80010c8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80010ca:	6940      	ldr	r0, [r0, #20]
 80010cc:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80010ce:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80010d0:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 80010d2:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80010d6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80010da:	6960      	ldr	r0, [r4, #20]
 80010dc:	f104 011c 	add.w	r1, r4, #28
 80010e0:	462b      	mov	r3, r5
 80010e2:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80010e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80010e8:	4718      	bx	r3
 80010ea:	bf00      	nop

080010ec <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 80010ec:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80010ee:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 80010f0:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80010f2:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80010f6:	4c1e      	ldr	r4, [pc, #120]	@ (8001170 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80010f8:	01db      	lsls	r3, r3, #7
 80010fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80010fe:	784a      	ldrb	r2, [r1, #1]
 8001100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8001104:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8001106:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800110a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800110e:	b2da      	uxtb	r2, r3
 8001110:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8001114:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001118:	5ca2      	ldrb	r2, [r4, r2]
 800111a:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800111e:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001120:	5ca2      	ldrb	r2, [r4, r2]
 8001122:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8001126:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001128:	5ca2      	ldrb	r2, [r4, r2]
 800112a:	4c12      	ldr	r4, [pc, #72]	@ (8001174 <ASPEP_sendBeacon+0x88>)
 800112c:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8001130:	5ca2      	ldrb	r2, [r4, r2]
 8001132:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001136:	f043 0305 	orr.w	r3, r3, #5
 800113a:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800113e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001140:	b14b      	cbz	r3, 8001156 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001142:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8001144:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001148:	b913      	cbnz	r3, 8001150 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 800114a:	2302      	movs	r3, #2
 800114c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8001150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001154:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001156:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800115a:	2303      	movs	r3, #3
 800115c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001160:	6481      	str	r1, [r0, #72]	@ 0x48
 8001162:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001164:	2204      	movs	r2, #4
 8001166:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8001168:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800116c:	6940      	ldr	r0, [r0, #20]
 800116e:	4718      	bx	r3
 8001170:	08010010 	.word	0x08010010
 8001174:	08010000 	.word	0x08010000

08001178 <ASPEP_sendPing>:
{
 8001178:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 800117a:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800117c:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8001180:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001184:	4d1d      	ldr	r5, [pc, #116]	@ (80011fc <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8001186:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800118a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800118e:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8001192:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001196:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 800119a:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800119e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4c16      	ldr	r4, [pc, #88]	@ (8001200 <ASPEP_sendPing+0x88>)
 80011a6:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80011aa:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80011ae:	5ca2      	ldrb	r2, [r4, r2]
 80011b0:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 80011b4:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80011b6:	5ca2      	ldrb	r2, [r4, r2]
 80011b8:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 80011bc:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80011be:	5ca2      	ldrb	r2, [r4, r2]
 80011c0:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80011c4:	5ceb      	ldrb	r3, [r5, r3]
 80011c6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80011ca:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80011ce:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80011d0:	b143      	cbz	r3, 80011e4 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 80011d2:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80011d4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80011d8:	b913      	cbnz	r3, 80011e0 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 80011da:	2302      	movs	r3, #2
 80011dc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80011e0:	bc30      	pop	{r4, r5}
 80011e2:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80011e4:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80011e8:	2303      	movs	r3, #3
 80011ea:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80011ee:	6481      	str	r1, [r0, #72]	@ 0x48
 80011f0:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80011f2:	2204      	movs	r2, #4
 80011f4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80011f6:	6940      	ldr	r0, [r0, #20]
}
 80011f8:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80011fa:	4718      	bx	r3
 80011fc:	08010000 	.word	0x08010000
 8001200:	08010010 	.word	0x08010010

08001204 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8001204:	2a0a      	cmp	r2, #10
 8001206:	d009      	beq.n	800121c <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8001208:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800120c:	2b01      	cmp	r3, #1
 800120e:	d91d      	bls.n	800124c <ASPEP_getBuffer+0x48>
 8001210:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8001214:	2b01      	cmp	r3, #1
 8001216:	d90d      	bls.n	8001234 <ASPEP_getBuffer+0x30>
        result = false;
 8001218:	2000      	movs	r0, #0
}
 800121a:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 800121c:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8001220:	2b01      	cmp	r3, #1
 8001222:	d8f9      	bhi.n	8001218 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001224:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8001226:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001228:	3304      	adds	r3, #4
 800122a:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 800122c:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8001230:	2001      	movs	r0, #1
 8001232:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001234:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8001236:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 800123a:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800123e:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8001240:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001244:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001246:	600b      	str	r3, [r1, #0]
  bool result = true;
 8001248:	2001      	movs	r0, #1
 800124a:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800124c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 800124e:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8001252:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001256:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8001258:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800125c:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800125e:	600b      	str	r3, [r1, #0]
 8001260:	e7f2      	b.n	8001248 <ASPEP_getBuffer+0x44>
 8001262:	bf00      	nop

08001264 <ASPEP_sendPacket>:
{
 8001264:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8001266:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 800126a:	2802      	cmp	r0, #2
 800126c:	d001      	beq.n	8001272 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 800126e:	2002      	movs	r0, #2
 8001270:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8001272:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8001276:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800127a:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 800127e:	2801      	cmp	r0, #1
 8001280:	d104      	bne.n	800128c <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8001282:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8001286:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8001288:	3202      	adds	r2, #2
 800128a:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800128c:	2b0a      	cmp	r3, #10
 800128e:	d105      	bne.n	800129c <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8001290:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8001294:	b348      	cbz	r0, 80012ea <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8001296:	2000      	movs	r0, #0
 8001298:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 800129c:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 80012a0:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80012a2:	4d34      	ldr	r5, [pc, #208]	@ (8001374 <ASPEP_sendPacket+0x110>)
 80012a4:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80012a6:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80012a8:	5d2e      	ldrb	r6, [r5, r4]
 80012aa:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80012ae:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 80012b0:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80012b4:	5d2e      	ldrb	r6, [r5, r4]
 80012b6:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80012ba:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80012bc:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80012be:	5d2c      	ldrb	r4, [r5, r4]
 80012c0:	f3c0 6503 	ubfx	r5, r0, #24, #4
 80012c4:	406c      	eors	r4, r5
 80012c6:	4d2c      	ldr	r5, [pc, #176]	@ (8001378 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 80012c8:	5d2c      	ldrb	r4, [r5, r4]
 80012ca:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 80012ce:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80012d4:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 80012d8:	b1b9      	cbz	r1, 800130a <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 80012da:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d006      	beq.n	80012ee <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 80012e0:	2b0a      	cmp	r3, #10
 80012e2:	d02a      	beq.n	800133a <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 80012e4:	b37b      	cbz	r3, 8001346 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 80012e6:	2000      	movs	r0, #0
}
 80012e8:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 80012ea:	2001      	movs	r0, #1
}
 80012ec:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80012ee:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80012f2:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 80012f4:	458e      	cmp	lr, r1
 80012f6:	bf14      	ite	ne
 80012f8:	2003      	movne	r0, #3
 80012fa:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 80012fc:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8001300:	b3a1      	cbz	r1, 800136c <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8001302:	2102      	movs	r1, #2
 8001304:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8001306:	809a      	strh	r2, [r3, #4]
}
 8001308:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 800130a:	2b09      	cmp	r3, #9
 800130c:	d029      	beq.n	8001362 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 800130e:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8001310:	f04f 0303 	mov.w	r3, #3
 8001314:	bf0b      	itete	eq
 8001316:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 800131a:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800131e:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001322:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8001326:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 800132a:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800132c:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8001330:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8001334:	4671      	mov	r1, lr
 8001336:	4798      	blx	r3
 8001338:	e7d5      	b.n	80012e6 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 800133a:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 800133e:	2b01      	cmp	r3, #1
 8001340:	d009      	beq.n	8001356 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8001342:	2003      	movs	r0, #3
}
 8001344:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8001346:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f9      	bne.n	8001342 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 800134e:	2302      	movs	r3, #2
 8001350:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8001354:	e7c7      	b.n	80012e6 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8001356:	2302      	movs	r3, #2
 8001358:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 800135c:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8001360:	e7c1      	b.n	80012e6 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8001362:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8001366:	2103      	movs	r1, #3
 8001368:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800136a:	e7dc      	b.n	8001326 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 800136c:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8001370:	e7c7      	b.n	8001302 <ASPEP_sendPacket+0x9e>
 8001372:	bf00      	nop
 8001374:	08010010 	.word	0x08010010
 8001378:	08010000 	.word	0x08010000

0800137c <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 800137c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 800137e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001382:	2b03      	cmp	r3, #3
{
 8001384:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8001386:	d013      	beq.n	80013b0 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8001388:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800138a:	2100      	movs	r1, #0
 800138c:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 800138e:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8001392:	2a02      	cmp	r2, #2
 8001394:	d013      	beq.n	80013be <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8001396:	2b02      	cmp	r3, #2
 8001398:	d11d      	bne.n	80013d6 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800139a:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800139e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80013a0:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80013a2:	2204      	movs	r2, #4
 80013a4:	6940      	ldr	r0, [r0, #20]
 80013a6:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 80013a8:	2303      	movs	r3, #3
 80013aa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80013ae:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 80013b0:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 80013b4:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 80013b6:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 80013b8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 80013bc:	d10b      	bne.n	80013d6 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80013be:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80013c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80013c4:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80013c6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80013c8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80013ca:	6960      	ldr	r0, [r4, #20]
 80013cc:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 80013d4:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80013d6:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 80013d8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80013da:	b1cb      	cbz	r3, 8001410 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 80013dc:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 80013de:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 80013e0:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	889a      	ldrh	r2, [r3, #4]
 80013e6:	6960      	ldr	r0, [r4, #20]
 80013e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80013ea:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 80013ec:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d007      	beq.n	8001404 <ASPEP_HWDataTransmittedIT+0x88>
 80013f4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d003      	beq.n	8001404 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8001400:	b662      	cpsie	i
}
 8001402:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8001404:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001406:	0063      	lsls	r3, r4, #1
 8001408:	3368      	adds	r3, #104	@ 0x68
 800140a:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 800140c:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 800140e:	e7f7      	b.n	8001400 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8001410:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001412:	e7f5      	b.n	8001400 <ASPEP_HWDataTransmittedIT+0x84>

08001414 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8001414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8001418:	f890 5061 	ldrb.w	r5, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 800141c:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 800141e:	2300      	movs	r3, #0
{
 8001420:	4604      	mov	r4, r0
    *packetLength = 0;
 8001422:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8001424:	b19d      	cbz	r5, 800144e <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8001426:	f890 5064 	ldrb.w	r5, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 800142a:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 800142e:	2d01      	cmp	r5, #1
 8001430:	d04e      	beq.n	80014d0 <ASPEP_RXframeProcess+0xbc>
 8001432:	2d02      	cmp	r5, #2
 8001434:	d012      	beq.n	800145c <ASPEP_RXframeProcess+0x48>
 8001436:	b9d5      	cbnz	r5, 800146e <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8001438:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800143a:	2b05      	cmp	r3, #5
 800143c:	d062      	beq.n	8001504 <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 800143e:	2b06      	cmp	r3, #6
 8001440:	d115      	bne.n	800146e <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8001442:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001446:	4629      	mov	r1, r5
 8001448:	f7ff fe96 	bl	8001178 <ASPEP_sendPing>
 800144c:	e00f      	b.n	800146e <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 800144e:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8001452:	b9b3      	cbnz	r3, 8001482 <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8001454:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8001456:	4628      	mov	r0, r5
 8001458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 800145c:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 800145e:	2d05      	cmp	r5, #5
 8001460:	f000 80d9 	beq.w	8001616 <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 8001464:	2d06      	cmp	r5, #6
 8001466:	f000 8125 	beq.w	80016b4 <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 800146a:	2d09      	cmp	r5, #9
 800146c:	d03e      	beq.n	80014ec <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 800146e:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001470:	6960      	ldr	r0, [r4, #20]
 8001472:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001474:	2204      	movs	r2, #4
 8001476:	f104 011c 	add.w	r1, r4, #28
 800147a:	4798      	blx	r3
}
 800147c:	4628      	mov	r0, r5
 800147e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001482:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8001486:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001488:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800148c:	488c      	ldr	r0, [pc, #560]	@ (80016c0 <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800148e:	4d8d      	ldr	r5, [pc, #564]	@ (80016c4 <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001490:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001494:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001498:	5c82      	ldrb	r2, [r0, r2]
 800149a:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 800149e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80014a0:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 80014a2:	5ceb      	ldrb	r3, [r5, r3]
 80014a4:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80014a8:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80014aa:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80014ac:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80f4 	beq.w	800169c <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 80014b4:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80014b6:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80014ba:	b913      	cbnz	r3, 80014c2 <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 80014bc:	2302      	movs	r3, #2
 80014be:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 80014c2:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 80014c4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80014c6:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 80014c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 80014cc:	4798      	blx	r3
 80014ce:	e7c1      	b.n	8001454 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 80014d0:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80014d2:	2905      	cmp	r1, #5
 80014d4:	d064      	beq.n	80015a0 <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 80014d6:	2906      	cmp	r1, #6
 80014d8:	d1c9      	bne.n	800146e <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80014da:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80014de:	4629      	mov	r1, r5
 80014e0:	f7ff fe4a 	bl	8001178 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 80014e4:	2302      	movs	r3, #2
 80014e6:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 80014ea:	e7c0      	b.n	800146e <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80014ec:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 80014f0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 80014f4:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80014f6:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80014f8:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80014fa:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80014fe:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8001500:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8001502:	e7b5      	b.n	8001470 <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001504:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001508:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800150c:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800150e:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001512:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001516:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800151a:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800151e:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001520:	4563      	cmp	r3, ip
 8001522:	bf28      	it	cs
 8001524:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001526:	42b0      	cmp	r0, r6
 8001528:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800152a:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800152e:	bf28      	it	cs
 8001530:	4631      	movcs	r1, r6
 8001532:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001536:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800153a:	45b8      	cmp	r8, r7
 800153c:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800153e:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001542:	bf28      	it	cs
 8001544:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001546:	45ca      	cmp	sl, r9
 8001548:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800154a:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800154e:	bf28      	it	cs
 8001550:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001552:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001556:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001558:	66e5      	str	r5, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800155a:	d81b      	bhi.n	8001594 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800155c:	459c      	cmp	ip, r3
 800155e:	d819      	bhi.n	8001594 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001560:	45b8      	cmp	r8, r7
 8001562:	d817      	bhi.n	8001594 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001564:	45ca      	cmp	sl, r9
 8001566:	d815      	bhi.n	8001594 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001568:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 800156c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001570:	4290      	cmp	r0, r2
 8001572:	d10f      	bne.n	8001594 <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001574:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001576:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001578:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800157a:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800157c:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 800157e:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001582:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001584:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001586:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001588:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800158c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001590:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001594:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fda7 	bl	80010ec <ASPEP_sendBeacon>
 800159e:	e766      	b.n	800146e <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80015a0:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80015a2:	f890 c06c 	ldrb.w	ip, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80015a6:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80015a8:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80015ac:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80015b0:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80015b4:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80015b8:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80015ba:	42a8      	cmp	r0, r5
 80015bc:	bf28      	it	cs
 80015be:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80015c0:	4561      	cmp	r1, ip
 80015c2:	460f      	mov	r7, r1
 80015c4:	bf28      	it	cs
 80015c6:	4667      	movcs	r7, ip
 80015c8:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80015cc:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80015d0:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80015d4:	42b7      	cmp	r7, r6
 80015d6:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80015d8:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80015dc:	bf28      	it	cs
 80015de:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80015e0:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80015e2:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80015e6:	46c1      	mov	r9, r8
 80015e8:	bf28      	it	cs
 80015ea:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80015ec:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80015f0:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80015f2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80015f4:	d80b      	bhi.n	800160e <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80015f6:	4285      	cmp	r5, r0
 80015f8:	d809      	bhi.n	800160e <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80015fa:	42b7      	cmp	r7, r6
 80015fc:	d807      	bhi.n	800160e <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80015fe:	45f0      	cmp	r8, lr
 8001600:	d805      	bhi.n	800160e <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001602:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001606:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800160a:	4293      	cmp	r3, r2
 800160c:	d0c2      	beq.n	8001594 <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 800160e:	2300      	movs	r3, #0
 8001610:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001614:	e7be      	b.n	8001594 <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001616:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800161a:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800161e:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001620:	f894 e06c 	ldrb.w	lr, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001624:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001628:	f894 806f 	ldrb.w	r8, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800162c:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001630:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001632:	4565      	cmp	r5, ip
 8001634:	bf28      	it	cs
 8001636:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001638:	4570      	cmp	r0, lr
 800163a:	4607      	mov	r7, r0
 800163c:	4619      	mov	r1, r3
 800163e:	bf28      	it	cs
 8001640:	4677      	movcs	r7, lr
 8001642:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001646:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800164a:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800164e:	42b7      	cmp	r7, r6
 8001650:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001652:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001656:	bf28      	it	cs
 8001658:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800165a:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800165c:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001660:	46ca      	mov	sl, r9
 8001662:	bf28      	it	cs
 8001664:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001666:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800166a:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800166c:	66e1      	str	r1, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800166e:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001672:	d80d      	bhi.n	8001690 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001674:	45ac      	cmp	ip, r5
 8001676:	d80b      	bhi.n	8001690 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001678:	42b7      	cmp	r7, r6
 800167a:	d809      	bhi.n	8001690 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800167c:	45c1      	cmp	r9, r8
 800167e:	d807      	bhi.n	8001690 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001680:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001684:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fd29 	bl	80010ec <ASPEP_sendBeacon>
 800169a:	e6e8      	b.n	800146e <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800169c:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80016a0:	2303      	movs	r3, #3
 80016a2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80016a6:	64a1      	str	r1, [r4, #72]	@ 0x48
 80016a8:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80016aa:	2204      	movs	r2, #4
 80016ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80016ae:	6960      	ldr	r0, [r4, #20]
 80016b0:	4798      	blx	r3
 80016b2:	e706      	b.n	80014c2 <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80016b4:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80016b8:	2101      	movs	r1, #1
 80016ba:	f7ff fd5d 	bl	8001178 <ASPEP_sendPing>
 80016be:	e6d6      	b.n	800146e <ASPEP_RXframeProcess+0x5a>
 80016c0:	08010010 	.word	0x08010010
 80016c4:	08010000 	.word	0x08010000

080016c8 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 80016c8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 80016ca:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 80016ce:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 80016d0:	b143      	cbz	r3, 80016e4 <ASPEP_HWDataReceivedIT+0x1c>
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d000      	beq.n	80016d8 <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80016d6:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 80016d8:	2200      	movs	r2, #0
 80016da:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        pHandle->NewPacketAvailable = true;
 80016de:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
}
 80016e2:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80016e4:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80016e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001764 <ASPEP_HWDataReceivedIT+0x9c>)
 80016e8:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80016f0:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 80016f8:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	b95b      	cbnz	r3, 800171c <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001704:	7f03      	ldrb	r3, [r0, #28]
 8001706:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 800170a:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 800170c:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 800170e:	d809      	bhi.n	8001724 <ASPEP_HWDataReceivedIT+0x5c>
 8001710:	2b04      	cmp	r3, #4
 8001712:	d91f      	bls.n	8001754 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 8001714:	2301      	movs	r3, #1
 8001716:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 800171a:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 800171c:	2304      	movs	r3, #4
 800171e:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001722:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 8001724:	2b09      	cmp	r3, #9
 8001726:	d115      	bne.n	8001754 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8001728:	8b83      	ldrh	r3, [r0, #28]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ef      	beq.n	8001714 <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8001734:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8001738:	429a      	cmp	r2, r3
 800173a:	d30f      	bcc.n	800175c <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 800173c:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8001740:	6981      	ldr	r1, [r0, #24]
 8001742:	6940      	ldr	r0, [r0, #20]
 8001744:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001748:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800174a:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 800174c:	2301      	movs	r3, #1
 800174e:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8001752:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001754:	2301      	movs	r3, #1
 8001756:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 800175a:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 800175c:	2302      	movs	r3, #2
 800175e:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001762:	bd10      	pop	{r4, pc}
 8001764:	08010010 	.word	0x08010010

08001768 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 8001768:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 800176a:	2200      	movs	r2, #0
 800176c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001770:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001772:	6940      	ldr	r0, [r0, #20]
 8001774:	2204      	movs	r2, #4
 8001776:	311c      	adds	r1, #28
 8001778:	4718      	bx	r3
 800177a:	bf00      	nop

0800177c <dshot_rx_dma_complete>:
static volatile uint16_t rx_duty  [RX_BITS];   /* CCR2 */
static volatile bool     frame_ready = false;

/* ---------- DMA 完成 ---------- */
static void dshot_rx_dma_complete(DMA_HandleTypeDef *hdma)
{
 800177c:	b510      	push	{r4, lr}

    /* 停兩路 DMA，避免覆寫 */
    __HAL_TIM_DISABLE_DMA(Dshot_TIM, TIM_DMA_CC1 | TIM_DMA_CC2);
 800177e:	4c09      	ldr	r4, [pc, #36]	@ (80017a4 <dshot_rx_dma_complete+0x28>)
 8001780:	6822      	ldr	r2, [r4, #0]
 8001782:	68d3      	ldr	r3, [r2, #12]
 8001784:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001788:	60d3      	str	r3, [r2, #12]
    HAL_TIM_IC_Stop_DMA(Dshot_TIM, Dshot_TIM_Rise_CH);
 800178a:	2100      	movs	r1, #0
 800178c:	4620      	mov	r0, r4
 800178e:	f006 fe69 	bl	8008464 <HAL_TIM_IC_Stop_DMA>
    HAL_TIM_IC_Stop_DMA(Dshot_TIM, Dshot_TIM_Fail_CH);
 8001792:	2104      	movs	r1, #4
 8001794:	4620      	mov	r0, r4
 8001796:	f006 fe65 	bl	8008464 <HAL_TIM_IC_Stop_DMA>
    frame_ready = true;
 800179a:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <dshot_rx_dma_complete+0x2c>)
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]

}
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	bf00      	nop
 80017a4:	2000094c 	.word	0x2000094c
 80017a8:	200006f0 	.word	0x200006f0

080017ac <dshot_rx_init>:

/* ---------- 初始化 ---------- */
void dshot_rx_init(void)
{
 80017ac:	b538      	push	{r3, r4, r5, lr}
    frame_ready = false;
 80017ae:	490d      	ldr	r1, [pc, #52]	@ (80017e4 <dshot_rx_init+0x38>)

    /* 1. 同時開 CH1 / CH2 兩條 DMA */
    HAL_TIM_IC_Start_DMA(Dshot_TIM, Dshot_TIM_Rise_CH,          /* CCR1→period */
 80017b0:	4c0d      	ldr	r4, [pc, #52]	@ (80017e8 <dshot_rx_init+0x3c>)
 80017b2:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <dshot_rx_init+0x40>)
    frame_ready = false;
 80017b4:	2500      	movs	r5, #0
    HAL_TIM_IC_Start_DMA(Dshot_TIM, Dshot_TIM_Rise_CH,          /* CCR1→period */
 80017b6:	2311      	movs	r3, #17
    frame_ready = false;
 80017b8:	700d      	strb	r5, [r1, #0]
    HAL_TIM_IC_Start_DMA(Dshot_TIM, Dshot_TIM_Rise_CH,          /* CCR1→period */
 80017ba:	4620      	mov	r0, r4
 80017bc:	4629      	mov	r1, r5
 80017be:	f006 fd11 	bl	80081e4 <HAL_TIM_IC_Start_DMA>
                         (uint32_t*)rx_period, RX_EDGES);
    HAL_TIM_IC_Start_DMA(Dshot_TIM, Dshot_TIM_Fail_CH,          /* CCR2→duty   */
 80017c2:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <dshot_rx_init+0x44>)
 80017c4:	2310      	movs	r3, #16
 80017c6:	2104      	movs	r1, #4
 80017c8:	4620      	mov	r0, r4
 80017ca:	f006 fd0b 	bl	80081e4 <HAL_TIM_IC_Start_DMA>
                         (uint32_t*)rx_duty,   RX_BITS);

    /* 2. 再掛 callback（**順序非常重要**） */
    htim2.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_rx_dma_complete;
    htim2.hdma[TIM_DMA_ID_CC2]->XferCpltCallback = NULL;   // or 不設定
 80017ce:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	@ 0x24

    __HAL_TIM_ENABLE_DMA(Dshot_TIM, TIM_DMA_CC1 | TIM_DMA_CC2);
 80017d2:	6822      	ldr	r2, [r4, #0]
    htim2.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_rx_dma_complete;
 80017d4:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <dshot_rx_init+0x48>)
 80017d6:	62d8      	str	r0, [r3, #44]	@ 0x2c
    __HAL_TIM_ENABLE_DMA(Dshot_TIM, TIM_DMA_CC1 | TIM_DMA_CC2);
 80017d8:	68d3      	ldr	r3, [r2, #12]
    htim2.hdma[TIM_DMA_ID_CC2]->XferCpltCallback = NULL;   // or 不設定
 80017da:	62cd      	str	r5, [r1, #44]	@ 0x2c
    __HAL_TIM_ENABLE_DMA(Dshot_TIM, TIM_DMA_CC1 | TIM_DMA_CC2);
 80017dc:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80017e0:	60d3      	str	r3, [r2, #12]
}
 80017e2:	bd38      	pop	{r3, r4, r5, pc}
 80017e4:	200006f0 	.word	0x200006f0
 80017e8:	2000094c 	.word	0x2000094c
 80017ec:	20000714 	.word	0x20000714
 80017f0:	200006f4 	.word	0x200006f4
 80017f4:	0800177d 	.word	0x0800177d

080017f8 <DMA1_Channel4_IRQHandler>:


//
void DMA1_Channel4_IRQHandler(void) //for dma tim2_ch2
{
    HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 80017f8:	4801      	ldr	r0, [pc, #4]	@ (8001800 <DMA1_Channel4_IRQHandler+0x8>)
 80017fa:	f005 ba85 	b.w	8006d08 <HAL_DMA_IRQHandler>
 80017fe:	bf00      	nop
 8001800:	20000738 	.word	0x20000738
 8001804:	00000000 	.word	0x00000000

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b510      	push	{r4, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180c:	2238      	movs	r2, #56	@ 0x38
 800180e:	2100      	movs	r1, #0
 8001810:	a806      	add	r0, sp, #24
 8001812:	f00b f80c 	bl	800c82e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001816:	2000      	movs	r0, #0
 8001818:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800181c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001820:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001822:	f005 fcf5 	bl	8007210 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001826:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8001878 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 800182c:	2255      	movs	r2, #85	@ 0x55
 800182e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001832:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001834:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001836:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001838:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183c:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001840:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001844:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001846:	f005 fd5d 	bl	8007304 <HAL_RCC_OscConfig>
 800184a:	b108      	cbz	r0, 8001850 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184e:	e7fe      	b.n	800184e <SystemClock_Config+0x46>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001850:	2104      	movs	r1, #4
 8001852:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001854:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001856:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185a:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800185e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001862:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001864:	f005 ffcc 	bl	8007800 <HAL_RCC_ClockConfig>
 8001868:	b108      	cbz	r0, 800186e <SystemClock_Config+0x66>
 800186a:	b672      	cpsid	i
  while (1)
 800186c:	e7fe      	b.n	800186c <SystemClock_Config+0x64>
  HAL_RCC_EnableCSS();
 800186e:	f006 f8f5 	bl	8007a5c <HAL_RCC_EnableCSS>
}
 8001872:	b014      	add	sp, #80	@ 0x50
 8001874:	bd10      	pop	{r4, pc}
 8001876:	bf00      	nop
 8001878:	00000001 	.word	0x00000001
 800187c:	00010000 	.word	0x00010000

08001880 <main>:
{
 8001880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	2400      	movs	r4, #0
{
 8001886:	b0ad      	sub	sp, #180	@ 0xb4
  HAL_Init();
 8001888:	f003 ffcc 	bl	8005824 <HAL_Init>
  SystemClock_Config();
 800188c:	f7ff ffbc 	bl	8001808 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001894:	4dae      	ldr	r5, [pc, #696]	@ (8001b50 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	9421      	str	r4, [sp, #132]	@ 0x84
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001898:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800189a:	48ae      	ldr	r0, [pc, #696]	@ (8001b54 <main+0x2d4>)
  hadc1.Instance = ADC1;
 800189c:	f8df 92f4 	ldr.w	r9, [pc, #756]	@ 8001b94 <main+0x314>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80018a6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	9305      	str	r3, [sp, #20]
 80018ae:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80018b2:	f043 0320 	orr.w	r3, r3, #32
 80018b6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80018b8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	9306      	str	r3, [sp, #24]
 80018c0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80018ca:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	9307      	str	r3, [sp, #28]
 80018d2:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80018dc:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80018e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80018ea:	921d      	str	r2, [sp, #116]	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80018f0:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f2:	931e      	str	r3, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f005 fa56 	bl	8006da4 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018f8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001900:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	9303      	str	r3, [sp, #12]
 8001908:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800190a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001912:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001914:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001918:	4622      	mov	r2, r4
 800191a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800191c:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800191e:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001920:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001922:	f004 ff4d 	bl	80067c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001926:	200d      	movs	r0, #13
 8001928:	f004 ff86 	bl	8006838 <HAL_NVIC_EnableIRQ>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800192c:	4621      	mov	r1, r4
 800192e:	223c      	movs	r2, #60	@ 0x3c
 8001930:	a81d      	add	r0, sp, #116	@ 0x74
  ADC_MultiModeTypeDef multimode = {0};
 8001932:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
 8001936:	9413      	str	r4, [sp, #76]	@ 0x4c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001938:	f00a ff79 	bl	800c82e <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800193c:	2220      	movs	r2, #32
 800193e:	4621      	mov	r1, r4
 8001940:	a815      	add	r0, sp, #84	@ 0x54
 8001942:	f00a ff74 	bl	800c82e <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001946:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800194a:	e9c9 4401 	strd	r4, r4, [r9, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194e:	e9c9 440b 	strd	r4, r4, [r9, #44]	@ 0x2c
  hadc1.Init.GainCompensation = 0;
 8001952:	f8c9 4010 	str.w	r4, [r9, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001956:	f8a9 401c 	strh.w	r4, [r9, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195a:	f889 4024 	strb.w	r4, [r9, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800195e:	f889 4038 	strb.w	r4, [r9, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001962:	f8c9 403c 	str.w	r4, [r9, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001966:	f889 4040 	strb.w	r4, [r9, #64]	@ 0x40
  hadc1.Instance = ADC1;
 800196a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196e:	2501      	movs	r5, #1
 8001970:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 8001972:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001974:	4648      	mov	r0, r9
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001976:	e9c9 5405 	strd	r5, r4, [r9, #20]
  hadc1.Instance = ADC1;
 800197a:	f8c9 2000 	str.w	r2, [r9]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800197e:	f8c9 700c 	str.w	r7, [r9, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001982:	f8c9 6020 	str.w	r6, [r9, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001986:	f003 ff89 	bl	800589c <HAL_ADC_Init>
 800198a:	b108      	cbz	r0, 8001990 <main+0x110>
 800198c:	b672      	cpsid	i
  while (1)
 800198e:	e7fe      	b.n	800198e <main+0x10e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001990:	9011      	str	r0, [sp, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001992:	a911      	add	r1, sp, #68	@ 0x44
 8001994:	4648      	mov	r0, r9
 8001996:	f004 fde3 	bl	8006560 <HAL_ADCEx_MultiModeConfigChannel>
 800199a:	b108      	cbz	r0, 80019a0 <main+0x120>
 800199c:	b672      	cpsid	i
  while (1)
 800199e:	e7fe      	b.n	800199e <main+0x11e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80019a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001b58 <main+0x2d8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80019a2:	f8ad 0098 	strh.w	r0, [sp, #152]	@ 0x98
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80019a6:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedOffset = 0;
 80019aa:	e9cd 4021 	strd	r4, r0, [sp, #132]	@ 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80019ae:	e9cd 3b1d 	strd	r3, fp, [sp, #116]	@ 0x74
  sConfigInjected.QueueInjectedContext = DISABLE;
 80019b2:	f88d 009a 	strb.w	r0, [sp, #154]	@ 0x9a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80019b6:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80019ba:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80019be:	f04f 0a84 	mov.w	sl, #132	@ 0x84
 80019c2:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80019c4:	a91d      	add	r1, sp, #116	@ 0x74
 80019c6:	4648      	mov	r0, r9
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80019c8:	e9cd a327 	strd	sl, r3, [sp, #156]	@ 0x9c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80019cc:	951f      	str	r5, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 80019ce:	9625      	str	r6, [sp, #148]	@ 0x94
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80019d0:	f8cd 8080 	str.w	r8, [sp, #128]	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80019d4:	f004 fac6 	bl	8005f64 <HAL_ADCEx_InjectedConfigChannel>
 80019d8:	b108      	cbz	r0, 80019de <main+0x15e>
 80019da:	b672      	cpsid	i
  while (1)
 80019dc:	e7fe      	b.n	80019dc <main+0x15c>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80019de:	4a5f      	ldr	r2, [pc, #380]	@ (8001b5c <main+0x2dc>)
 80019e0:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80019e4:	a91d      	add	r1, sp, #116	@ 0x74
 80019e6:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80019e8:	e9cd 231d 	strd	r2, r3, [sp, #116]	@ 0x74
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80019ec:	f004 faba 	bl	8005f64 <HAL_ADCEx_InjectedConfigChannel>
 80019f0:	b108      	cbz	r0, 80019f6 <main+0x176>
 80019f2:	b672      	cpsid	i
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <main+0x174>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019f6:	495a      	ldr	r1, [pc, #360]	@ (8001b60 <main+0x2e0>)
  sConfig.Offset = 0;
 80019f8:	901a      	str	r0, [sp, #104]	@ 0x68
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019fa:	2206      	movs	r2, #6
 80019fc:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a00:	4648      	mov	r0, r9
 8001a02:	a915      	add	r1, sp, #84	@ 0x54
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a04:	e9cd 4817 	strd	r4, r8, [sp, #92]	@ 0x5c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a08:	9419      	str	r4, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0a:	f004 f83b 	bl	8005a84 <HAL_ADC_ConfigChannel>
 8001a0e:	b108      	cbz	r0, 8001a14 <main+0x194>
 8001a10:	b672      	cpsid	i
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <main+0x192>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a14:	4a53      	ldr	r2, [pc, #332]	@ (8001b64 <main+0x2e4>)
 8001a16:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a18:	a915      	add	r1, sp, #84	@ 0x54
 8001a1a:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a1c:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a20:	f004 f830 	bl	8005a84 <HAL_ADC_ConfigChannel>
 8001a24:	4601      	mov	r1, r0
 8001a26:	b108      	cbz	r0, 8001a2c <main+0x1ac>
 8001a28:	b672      	cpsid	i
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <main+0x1aa>
  hadc2.Instance = ADC2;
 8001a2c:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 8001b98 <main+0x318>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001a30:	9001      	str	r0, [sp, #4]
 8001a32:	223c      	movs	r2, #60	@ 0x3c
 8001a34:	a81d      	add	r0, sp, #116	@ 0x74
 8001a36:	f00a fefa 	bl	800c82e <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a3a:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8001a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b68 <main+0x2e8>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001a3e:	f8c9 700c 	str.w	r7, [r9, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a42:	4648      	mov	r0, r9
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a44:	e9c9 1101 	strd	r1, r1, [r9, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a48:	e9c9 1504 	strd	r1, r5, [r9, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a4c:	f8c9 4018 	str.w	r4, [r9, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001a50:	f8a9 101c 	strh.w	r1, [r9, #28]
  hadc2.Init.NbrOfConversion = 1;
 8001a54:	f8c9 5020 	str.w	r5, [r9, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a58:	f889 1024 	strb.w	r1, [r9, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a5c:	f889 1038 	strb.w	r1, [r9, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a60:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001a64:	f889 1040 	strb.w	r1, [r9, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8001a68:	f8c9 2000 	str.w	r2, [r9]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a6c:	f003 ff16 	bl	800589c <HAL_ADC_Init>
 8001a70:	b108      	cbz	r0, 8001a76 <main+0x1f6>
 8001a72:	b672      	cpsid	i
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <main+0x1f4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001a76:	4a3d      	ldr	r2, [pc, #244]	@ (8001b6c <main+0x2ec>)
  sConfigInjected.InjectedOffset = 0;
 8001a78:	9022      	str	r0, [sp, #136]	@ 0x88
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001a7a:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a7c:	f8ad 0098 	strh.w	r0, [sp, #152]	@ 0x98
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001a80:	f88d 009a 	strb.w	r0, [sp, #154]	@ 0x9a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001a84:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a88:	a91d      	add	r1, sp, #116	@ 0x74
 8001a8a:	4648      	mov	r0, r9
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001a8c:	e9cd b51e 	strd	fp, r5, [sp, #120]	@ 0x78
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001a90:	e9cd 8420 	strd	r8, r4, [sp, #128]	@ 0x80
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001a94:	9625      	str	r6, [sp, #148]	@ 0x94
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001a96:	f8cd a09c 	str.w	sl, [sp, #156]	@ 0x9c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001a9a:	9328      	str	r3, [sp, #160]	@ 0xa0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001a9c:	921d      	str	r2, [sp, #116]	@ 0x74
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a9e:	f004 fa61 	bl	8005f64 <HAL_ADCEx_InjectedConfigChannel>
 8001aa2:	b108      	cbz	r0, 8001aa8 <main+0x228>
 8001aa4:	b672      	cpsid	i
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <main+0x226>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <main+0x2d8>)
 8001aaa:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001aac:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001aae:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ab2:	a91d      	add	r1, sp, #116	@ 0x74
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001ab4:	931e      	str	r3, [sp, #120]	@ 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ab6:	f004 fa55 	bl	8005f64 <HAL_ADCEx_InjectedConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b108      	cbz	r0, 8001ac2 <main+0x242>
 8001abe:	b672      	cpsid	i
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <main+0x240>
  hcomp1.Instance = COMP1;
 8001ac2:	482b      	ldr	r0, [pc, #172]	@ (8001b70 <main+0x2f0>)
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001ac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001ac8:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001acc:	6043      	str	r3, [r0, #4]
  hcomp1.Instance = COMP1;
 8001ace:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <main+0x2f4>)
 8001ad0:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8001ad2:	2340      	movs	r3, #64	@ 0x40
 8001ad4:	6083      	str	r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001ad6:	f004 fda7 	bl	8006628 <HAL_COMP_Init>
 8001ada:	b108      	cbz	r0, 8001ae0 <main+0x260>
 8001adc:	b672      	cpsid	i
  while (1)
 8001ade:	e7fe      	b.n	8001ade <main+0x25e>
  hcomp2.Instance = COMP2;
 8001ae0:	4825      	ldr	r0, [pc, #148]	@ (8001b78 <main+0x2f8>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001ae2:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8001b9c <main+0x31c>
 8001ae6:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001ae8:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001aea:	e9c0 9300 	strd	r9, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001aee:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001af2:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001af6:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001af8:	f004 fd96 	bl	8006628 <HAL_COMP_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b108      	cbz	r0, 8001b04 <main+0x284>
 8001b00:	b672      	cpsid	i
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <main+0x282>
  hcomp4.Instance = COMP4;
 8001b04:	481d      	ldr	r0, [pc, #116]	@ (8001b7c <main+0x2fc>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001b06:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001b0a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001b0e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <main+0x300>)
 8001b14:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8001b16:	f004 fd87 	bl	8006628 <HAL_COMP_Init>
 8001b1a:	b108      	cbz	r0, 8001b20 <main+0x2a0>
 8001b1c:	b672      	cpsid	i
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <main+0x29e>
  hcordic.Instance = CORDIC;
 8001b20:	4818      	ldr	r0, [pc, #96]	@ (8001b84 <main+0x304>)
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <main+0x308>)
 8001b24:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001b26:	f004 fe1f 	bl	8006768 <HAL_CORDIC_Init>
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	b108      	cbz	r0, 8001b32 <main+0x2b2>
 8001b2e:	b672      	cpsid	i
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <main+0x2b0>
  hdac3.Instance = DAC3;
 8001b32:	4d16      	ldr	r5, [pc, #88]	@ (8001b8c <main+0x30c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8001b34:	2230      	movs	r2, #48	@ 0x30
 8001b36:	a81d      	add	r0, sp, #116	@ 0x74
 8001b38:	f00a fe79 	bl	800c82e <memset>
  hdac3.Instance = DAC3;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <main+0x310>)
 8001b3e:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001b40:	4628      	mov	r0, r5
 8001b42:	f004 feb9 	bl	80068b8 <HAL_DAC_Init>
 8001b46:	4602      	mov	r2, r0
 8001b48:	b350      	cbz	r0, 8001ba0 <main+0x320>
 8001b4a:	b672      	cpsid	i
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <main+0x2cc>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	48000800 	.word	0x48000800
 8001b58:	0c900008 	.word	0x0c900008
 8001b5c:	32601000 	.word	0x32601000
 8001b60:	04300002 	.word	0x04300002
 8001b64:	14f00020 	.word	0x14f00020
 8001b68:	50000100 	.word	0x50000100
 8001b6c:	cb8c0000 	.word	0xcb8c0000
 8001b70:	20000b1c 	.word	0x20000b1c
 8001b74:	40010200 	.word	0x40010200
 8001b78:	20000af8 	.word	0x20000af8
 8001b7c:	20000ad4 	.word	0x20000ad4
 8001b80:	4001020c 	.word	0x4001020c
 8001b84:	20000aac 	.word	0x20000aac
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	20000a98 	.word	0x20000a98
 8001b90:	50001000 	.word	0x50001000
 8001b94:	20000bac 	.word	0x20000bac
 8001b98:	20000b40 	.word	0x20000b40
 8001b9c:	40010204 	.word	0x40010204
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001ba0:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ba2:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001ba6:	f8ad 0078 	strh.w	r0, [sp, #120]	@ 0x78
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001baa:	9021      	str	r0, [sp, #132]	@ 0x84
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001bac:	9024      	str	r0, [sp, #144]	@ 0x90
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bae:	a91d      	add	r1, sp, #116	@ 0x74
 8001bb0:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001bb2:	e9cd 3322 	strd	r3, r3, [sp, #136]	@ 0x88
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001bb6:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bb8:	f004 fe94 	bl	80068e4 <HAL_DAC_ConfigChannel>
 8001bbc:	b108      	cbz	r0, 8001bc2 <main+0x342>
 8001bbe:	b672      	cpsid	i
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <main+0x340>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	a91d      	add	r1, sp, #116	@ 0x74
 8001bc8:	f004 fe8c 	bl	80068e4 <HAL_DAC_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b108      	cbz	r0, 8001bd4 <main+0x354>
 8001bd0:	b672      	cpsid	i
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <main+0x352>
  hopamp1.Instance = OPAMP1;
 8001bd4:	4883      	ldr	r0, [pc, #524]	@ (8001de4 <main+0x564>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001bd6:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001bda:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001bde:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001be0:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001be2:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001be4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001be6:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 8001bea:	4b7f      	ldr	r3, [pc, #508]	@ (8001de8 <main+0x568>)
 8001bec:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001bee:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001bf2:	f005 fa95 	bl	8007120 <HAL_OPAMP_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b108      	cbz	r0, 8001bfe <main+0x37e>
 8001bfa:	b672      	cpsid	i
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <main+0x37c>
  hopamp2.Instance = OPAMP2;
 8001bfe:	487b      	ldr	r0, [pc, #492]	@ (8001dec <main+0x56c>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001c00:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001c04:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001c06:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001c08:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c0a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 8001c0c:	4b78      	ldr	r3, [pc, #480]	@ (8001df0 <main+0x570>)
 8001c0e:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001c10:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001c14:	f005 fa84 	bl	8007120 <HAL_OPAMP_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	b108      	cbz	r0, 8001c20 <main+0x3a0>
 8001c1c:	b672      	cpsid	i
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <main+0x39e>
  hopamp3.Instance = OPAMP3;
 8001c20:	4874      	ldr	r0, [pc, #464]	@ (8001df4 <main+0x574>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001c22:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001c26:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001c28:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001c2a:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c2c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 8001c2e:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 8001c30:	4b71      	ldr	r3, [pc, #452]	@ (8001df8 <main+0x578>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001c32:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 8001c34:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 8001c36:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001c38:	f005 fa72 	bl	8007120 <HAL_OPAMP_Init>
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	b108      	cbz	r0, 8001c44 <main+0x3c4>
 8001c40:	b672      	cpsid	i
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <main+0x3c2>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001c44:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c48:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
 8001c4c:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
 8001c50:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8001c58:	900d      	str	r0, [sp, #52]	@ 0x34
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001c5a:	9013      	str	r0, [sp, #76]	@ 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5c:	901b      	str	r0, [sp, #108]	@ 0x6c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c5e:	4601      	mov	r1, r0
 8001c60:	2234      	movs	r2, #52	@ 0x34
 8001c62:	a81d      	add	r0, sp, #116	@ 0x74
 8001c64:	f00a fde3 	bl	800c82e <memset>
  htim1.Instance = TIM1;
 8001c68:	4864      	ldr	r0, [pc, #400]	@ (8001dfc <main+0x57c>)
 8001c6a:	4b65      	ldr	r3, [pc, #404]	@ (8001e00 <main+0x580>)
 8001c6c:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001c6e:	f04f 0820 	mov.w	r8, #32
 8001c72:	f640 3311 	movw	r3, #2833	@ 0xb11
 8001c76:	e9c0 8302 	strd	r8, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001c7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001c7e:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001c80:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001c84:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c86:	f006 f9af 	bl	8007fe8 <HAL_TIM_PWM_Init>
 8001c8a:	b108      	cbz	r0, 8001c90 <main+0x410>
 8001c8c:	b672      	cpsid	i
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <main+0x40e>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	2570      	movs	r5, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c94:	4859      	ldr	r0, [pc, #356]	@ (8001dfc <main+0x57c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c98:	a90d      	add	r1, sp, #52	@ 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c9a:	e9cd 530d 	strd	r5, r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c9e:	f007 f88d 	bl	8008dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001ca2:	b108      	cbz	r0, 8001ca8 <main+0x428>
 8001ca4:	b672      	cpsid	i
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <main+0x426>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001ca8:	2401      	movs	r4, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001caa:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001cac:	2302      	movs	r3, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001cae:	4853      	ldr	r0, [pc, #332]	@ (8001dfc <main+0x57c>)
 8001cb0:	aa11      	add	r2, sp, #68	@ 0x44
 8001cb2:	4621      	mov	r1, r4
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001cb4:	e9cd 3411 	strd	r3, r4, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001cb8:	f007 f920 	bl	8008efc <HAL_TIMEx_ConfigBreakInput>
 8001cbc:	b108      	cbz	r0, 8001cc2 <main+0x442>
 8001cbe:	b672      	cpsid	i
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <main+0x440>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001cc2:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001cc4:	484d      	ldr	r0, [pc, #308]	@ (8001dfc <main+0x57c>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001cc6:	9611      	str	r6, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001cc8:	aa11      	add	r2, sp, #68	@ 0x44
 8001cca:	4621      	mov	r1, r4
 8001ccc:	f007 f916 	bl	8008efc <HAL_TIMEx_ConfigBreakInput>
 8001cd0:	b108      	cbz	r0, 8001cd6 <main+0x456>
 8001cd2:	b672      	cpsid	i
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <main+0x454>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001cd6:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001cd8:	aa11      	add	r2, sp, #68	@ 0x44
 8001cda:	4848      	ldr	r0, [pc, #288]	@ (8001dfc <main+0x57c>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001cdc:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001cde:	4621      	mov	r1, r4
 8001ce0:	f007 f90c 	bl	8008efc <HAL_TIMEx_ConfigBreakInput>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	b108      	cbz	r0, 8001cec <main+0x46c>
 8001ce8:	b672      	cpsid	i
  while (1)
 8001cea:	e7fe      	b.n	8001cea <main+0x46a>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cec:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf0:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf4:	901b      	str	r0, [sp, #108]	@ 0x6c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001cf6:	f04f 0c60 	mov.w	ip, #96	@ 0x60
 8001cfa:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	483f      	ldr	r0, [pc, #252]	@ (8001dfc <main+0x57c>)
 8001d00:	a915      	add	r1, sp, #84	@ 0x54
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001d02:	e9cd c315 	strd	ip, r3, [sp, #84]	@ 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d06:	f006 ff73 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	b108      	cbz	r0, 8001d10 <main+0x490>
 8001d0c:	b672      	cpsid	i
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <main+0x48e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d10:	483a      	ldr	r0, [pc, #232]	@ (8001dfc <main+0x57c>)
 8001d12:	4632      	mov	r2, r6
 8001d14:	a915      	add	r1, sp, #84	@ 0x54
 8001d16:	f006 ff6b 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	b108      	cbz	r0, 8001d20 <main+0x4a0>
 8001d1c:	b672      	cpsid	i
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <main+0x49e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d20:	4836      	ldr	r0, [pc, #216]	@ (8001dfc <main+0x57c>)
 8001d22:	2208      	movs	r2, #8
 8001d24:	a915      	add	r1, sp, #84	@ 0x54
 8001d26:	f006 ff63 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	b108      	cbz	r0, 8001d30 <main+0x4b0>
 8001d2c:	b672      	cpsid	i
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <main+0x4ae>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001d30:	f44f 6331 	mov.w	r3, #2832	@ 0xb10
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d34:	4831      	ldr	r0, [pc, #196]	@ (8001dfc <main+0x57c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001d36:	9515      	str	r5, [sp, #84]	@ 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d38:	220c      	movs	r2, #12
 8001d3a:	a915      	add	r1, sp, #84	@ 0x54
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001d3c:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d3e:	f006 ff57 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 8001d42:	b108      	cbz	r0, 8001d48 <main+0x4c8>
 8001d44:	b672      	cpsid	i
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <main+0x4c6>
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	9323      	str	r3, [sp, #140]	@ 0x8c
  sBreakDeadTimeConfig.Break2Filter = 3;
 8001d4c:	9327      	str	r3, [sp, #156]	@ 0x9c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001d4e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8001d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d56:	e9cd 531d 	strd	r5, r3, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001d5a:	263f      	movs	r6, #63	@ 0x3f
 8001d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d60:	e9cd 6320 	strd	r6, r3, [sp, #128]	@ 0x80
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d68:	e9cd 0024 	strd	r0, r0, [sp, #144]	@ 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d6c:	e9cd 0028 	strd	r0, r0, [sp, #160]	@ 0xa0
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d70:	901f      	str	r0, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d72:	9322      	str	r3, [sp, #136]	@ 0x88
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d74:	4821      	ldr	r0, [pc, #132]	@ (8001dfc <main+0x57c>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d7a:	a91d      	add	r1, sp, #116	@ 0x74
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d7c:	9326      	str	r3, [sp, #152]	@ 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d7e:	f007 f86f 	bl	8008e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d82:	4604      	mov	r4, r0
 8001d84:	b108      	cbz	r0, 8001d8a <main+0x50a>
 8001d86:	b672      	cpsid	i
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <main+0x508>
  HAL_TIM_MspPostInit(&htim1);
 8001d8a:	481c      	ldr	r0, [pc, #112]	@ (8001dfc <main+0x57c>)
 8001d8c:	f003 fb1a 	bl	80053c4 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8001d90:	481c      	ldr	r0, [pc, #112]	@ (8001e04 <main+0x584>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d92:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d96:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d9a:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9e:	6104      	str	r4, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da0:	6284      	str	r4, [r0, #40]	@ 0x28
  huart2.Init.BaudRate = 921600;
 8001da2:	4c19      	ldr	r4, [pc, #100]	@ (8001e08 <main+0x588>)
 8001da4:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001da8:	e9c0 4300 	strd	r4, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dac:	230c      	movs	r3, #12
 8001dae:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db0:	f007 fc4a 	bl	8009648 <HAL_UART_Init>
 8001db4:	b108      	cbz	r0, 8001dba <main+0x53a>
 8001db6:	b672      	cpsid	i
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <main+0x538>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4811      	ldr	r0, [pc, #68]	@ (8001e04 <main+0x584>)
 8001dbe:	f007 fc95 	bl	80096ec <HAL_UARTEx_SetTxFifoThreshold>
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	b108      	cbz	r0, 8001dca <main+0x54a>
 8001dc6:	b672      	cpsid	i
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <main+0x548>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dca:	480e      	ldr	r0, [pc, #56]	@ (8001e04 <main+0x584>)
 8001dcc:	f007 fcd0 	bl	8009770 <HAL_UARTEx_SetRxFifoThreshold>
 8001dd0:	b108      	cbz	r0, 8001dd6 <main+0x556>
 8001dd2:	b672      	cpsid	i
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <main+0x554>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001dd6:	480b      	ldr	r0, [pc, #44]	@ (8001e04 <main+0x584>)
 8001dd8:	f007 fc6a 	bl	80096b0 <HAL_UARTEx_DisableFifoMode>
 8001ddc:	4604      	mov	r4, r0
 8001dde:	b1a8      	cbz	r0, 8001e0c <main+0x58c>
 8001de0:	b672      	cpsid	i
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <main+0x562>
 8001de4:	20000a5c 	.word	0x20000a5c
 8001de8:	40010300 	.word	0x40010300
 8001dec:	20000a20 	.word	0x20000a20
 8001df0:	40010304 	.word	0x40010304
 8001df4:	200009e4 	.word	0x200009e4
 8001df8:	40010308 	.word	0x40010308
 8001dfc:	20000998 	.word	0x20000998
 8001e00:	40012c00 	.word	0x40012c00
 8001e04:	20000858 	.word	0x20000858
 8001e08:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 8001e0c:	f001 fa54 	bl	80032b8 <MX_MotorControl_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e10:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8001e14:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e18:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
 8001e1c:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e20:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
 8001e24:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b7b      	ldr	r3, [pc, #492]	@ (800201c <main+0x79c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e2e:	9419      	str	r4, [sp, #100]	@ 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  htim2.Instance = TIM2;
 8001e34:	4d7a      	ldr	r5, [pc, #488]	@ (8002020 <main+0x7a0>)
	hdma_tim2_ch1.Init.Request  = DMA_REQUEST_TIM2_CH1;  //g4xx 使用DMAMUX 必須加上這行
 8001e36:	4e7b      	ldr	r6, [pc, #492]	@ (8002024 <main+0x7a4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	941f      	str	r4, [sp, #124]	@ 0x7c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e54:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e5a:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	971e      	str	r7, [sp, #120]	@ 0x78
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5e:	9720      	str	r7, [sp, #128]	@ 0x80
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e60:	f8cd 8084 	str.w	r8, [sp, #132]	@ 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f004 ff9e 	bl	8006da4 <HAL_GPIO_Init>
	hdma_tim2_ch1.Init.Request  = DMA_REQUEST_TIM2_CH1;  //g4xx 使用DMAMUX 必須加上這行
 8001e68:	2338      	movs	r3, #56	@ 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	61ac      	str	r4, [r5, #24]
	hdma_tim2_ch2.Init.Request  = DMA_REQUEST_TIM2_CH2;
 8001e72:	4c6d      	ldr	r4, [pc, #436]	@ (8002028 <main+0x7a8>)
	hdma_tim2_ch1.Init.Request  = DMA_REQUEST_TIM2_CH1;  //g4xx 使用DMAMUX 必須加上這行
 8001e74:	6073      	str	r3, [r6, #4]
	hdma_tim2_ch2.Init.Request  = DMA_REQUEST_TIM2_CH2;
 8001e76:	2339      	movs	r3, #57	@ 0x39
 8001e78:	6063      	str	r3, [r4, #4]
  htim2.Instance = TIM2;
 8001e7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e7e:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e80:	4628      	mov	r0, r5
  htim2.Init.Period = 65535;
 8001e82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e86:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e88:	f005 fffc 	bl	8007e84 <HAL_TIM_Base_Init>
 8001e8c:	b108      	cbz	r0, 8001e92 <main+0x612>
 8001e8e:	b672      	cpsid	i
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <main+0x610>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e96:	a90d      	add	r1, sp, #52	@ 0x34
 8001e98:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9a:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e9c:	f006 fc30 	bl	8008700 <HAL_TIM_ConfigClockSource>
 8001ea0:	b108      	cbz	r0, 8001ea6 <main+0x626>
 8001ea2:	b672      	cpsid	i
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <main+0x624>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f006 f91e 	bl	80080e8 <HAL_TIM_IC_Init>
 8001eac:	b108      	cbz	r0, 8001eb2 <main+0x632>
 8001eae:	b672      	cpsid	i
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <main+0x630>
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001eb2:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001eb6:	2350      	movs	r3, #80	@ 0x50
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001eb8:	a915      	add	r1, sp, #84	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001eba:	f04f 0904 	mov.w	r9, #4
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ebe:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ec0:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
  sSlaveConfig.TriggerFilter = 1;
 8001ec4:	f8cd 8064 	str.w	r8, [sp, #100]	@ 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ec8:	f006 fcea 	bl	80088a0 <HAL_TIM_SlaveConfigSynchro>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	b108      	cbz	r0, 8001ed4 <main+0x654>
 8001ed0:	b672      	cpsid	i
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <main+0x652>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ed4:	e9cd 0811 	strd	r0, r8, [sp, #68]	@ 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ed8:	e9cd 0813 	strd	r0, r8, [sp, #76]	@ 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001edc:	a911      	add	r1, sp, #68	@ 0x44
 8001ede:	4628      	mov	r0, r5
 8001ee0:	f006 fb4c 	bl	800857c <HAL_TIM_IC_ConfigChannel>
 8001ee4:	b108      	cbz	r0, 8001eea <main+0x66a>
 8001ee6:	b672      	cpsid	i
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <main+0x668>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001eea:	464a      	mov	r2, r9
 8001eec:	a911      	add	r1, sp, #68	@ 0x44
 8001eee:	4628      	mov	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ef0:	e9cd 7711 	strd	r7, r7, [sp, #68]	@ 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ef4:	f006 fb42 	bl	800857c <HAL_TIM_IC_ConfigChannel>
 8001ef8:	b108      	cbz	r0, 8001efe <main+0x67e>
 8001efa:	b672      	cpsid	i
  while (1)
 8001efc:	e7fe      	b.n	8001efc <main+0x67c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	900a      	str	r0, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f02:	a90a      	add	r1, sp, #40	@ 0x28
 8001f04:	4628      	mov	r0, r5
 8001f06:	f006 ff59 	bl	8008dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	b108      	cbz	r0, 8001f10 <main+0x690>
 8001f0c:	b672      	cpsid	i
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <main+0x68e>
  hdma_tim2_ch2.Instance                 = DMA1_Channel4;
 8001f10:	4b46      	ldr	r3, [pc, #280]	@ (800202c <main+0x7ac>)
 8001f12:	6023      	str	r3, [r4, #0]
  if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8001f14:	4844      	ldr	r0, [pc, #272]	@ (8002028 <main+0x7a8>)
  hdma_tim2_ch2.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001f16:	2300      	movs	r3, #0
  hdma_tim2_ch2.Init.Priority            = DMA_PRIORITY_HIGH;
 8001f18:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f1c:	f04f 0a80 	mov.w	sl, #128	@ 0x80
 8001f20:	f44f 7980 	mov.w	r9, #256	@ 0x100
  hdma_tim2_ch2.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8001f24:	f44f 6880 	mov.w	r8, #1024	@ 0x400
  hdma_tim2_ch2.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001f28:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hdma_tim2_ch2.Init.Mode                = DMA_NORMAL;//!
 8001f2c:	61e3      	str	r3, [r4, #28]
  hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f2e:	e9c4 a904 	strd	sl, r9, [r4, #16]
  hdma_tim2_ch2.Init.Priority            = DMA_PRIORITY_HIGH;
 8001f32:	6227      	str	r7, [r4, #32]
  hdma_tim2_ch2.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8001f34:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8001f38:	f004 fdc0 	bl	8006abc <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b108      	cbz	r0, 8001f44 <main+0x6c4>
 8001f40:	b672      	cpsid	i
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <main+0x6c2>
  hdma_tim2_ch1.Instance                 = DMA1_Channel3;
 8001f44:	4a3a      	ldr	r2, [pc, #232]	@ (8002030 <main+0x7b0>)
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001f46:	4837      	ldr	r0, [pc, #220]	@ (8002024 <main+0x7a4>)
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC2], hdma_tim2_ch2);
 8001f48:	62ac      	str	r4, [r5, #40]	@ 0x28
 8001f4a:	62a5      	str	r5, [r4, #40]	@ 0x28
  hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f4c:	e9c6 a904 	strd	sl, r9, [r6, #16]
  hdma_tim2_ch1.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001f50:	e9c6 3302 	strd	r3, r3, [r6, #8]
  hdma_tim2_ch1.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8001f54:	f8c6 8018 	str.w	r8, [r6, #24]
  hdma_tim2_ch1.Init.Priority            = DMA_PRIORITY_HIGH;
 8001f58:	6237      	str	r7, [r6, #32]
  hdma_tim2_ch1.Instance                 = DMA1_Channel3;
 8001f5a:	6032      	str	r2, [r6, #0]
  hdma_tim2_ch1.Init.Mode                = DMA_NORMAL;
 8001f5c:	61f3      	str	r3, [r6, #28]
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001f5e:	f004 fdad 	bl	8006abc <HAL_DMA_Init>
 8001f62:	4604      	mov	r4, r0
 8001f64:	b108      	cbz	r0, 8001f6a <main+0x6ea>
 8001f66:	b672      	cpsid	i
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <main+0x6e8>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	2026      	movs	r0, #38	@ 0x26
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC1], hdma_tim2_ch1);
 8001f70:	626e      	str	r6, [r5, #36]	@ 0x24
 8001f72:	62b5      	str	r5, [r6, #40]	@ 0x28
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001f74:	f004 fc24 	bl	80067c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f78:	2026      	movs	r0, #38	@ 0x26
 8001f7a:	f004 fc5d 	bl	8006838 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001f7e:	4622      	mov	r2, r4
 8001f80:	2103      	movs	r1, #3
 8001f82:	200b      	movs	r0, #11
 8001f84:	f004 fc1c 	bl	80067c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f88:	200b      	movs	r0, #11
 8001f8a:	f004 fc55 	bl	8006838 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2104      	movs	r1, #4
 8001f92:	2018      	movs	r0, #24
 8001f94:	f004 fc14 	bl	80067c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f98:	2018      	movs	r0, #24
 8001f9a:	f004 fc4d 	bl	8006838 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	2019      	movs	r0, #25
 8001fa4:	f004 fc0c 	bl	80067c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fa8:	2019      	movs	r0, #25
 8001faa:	f004 fc45 	bl	8006838 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001fae:	4622      	mov	r2, r4
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	2012      	movs	r0, #18
 8001fb4:	f004 fc04 	bl	80067c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fb8:	2012      	movs	r0, #18
 8001fba:	f004 fc3d 	bl	8006838 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	2028      	movs	r0, #40	@ 0x28
 8001fc4:	f004 fbfc 	bl	80067c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fc8:	2028      	movs	r0, #40	@ 0x28
 8001fca:	f004 fc35 	bl	8006838 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001fce:	4622      	mov	r2, r4
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	200e      	movs	r0, #14
 8001fd4:	f004 fbf4 	bl	80067c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001fd8:	200e      	movs	r0, #14
 8001fda:	f004 fc2d 	bl	8006838 <HAL_NVIC_EnableIRQ>
    char buf2[] = " hello After dshot_rx_init \r\n";
 8001fde:	4d15      	ldr	r5, [pc, #84]	@ (8002034 <main+0x7b4>)
  HAL_TIM_Base_Start(&htim1);
 8001fe0:	4815      	ldr	r0, [pc, #84]	@ (8002038 <main+0x7b8>)
  volatile uint8_t g_state = 0;
 8001fe2:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  HAL_TIM_Base_Start(&htim1);
 8001fe6:	f005 ffcb 	bl	8007f80 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001fea:	480d      	ldr	r0, [pc, #52]	@ (8002020 <main+0x7a0>)
 8001fec:	f005 ffc8 	bl	8007f80 <HAL_TIM_Base_Start>
  dshot_rx_init();
 8001ff0:	f7ff fbdc 	bl	80017ac <dshot_rx_init>
    char buf2[] = " hello After dshot_rx_init \r\n";
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	ac1d      	add	r4, sp, #116	@ 0x74
 8001ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ffe:	c407      	stmia	r4!, {r0, r1, r2}
    HAL_UART_Transmit(&huart2, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY);
 8002000:	480e      	ldr	r0, [pc, #56]	@ (800203c <main+0x7bc>)
    char buf2[] = " hello After dshot_rx_init \r\n";
 8002002:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY);
 8002004:	221d      	movs	r2, #29
 8002006:	a91d      	add	r1, sp, #116	@ 0x74
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	f006 ffce 	bl	8008fac <HAL_UART_Transmit>
    HAL_Delay(1000);
 8002010:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002014:	f003 fc30 	bl	8005878 <HAL_Delay>
  while (1)
 8002018:	e7fe      	b.n	8002018 <main+0x798>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	2000094c 	.word	0x2000094c
 8002024:	200008ec 	.word	0x200008ec
 8002028:	20000738 	.word	0x20000738
 800202c:	40020044 	.word	0x40020044
 8002030:	40020030 	.word	0x40020030
 8002034:	08010110 	.word	0x08010110
 8002038:	20000998 	.word	0x20000998
 800203c:	20000858 	.word	0x20000858

08002040 <Error_Handler>:
 8002040:	b672      	cpsid	i
  while (1)
 8002042:	e7fe      	b.n	8002042 <Error_Handler+0x2>

08002044 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8002044:	4b01      	ldr	r3, [pc, #4]	@ (800204c <MC_StartMotor1+0x8>)
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	f000 b8b4 	b.w	80021b4 <MCI_StartMotor>
 800204c:	20001eec 	.word	0x20001eec

08002050 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8002050:	4b01      	ldr	r3, [pc, #4]	@ (8002058 <MC_StopMotor1+0x8>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f000 b8c6 	b.w	80021e4 <MCI_StopMotor>
 8002058:	20001eec 	.word	0x20001eec

0800205c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 800205c:	4b01      	ldr	r3, [pc, #4]	@ (8002064 <MC_GetSTMStateMotor1+0x8>)
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	f000 b8a0 	b.w	80021a4 <MCI_GetSTMState>
 8002064:	20001eec 	.word	0x20001eec

08002068 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8002068:	2002      	movs	r0, #2
 800206a:	4770      	bx	lr

0800206c <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8002074:	2301      	movs	r3, #1
 8002076:	7403      	strb	r3, [r0, #16]
    pHandle->hFinalSpeed = hFinalSpeed;
 8002078:	8241      	strh	r1, [r0, #18]
    pHandle->hDurationms = hDurationms;
 800207a:	8402      	strh	r2, [r0, #32]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800207c:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop

08002084 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8002084:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002088:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800208c:	f880 c010 	strb.w	ip, [r0, #16]
    pHandle->hFinalTorque = hFinalTorque;
 8002090:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 8002092:	8402      	strh	r2, [r0, #32]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002094:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002096:	4770      	bx	lr

08002098 <MCI_SetSpeedMode>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002098:	6843      	ldr	r3, [r0, #4]
{
 800209a:	b510      	push	{r4, lr}
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
{
 80020a2:	4604      	mov	r4, r0
    STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80020a4:	2103      	movs	r1, #3
 80020a6:	6800      	ldr	r0, [r0, #0]
 80020a8:	f008 ffd8 	bl	800b05c <STC_SetControlMode>
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 80020ac:	2303      	movs	r3, #3
 80020ae:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80020b2:	bd10      	pop	{r4, pc}

080020b4 <MCI_SetOpenLoopCurrentMode>:
  * @note This function is only available when the Open loop Debug feature is
  * enabled at firmware generation time.
  */
__weak void MCI_SetOpenLoopCurrentMode(MCI_Handle_t *pHandle)
{
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80020b4:	6843      	ldr	r3, [r0, #4]
{
 80020b6:	b510      	push	{r4, lr}
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
{
 80020be:	4604      	mov	r4, r0
  STC_SetControlMode(pHandle->pSTC, MCM_OPEN_LOOP_CURRENT_MODE);
 80020c0:	2102      	movs	r1, #2
 80020c2:	6800      	ldr	r0, [r0, #0]
 80020c4:	f008 ffca 	bl	800b05c <STC_SetControlMode>
  pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_CURRENT_MODE;
 80020c8:	2302      	movs	r3, #2
 80020ca:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
}
 80020ce:	bd10      	pop	{r4, pc}

080020d0 <MCI_SetOpenLoopVoltageMode>:
  *
  * @note This function is only available when the Open loop Debug feature is
  * enabled at firmware generation time.
  */
__weak void MCI_SetOpenLoopVoltageMode(MCI_Handle_t *pHandle)
{
 80020d0:	b538      	push	{r3, r4, r5, lr}
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80020d2:	6843      	ldr	r3, [r0, #4]
 80020d4:	2501      	movs	r5, #1
{
 80020d6:	4604      	mov	r4, r0
  pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80020d8:	f883 5024 	strb.w	r5, [r3, #36]	@ 0x24
  STC_SetControlMode(pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE);
 80020dc:	6800      	ldr	r0, [r0, #0]
 80020de:	4629      	mov	r1, r5
 80020e0:	f008 ffbc 	bl	800b05c <STC_SetControlMode>
  pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_VOLTAGE_MODE;
 80020e4:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
}
 80020e8:	bd38      	pop	{r3, r4, r5, pc}
 80020ea:	bf00      	nop

080020ec <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80020ec:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
    pHandle->PastFaults |= hSetErrors;
 80020ee:	f8b0 c026 	ldrh.w	ip, [r0, #38]	@ 0x26
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80020f2:	430b      	orrs	r3, r1
 80020f4:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 80020f8:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80020fc:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->PastFaults |= hSetErrors;
 80020fe:	84c1      	strh	r1, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002104:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8002108:	2b01      	cmp	r3, #1
 800210a:	d000      	beq.n	800210e <MCI_ExecBufferedCommands+0xa>
 800210c:	4770      	bx	lr
{
 800210e:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8002110:	7c03      	ldrb	r3, [r0, #16]
 8002112:	3b01      	subs	r3, #1
 8002114:	4604      	mov	r4, r0
 8002116:	2b04      	cmp	r3, #4
 8002118:	d82a      	bhi.n	8002170 <MCI_ExecBufferedCommands+0x6c>
 800211a:	e8df f003 	tbb	[pc, r3]
 800211e:	192d      	.short	0x192d
 8002120:	0311      	.short	0x0311
 8002122:	03          	.byte	0x03
 8002123:	00          	.byte	0x00
          break;
        }

        case MCI_CMD_SETOPENLOOPVOLTAGE:
        {
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002124:	6843      	ldr	r3, [r0, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 800212c:	8c02      	ldrh	r2, [r0, #32]
 800212e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002132:	68c0      	ldr	r0, [r0, #12]
 8002134:	f009 fba2 	bl	800b87c <VSS_SetMecAcceleration>
          break;
      }

      if (commandHasBeenExecuted)
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8002138:	2302      	movs	r3, #2
 800213a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800213e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002140:	6843      	ldr	r3, [r0, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002148:	f8d0 2016 	ldr.w	r2, [r0, #22]
 800214c:	611a      	str	r2, [r3, #16]
      if (commandHasBeenExecuted)
 800214e:	e7f3      	b.n	8002138 <MCI_ExecBufferedCommands+0x34>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002150:	6843      	ldr	r3, [r0, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8002158:	6800      	ldr	r0, [r0, #0]
 800215a:	2104      	movs	r1, #4
 800215c:	f008 ff7e 	bl	800b05c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8002160:	8c22      	ldrh	r2, [r4, #32]
 8002162:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8002166:	6820      	ldr	r0, [r4, #0]
 8002168:	f008 ff7c 	bl	800b064 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800216c:	2800      	cmp	r0, #0
 800216e:	d1e3      	bne.n	8002138 <MCI_ExecBufferedCommands+0x34>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8002170:	2303      	movs	r3, #3
 8002172:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 8002176:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002178:	6843      	ldr	r3, [r0, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8002180:	6800      	ldr	r0, [r0, #0]
 8002182:	2103      	movs	r1, #3
 8002184:	f008 ff6a 	bl	800b05c <STC_SetControlMode>
          VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002188:	8c22      	ldrh	r2, [r4, #32]
 800218a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800218e:	68e0      	ldr	r0, [r4, #12]
 8002190:	f009 fb74 	bl	800b87c <VSS_SetMecAcceleration>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002194:	8c22      	ldrh	r2, [r4, #32]
 8002196:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800219a:	6820      	ldr	r0, [r4, #0]
 800219c:	f008 ff62 	bl	800b064 <STC_ExecRamp>
          break;
 80021a0:	e7e4      	b.n	800216c <MCI_ExecBufferedCommands+0x68>
 80021a2:	bf00      	nop

080021a4 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 80021a4:	f890 0023 	ldrb.w	r0, [r0, #35]	@ 0x23
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 80021ac:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 80021ae:	4770      	bx	lr

080021b0 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 80021b0:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
 80021b2:	4770      	bx	lr

080021b4 <MCI_StartMotor>:
{
 80021b4:	b510      	push	{r4, lr}
 80021b6:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80021b8:	f7ff fff4 	bl	80021a4 <MCI_GetSTMState>
 80021bc:	b108      	cbz	r0, 80021c2 <MCI_StartMotor+0xe>
  bool retVal = false;
 80021be:	2000      	movs	r0, #0
}
 80021c0:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff fff2 	bl	80021ac <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d1f8      	bne.n	80021be <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ffef 	bl	80021b0 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d1f3      	bne.n	80021be <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80021d6:	2001      	movs	r0, #1
 80021d8:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80021dc:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 80021e0:	bd10      	pop	{r4, pc}
 80021e2:	bf00      	nop

080021e4 <MCI_StopMotor>:
{
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 80021e8:	f7ff ffdc 	bl	80021a4 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 80021ec:	4604      	mov	r4, r0
 80021ee:	b118      	cbz	r0, 80021f8 <MCI_StopMotor+0x14>
 80021f0:	f1b0 040c 	subs.w	r4, r0, #12
 80021f4:	bf18      	it	ne
 80021f6:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80021f8:	4628      	mov	r0, r5
 80021fa:	f7ff ffd7 	bl	80021ac <MCI_GetOccurredFaults>
 80021fe:	b110      	cbz	r0, 8002206 <MCI_StopMotor+0x22>
  bool retVal = false;
 8002200:	2400      	movs	r4, #0
}
 8002202:	4620      	mov	r0, r4
 8002204:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002206:	4628      	mov	r0, r5
 8002208:	f7ff ffd2 	bl	80021b0 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800220c:	2800      	cmp	r0, #0
 800220e:	d1f7      	bne.n	8002200 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002210:	2c00      	cmp	r4, #0
 8002212:	d0f5      	beq.n	8002200 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8002214:	2305      	movs	r3, #5
 8002216:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
      retVal = true;
 800221a:	e7f2      	b.n	8002202 <MCI_StopMotor+0x1e>

0800221c <MCI_FaultAcknowledged>:
{
 800221c:	b510      	push	{r4, lr}
 800221e:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002220:	f7ff ffc0 	bl	80021a4 <MCI_GetSTMState>
 8002224:	280b      	cmp	r0, #11
 8002226:	d001      	beq.n	800222c <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8002228:	2000      	movs	r0, #0
}
 800222a:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff ffbf 	bl	80021b0 <MCI_GetCurrentFaults>
 8002232:	2800      	cmp	r0, #0
 8002234:	d1f8      	bne.n	8002228 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8002236:	2302      	movs	r3, #2
 8002238:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
      pHandle->PastFaults = MC_NO_FAULTS;
 800223c:	84e0      	strh	r0, [r4, #38]	@ 0x26
      reVal = true;
 800223e:	2001      	movs	r0, #1
}
 8002240:	bd10      	pop	{r4, pc}
 8002242:	bf00      	nop

08002244 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8002244:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002246:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8002248:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8002250:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <MCI_SetCurrentReferences>:
{
 8002258:	b530      	push	{r4, r5, lr}
 800225a:	b083      	sub	sp, #12
 800225c:	4604      	mov	r4, r0
 800225e:	460d      	mov	r5, r1
    mode = MCI_GetControlMode( pHandle );
 8002260:	f7ff fff6 	bl	8002250 <MCI_GetControlMode>
    if (mode == MCM_OPEN_LOOP_CURRENT_MODE)
 8002264:	2802      	cmp	r0, #2
 8002266:	d00b      	beq.n	8002280 <MCI_SetCurrentReferences+0x28>
      pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8002268:	2203      	movs	r2, #3
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800226a:	2301      	movs	r3, #1
 800226c:	2004      	movs	r0, #4
      pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800226e:	7422      	strb	r2, [r4, #16]
      pHandle->Iqdref.q = Iqdref.q;
 8002270:	f8c4 5016 	str.w	r5, [r4, #22]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002274:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
      pHandle->LastModalitySetByUser = mode;
 8002278:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
}
 800227c:	b003      	add	sp, #12
 800227e:	bd30      	pop	{r4, r5, pc}
      pHandle->pFOCVars->Iqdref.q = Iqdref.q;
 8002280:	6863      	ldr	r3, [r4, #4]
      pHandle->Iqdref.q = Iqdref.q;
 8002282:	f8c4 5016 	str.w	r5, [r4, #22]
      pHandle->pFOCVars->Iqdref.q = Iqdref.q;
 8002286:	611d      	str	r5, [r3, #16]
      pHandle->LastModalitySetByUser = mode;
 8002288:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
}
 800228c:	b003      	add	sp, #12
 800228e:	bd30      	pop	{r4, r5, pc}

08002290 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8002290:	7c03      	ldrb	r3, [r0, #16]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d013      	beq.n	80022be <MCI_GetImposedMotorDirection+0x2e>
 8002296:	2b03      	cmp	r3, #3
 8002298:	d009      	beq.n	80022ae <MCI_GetImposedMotorDirection+0x1e>
 800229a:	2b01      	cmp	r3, #1
 800229c:	d117      	bne.n	80022ce <MCI_GetImposedMotorDirection+0x3e>
    {
      case MCI_CMD_EXECSPEEDRAMP:
      {
        if (pHandle->hFinalSpeed < 0)
 800229e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  int16_t retVal = 1;
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bfb4      	ite	lt
 80022a6:	f04f 30ff 	movlt.w	r0, #4294967295
 80022aa:	2001      	movge	r0, #1
 80022ac:	4770      	bx	lr
        break;
      }

      case MCI_CMD_SETCURRENTREFERENCES:
      {
        if (pHandle->Iqdref.q < 0)
 80022ae:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
  int16_t retVal = 1;
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bfb4      	ite	lt
 80022b6:	f04f 30ff 	movlt.w	r0, #4294967295
 80022ba:	2001      	movge	r0, #1
 80022bc:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 80022be:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
  int16_t retVal = 1;
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bfb4      	ite	lt
 80022c6:	f04f 30ff 	movlt.w	r0, #4294967295
 80022ca:	2001      	movge	r0, #1
 80022cc:	4770      	bx	lr
 80022ce:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80022d4:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop

080022dc <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80022dc:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop

080022e4 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80022e4:	8c00      	ldrh	r0, [r0, #32]
 80022e6:	4770      	bx	lr

080022e8 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80022e8:	6803      	ldr	r3, [r0, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 80022ee:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop

080022f4 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 80022f4:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80022f6:	6958      	ldr	r0, [r3, #20]
 80022f8:	f008 be48 	b.w	800af8c <SPD_GetAvrgMecSpeedUnit>

080022fc <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80022fc:	6800      	ldr	r0, [r0, #0]
 80022fe:	f008 bea9 	b.w	800b054 <STC_GetMecSpeedRefUnit>
 8002302:	bf00      	nop

08002304 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8002304:	6843      	ldr	r3, [r0, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	b283      	uxth	r3, r0
 800230a:	f36f 000f 	bfc	r0, #0, #16
{
 800230e:	b082      	sub	sp, #8
#endif
}
 8002310:	4318      	orrs	r0, r3
 8002312:	b002      	add	sp, #8
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop

08002318 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8002318:	6843      	ldr	r3, [r0, #4]
 800231a:	6858      	ldr	r0, [r3, #4]
 800231c:	b283      	uxth	r3, r0
 800231e:	f36f 000f 	bfc	r0, #0, #16
{
 8002322:	b082      	sub	sp, #8
#endif
}
 8002324:	4318      	orrs	r0, r3
 8002326:	b002      	add	sp, #8
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop

0800232c <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 800232c:	6843      	ldr	r3, [r0, #4]
 800232e:	68d8      	ldr	r0, [r3, #12]
 8002330:	b283      	uxth	r3, r0
 8002332:	f36f 000f 	bfc	r0, #0, #16
{
 8002336:	b082      	sub	sp, #8
#endif
}
 8002338:	4318      	orrs	r0, r3
 800233a:	b002      	add	sp, #8
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop

08002340 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8002340:	6843      	ldr	r3, [r0, #4]
 8002342:	6918      	ldr	r0, [r3, #16]
 8002344:	b283      	uxth	r3, r0
 8002346:	f36f 000f 	bfc	r0, #0, #16
{
 800234a:	b082      	sub	sp, #8
#endif
}
 800234c:	4318      	orrs	r0, r3
 800234e:	b002      	add	sp, #8
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop

08002354 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8002354:	6843      	ldr	r3, [r0, #4]
 8002356:	f8d3 0016 	ldr.w	r0, [r3, #22]
 800235a:	b283      	uxth	r3, r0
 800235c:	f36f 000f 	bfc	r0, #0, #16
{
 8002360:	b082      	sub	sp, #8
#endif
}
 8002362:	4318      	orrs	r0, r3
 8002364:	b002      	add	sp, #8
 8002366:	4770      	bx	lr

08002368 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8002368:	6843      	ldr	r3, [r0, #4]
 800236a:	f8d3 001a 	ldr.w	r0, [r3, #26]
 800236e:	b283      	uxth	r3, r0
 8002370:	f36f 000f 	bfc	r0, #0, #16
{
 8002374:	b082      	sub	sp, #8
#endif
}
 8002376:	4318      	orrs	r0, r3
 8002378:	b002      	add	sp, #8
 800237a:	4770      	bx	lr

0800237c <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 800237c:	6843      	ldr	r3, [r0, #4]
#endif
}
 800237e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8002382:	4770      	bx	lr

08002384 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8002384:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8002386:	e9d0 0400 	ldrd	r0, r4, [r0]
 800238a:	f008 feed 	bl	800b168 <STC_GetDefaultIqdref>
 800238e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002392:	8220      	strh	r0, [r4, #16]
 8002394:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002396:	bd10      	pop	{r4, pc}

08002398 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8002398:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800239c:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80023a0:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80023a4:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80023a8:	fb10 f202 	smulbb	r2, r0, r2
 80023ac:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80023b0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80023b4:	b084      	sub	sp, #16
 80023b6:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 80023b8:	da05      	bge.n	80023c6 <MCM_Clarke+0x2e>
 80023ba:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80023bc:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 80023c0:	da0c      	bge.n	80023dc <MCM_Clarke+0x44>
 80023c2:	4a09      	ldr	r2, [pc, #36]	@ (80023e8 <MCM_Clarke+0x50>)
 80023c4:	e001      	b.n	80023ca <MCM_Clarke+0x32>
 80023c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2000      	movs	r0, #0
 80023ce:	f363 000f 	bfi	r0, r3, #0, #16
 80023d2:	b293      	uxth	r3, r2
 80023d4:	f363 401f 	bfi	r0, r3, #16, #16
}
 80023d8:	b004      	add	sp, #16
 80023da:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80023dc:	4802      	ldr	r0, [pc, #8]	@ (80023e8 <MCM_Clarke+0x50>)
 80023de:	b20a      	sxth	r2, r1
 80023e0:	4282      	cmp	r2, r0
 80023e2:	bfb8      	it	lt
 80023e4:	4602      	movlt	r2, r0
 80023e6:	e7f0      	b.n	80023ca <MCM_Clarke+0x32>
 80023e8:	ffff8001 	.word	0xffff8001

080023ec <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 80023ee:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80023f2:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 80023f6:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 80023fa:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80023fc:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 80023fe:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002400:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 8002402:	b002      	add	sp, #8
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40020c00 	.word	0x40020c00

0800240c <MCM_Park>:
{
 800240c:	b530      	push	{r4, r5, lr}
 800240e:	4605      	mov	r5, r0
 8002410:	4604      	mov	r4, r0
 8002412:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002414:	4608      	mov	r0, r1
 8002416:	f7ff ffe9 	bl	80023ec <MCM_Trig_Functions>
 800241a:	b22d      	sxth	r5, r5
 800241c:	b201      	sxth	r1, r0
 800241e:	1424      	asrs	r4, r4, #16
 8002420:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8002422:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002426:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800242e:	da05      	bge.n	800243c <MCM_Park+0x30>
 8002430:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8002432:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8002436:	da22      	bge.n	800247e <MCM_Park+0x72>
 8002438:	4a14      	ldr	r2, [pc, #80]	@ (800248c <MCM_Park+0x80>)
 800243a:	e001      	b.n	8002440 <MCM_Park+0x34>
 800243c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8002440:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002444:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8002448:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800244c:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8002450:	da04      	bge.n	800245c <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8002452:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002456:	da0c      	bge.n	8002472 <MCM_Park+0x66>
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <MCM_Park+0x80>)
 800245a:	e001      	b.n	8002460 <MCM_Park+0x54>
 800245c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8002460:	b292      	uxth	r2, r2
 8002462:	2000      	movs	r0, #0
 8002464:	f362 000f 	bfi	r0, r2, #0, #16
 8002468:	b29b      	uxth	r3, r3
 800246a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800246e:	b005      	add	sp, #20
 8002470:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8002472:	4906      	ldr	r1, [pc, #24]	@ (800248c <MCM_Park+0x80>)
 8002474:	b21b      	sxth	r3, r3
 8002476:	428b      	cmp	r3, r1
 8002478:	bfb8      	it	lt
 800247a:	460b      	movlt	r3, r1
 800247c:	e7f0      	b.n	8002460 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 800247e:	4b03      	ldr	r3, [pc, #12]	@ (800248c <MCM_Park+0x80>)
 8002480:	b212      	sxth	r2, r2
 8002482:	429a      	cmp	r2, r3
 8002484:	bfb8      	it	lt
 8002486:	461a      	movlt	r2, r3
 8002488:	e7da      	b.n	8002440 <MCM_Park+0x34>
 800248a:	bf00      	nop
 800248c:	ffff8001 	.word	0xffff8001

08002490 <MCM_Rev_Park>:
{
 8002490:	b530      	push	{r4, r5, lr}
 8002492:	4605      	mov	r5, r0
 8002494:	b085      	sub	sp, #20
 8002496:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002498:	4608      	mov	r0, r1
 800249a:	f7ff ffa7 	bl	80023ec <MCM_Trig_Functions>
 800249e:	1424      	asrs	r4, r4, #16
 80024a0:	1402      	asrs	r2, r0, #16
 80024a2:	b22d      	sxth	r5, r5
 80024a4:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80024a6:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80024aa:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80024ae:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80024b2:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80024b6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80024ba:	2000      	movs	r0, #0
 80024bc:	f363 000f 	bfi	r0, r3, #0, #16
 80024c0:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 80024c4:	f364 401f 	bfi	r0, r4, #16, #16
}
 80024c8:	b005      	add	sp, #20
 80024ca:	bd30      	pop	{r4, r5, pc}

080024cc <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80024cc:	2800      	cmp	r0, #0
 80024ce:	dd09      	ble.n	80024e4 <MCM_Sqrt+0x18>
 80024d0:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80024d2:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <MCM_Sqrt+0x1c>)
 80024d4:	f240 1269 	movw	r2, #361	@ 0x169
 80024d8:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80024da:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80024dc:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80024de:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 80024e0:	b662      	cpsie	i
}
 80024e2:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 80024e4:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 80024e6:	4770      	bx	lr
 80024e8:	40020c00 	.word	0x40020c00

080024ec <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 80024ec:	b308      	cbz	r0, 8002532 <MCboot+0x46>
{
 80024ee:	b510      	push	{r4, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 80024f0:	4a10      	ldr	r2, [pc, #64]	@ (8002534 <MCboot+0x48>)
    bMCBootCompleted = (uint8_t )0;
 80024f2:	4c11      	ldr	r4, [pc, #68]	@ (8002538 <MCboot+0x4c>)
    pMCIList[M1] = &Mci[M1];
 80024f4:	6002      	str	r2, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	7023      	strb	r3, [r4, #0]
    FOC_Init();
 80024fa:	f000 fa25 	bl	8002948 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 80024fe:	480f      	ldr	r0, [pc, #60]	@ (800253c <MCboot+0x50>)
 8002500:	f7fe fde0 	bl	80010c4 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002504:	480e      	ldr	r0, [pc, #56]	@ (8002540 <MCboot+0x54>)
 8002506:	f007 fb7b 	bl	8009c00 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 800250a:	480e      	ldr	r0, [pc, #56]	@ (8002544 <MCboot+0x58>)
 800250c:	f009 f90e 	bl	800b72c <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8002510:	480d      	ldr	r0, [pc, #52]	@ (8002548 <MCboot+0x5c>)
 8002512:	f002 f9c9 	bl	80048a8 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8002516:	480d      	ldr	r0, [pc, #52]	@ (800254c <MCboot+0x60>)
 8002518:	f008 fb82 	bl	800ac20 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 800251c:	480c      	ldr	r0, [pc, #48]	@ (8002550 <MCboot+0x64>)
 800251e:	f002 f9c3 	bl	80048a8 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8002522:	480c      	ldr	r0, [pc, #48]	@ (8002554 <MCboot+0x68>)
 8002524:	f007 fb16 	bl	8009b54 <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8002528:	f7ff fda0 	bl	800206c <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 800252c:	2301      	movs	r3, #1
 800252e:	7023      	strb	r3, [r4, #0]
  }
}
 8002530:	bd10      	pop	{r4, pc}
 8002532:	4770      	bx	lr
 8002534:	20000000 	.word	0x20000000
 8002538:	20000c54 	.word	0x20000c54
 800253c:	20000474 	.word	0x20000474
 8002540:	2000034c 	.word	0x2000034c
 8002544:	200003e0 	.word	0x200003e0
 8002548:	200003a4 	.word	0x200003a4
 800254c:	20000388 	.word	0x20000388
 8002550:	200003d0 	.word	0x200003d0
 8002554:	200003b4 	.word	0x200003b4

08002558 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002558:	4b01      	ldr	r3, [pc, #4]	@ (8002560 <TSK_SetChargeBootCapDelayM1+0x8>)
 800255a:	8018      	strh	r0, [r3, #0]
}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000c58 	.word	0x20000c58

08002564 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002564:	4b03      	ldr	r3, [pc, #12]	@ (8002574 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002566:	8818      	ldrh	r0, [r3, #0]
 8002568:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800256a:	fab0 f080 	clz	r0, r0
 800256e:	0940      	lsrs	r0, r0, #5
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000c58 	.word	0x20000c58

08002578 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002578:	4b01      	ldr	r3, [pc, #4]	@ (8002580 <TSK_SetStopPermanencyTimeM1+0x8>)
 800257a:	8018      	strh	r0, [r3, #0]
}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000c56 	.word	0x20000c56

08002584 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002586:	8818      	ldrh	r0, [r3, #0]
 8002588:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800258a:	fab0 f080 	clz	r0, r0
 800258e:	0940      	lsrs	r0, r0, #5
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000c56 	.word	0x20000c56

08002598 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002598:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 800259a:	2000      	movs	r0, #0
 800259c:	f000 fc48 	bl	8002e30 <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 80025a0:	4a06      	ldr	r2, [pc, #24]	@ (80025bc <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 80025a2:	4807      	ldr	r0, [pc, #28]	@ (80025c0 <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 80025a4:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 80025a6:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 80025aa:	3301      	adds	r3, #1
 80025ac:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 80025ae:	b909      	cbnz	r1, 80025b4 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 80025b0:	2000      	movs	r0, #0
 80025b2:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 80025b4:	f007 f952 	bl	800985c <MCPA_dataLog>
}
 80025b8:	2000      	movs	r0, #0
 80025ba:	bd08      	pop	{r3, pc}
 80025bc:	20001f54 	.word	0x20001f54
 80025c0:	20000438 	.word	0x20000438

080025c4 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 80025c6:	4604      	mov	r4, r0
 80025c8:	b1a8      	cbz	r0, 80025f6 <TSK_SafetyTask_PWMOFF+0x32>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80025ca:	4e22      	ldr	r6, [pc, #136]	@ (8002654 <TSK_SafetyTask_PWMOFF+0x90>)
 80025cc:	6830      	ldr	r0, [r6, #0]
 80025ce:	f001 f891 	bl	80036f4 <PWMC_IsFaultOccurred>
 80025d2:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 80025d4:	4d20      	ldr	r5, [pc, #128]	@ (8002658 <TSK_SafetyTask_PWMOFF+0x94>)
 80025d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80025da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80025de:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80025e2:	43ca      	mvns	r2, r1
 80025e4:	4628      	mov	r0, r5
 80025e6:	b292      	uxth	r2, r2
 80025e8:	f7ff fd80 	bl	80020ec <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80025ec:	4628      	mov	r0, r5
 80025ee:	f7ff fe29 	bl	8002244 <MCI_GetFaultState>
 80025f2:	b9d8      	cbnz	r0, 800262c <TSK_SafetyTask_PWMOFF+0x68>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80025f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 80025f6:	4819      	ldr	r0, [pc, #100]	@ (800265c <TSK_SafetyTask_PWMOFF+0x98>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80025f8:	4e16      	ldr	r6, [pc, #88]	@ (8002654 <TSK_SafetyTask_PWMOFF+0x90>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 80025fa:	f002 fa77 	bl	8004aec <RCM_ExecRegularConv>
 80025fe:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8002600:	4817      	ldr	r0, [pc, #92]	@ (8002660 <TSK_SafetyTask_PWMOFF+0x9c>)
 8002602:	f007 fab9 	bl	8009b78 <NTC_CalcAvTemp>
 8002606:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002608:	6830      	ldr	r0, [r6, #0]
 800260a:	f001 f873 	bl	80036f4 <PWMC_IsFaultOccurred>
 800260e:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8002610:	4814      	ldr	r0, [pc, #80]	@ (8002664 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002612:	f002 fa6b 	bl	8004aec <RCM_ExecRegularConv>
 8002616:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8002618:	4813      	ldr	r0, [pc, #76]	@ (8002668 <TSK_SafetyTask_PWMOFF+0xa4>)
 800261a:	f008 fb2d 	bl	800ac78 <RVBS_CalcAvVbus>
 800261e:	4307      	orrs	r7, r0
 8002620:	f007 070e 	and.w	r7, r7, #14
 8002624:	ea45 0107 	orr.w	r1, r5, r7
 8002628:	b289      	uxth	r1, r1
 800262a:	e7d3      	b.n	80025d4 <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800262c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002630:	f001 f814 	bl	800365c <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8002634:	480d      	ldr	r0, [pc, #52]	@ (800266c <TSK_SafetyTask_PWMOFF+0xa8>)
 8002636:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 800263a:	b923      	cbnz	r3, 8002646 <TSK_SafetyTask_PWMOFF+0x82>
    FOC_Clear(bMotor);
 800263c:	4620      	mov	r0, r4
}
 800263e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002642:	f000 b933 	b.w	80028ac <FOC_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002646:	f007 f9c7 	bl	80099d8 <MCPA_flushDataLog>
    FOC_Clear(bMotor);
 800264a:	4620      	mov	r0, r4
}
 800264c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002650:	f000 b92c 	b.w	80028ac <FOC_Clear>
 8002654:	20000c44 	.word	0x20000c44
 8002658:	20000000 	.word	0x20000000
 800265c:	200003d0 	.word	0x200003d0
 8002660:	200003b4 	.word	0x200003b4
 8002664:	200003a4 	.word	0x200003a4
 8002668:	20000388 	.word	0x20000388
 800266c:	20000438 	.word	0x20000438

08002670 <TSK_SafetyTask>:
{
 8002670:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <TSK_SafetyTask+0x1c>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d000      	beq.n	800267c <TSK_SafetyTask+0xc>
}
 800267a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800267c:	2000      	movs	r0, #0
 800267e:	f7ff ffa1 	bl	80025c4 <TSK_SafetyTask_PWMOFF>
}
 8002682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002686:	f002 baf9 	b.w	8004c7c <RCM_ExecUserConv>
 800268a:	bf00      	nop
 800268c:	20000c54 	.word	0x20000c54

08002690 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8002690:	4b1e      	ldr	r3, [pc, #120]	@ (800270c <MC_RunMotorControlTasks+0x7c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b1cb      	cbz	r3, 80026ca <MC_RunMotorControlTasks+0x3a>
{
 8002696:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002698:	4c1d      	ldr	r4, [pc, #116]	@ (8002710 <MC_RunMotorControlTasks+0x80>)
 800269a:	8823      	ldrh	r3, [r4, #0]
 800269c:	b1b3      	cbz	r3, 80026cc <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80026a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002714 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 80026a4:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80026a6:	8813      	ldrh	r3, [r2, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b11b      	cbz	r3, 80026b4 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 80026ac:	8813      	ldrh	r3, [r2, #0]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80026b4:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <MC_RunMotorControlTasks+0x88>)
 80026b6:	8813      	ldrh	r3, [r2, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b11b      	cbz	r3, 80026c4 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 80026bc:	8813      	ldrh	r3, [r2, #0]
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 80026c4:	f7ff ffd4 	bl	8002670 <TSK_SafetyTask>
}
 80026c8:	bd70      	pop	{r4, r5, r6, pc}
 80026ca:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80026cc:	4d13      	ldr	r5, [pc, #76]	@ (800271c <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 80026ce:	f000 f9f3 	bl	8002ab8 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80026d2:	f7ff fccd 	bl	8002070 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80026d6:	4629      	mov	r1, r5
 80026d8:	f851 0b0c 	ldr.w	r0, [r1], #12
 80026dc:	6883      	ldr	r3, [r0, #8]
 80026de:	4798      	blx	r3
 80026e0:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80026e2:	b130      	cbz	r0, 80026f2 <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80026e4:	4629      	mov	r1, r5
 80026e6:	220a      	movs	r2, #10
 80026e8:	f851 0b08 	ldr.w	r0, [r1], #8
 80026ec:	6803      	ldr	r3, [r0, #0]
 80026ee:	4798      	blx	r3
 80026f0:	b908      	cbnz	r0, 80026f6 <MC_RunMotorControlTasks+0x66>
{
 80026f2:	2301      	movs	r3, #1
 80026f4:	e7d5      	b.n	80026a2 <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80026f6:	4628      	mov	r0, r5
 80026f8:	f000 fd16 	bl	8003128 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 80026fc:	6828      	ldr	r0, [r5, #0]
 80026fe:	89ea      	ldrh	r2, [r5, #14]
 8002700:	6846      	ldr	r6, [r0, #4]
 8002702:	68a9      	ldr	r1, [r5, #8]
 8002704:	230a      	movs	r3, #10
 8002706:	47b0      	blx	r6
 8002708:	e7f3      	b.n	80026f2 <MC_RunMotorControlTasks+0x62>
 800270a:	bf00      	nop
 800270c:	20000c54 	.word	0x20000c54
 8002710:	20000c5a 	.word	0x20000c5a
 8002714:	20000c58 	.word	0x20000c58
 8002718:	20000c56 	.word	0x20000c56
 800271c:	20000464 	.word	0x20000464

08002720 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002720:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 8002722:	2000      	movs	r0, #0
 8002724:	f000 f8c2 	bl	80028ac <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002728:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800272c:	4802      	ldr	r0, [pc, #8]	@ (8002738 <TSK_HardwareFaultTask+0x18>)
 800272e:	2200      	movs	r2, #0
 8002730:	2180      	movs	r1, #128	@ 0x80
 8002732:	f7ff bcdb 	b.w	80020ec <MCI_FaultProcessing>
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000

0800273c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 800273c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800273e:	f7ff fc8d 	bl	800205c <MC_GetSTMStateMotor1>
 8002742:	b918      	cbnz	r0, 800274c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002748:	f7ff bc7c 	b.w	8002044 <MC_StartMotor1>
}
 800274c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002750:	f7ff bc7e 	b.w	8002050 <MC_StopMotor1>

08002754 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002754:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002756:	4a4d      	ldr	r2, [pc, #308]	@ (800288c <mc_lock_pins+0x138>)
 8002758:	494d      	ldr	r1, [pc, #308]	@ (8002890 <mc_lock_pins+0x13c>)
 800275a:	484e      	ldr	r0, [pc, #312]	@ (8002894 <mc_lock_pins+0x140>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 800275c:	2504      	movs	r5, #4
 800275e:	b092      	sub	sp, #72	@ 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002760:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002762:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002764:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002766:	69d3      	ldr	r3, [r2, #28]
 8002768:	9311      	str	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 800276a:	2602      	movs	r6, #2
  (void) temp;
 800276c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800276e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002770:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002772:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002774:	69d3      	ldr	r3, [r2, #28]
 8002776:	9310      	str	r3, [sp, #64]	@ 0x40
  (void) temp;
 8002778:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 800277a:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800277e:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 8002782:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002784:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002786:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002788:	69d4      	ldr	r4, [r2, #28]
 800278a:	940f      	str	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800278c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 8002790:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002792:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002794:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
 8002798:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800279a:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800279c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800279e:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80027a2:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 80027a6:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027aa:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027ac:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027ae:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027b0:	69d4      	ldr	r4, [r2, #28]
 80027b2:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 80027b4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027b6:	4c38      	ldr	r4, [pc, #224]	@ (8002898 <mc_lock_pins+0x144>)
 80027b8:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027ba:	2780      	movs	r7, #128	@ 0x80
 80027bc:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027be:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027c0:	69dc      	ldr	r4, [r3, #28]
 80027c2:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 80027c4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027c6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027c8:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027ca:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027cc:	69d8      	ldr	r0, [r3, #28]
 80027ce:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 80027d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027d2:	4832      	ldr	r0, [pc, #200]	@ (800289c <mc_lock_pins+0x148>)
 80027d4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027d6:	2408      	movs	r4, #8
 80027d8:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027da:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027dc:	69d8      	ldr	r0, [r3, #28]
 80027de:	900a      	str	r0, [sp, #40]	@ 0x28
  (void) temp;
 80027e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027e2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027e4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027e6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027e8:	69d9      	ldr	r1, [r3, #28]
 80027ea:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027ec:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027ee:	492c      	ldr	r1, [pc, #176]	@ (80028a0 <mc_lock_pins+0x14c>)
  (void) temp;
 80027f0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027f2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027f4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027f6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027f8:	69d9      	ldr	r1, [r3, #28]
 80027fa:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027fc:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027fe:	4929      	ldr	r1, [pc, #164]	@ (80028a4 <mc_lock_pins+0x150>)
  (void) temp;
 8002800:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002802:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002804:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002806:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002808:	69d8      	ldr	r0, [r3, #28]
 800280a:	9007      	str	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800280c:	31e0      	adds	r1, #224	@ 0xe0
  WRITE_REG(GPIOx->LCKR, PinMask);
 800280e:	f44f 7080 	mov.w	r0, #256	@ 0x100
  (void) temp;
 8002812:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002814:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002816:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002818:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800281a:	69d9      	ldr	r1, [r3, #28]
 800281c:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800281e:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002822:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 8002826:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002828:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800282a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800282c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800282e:	69d9      	ldr	r1, [r3, #28]
 8002830:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002832:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002836:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 800283a:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800283c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800283e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002840:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002846:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800284a:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 800284e:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002850:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002852:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002854:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800285a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800285e:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 8002862:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002864:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002866:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002868:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800286a:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800286c:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <mc_lock_pins+0x154>)
  temp = READ_REG(GPIOx->LCKR);
 800286e:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002870:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002874:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 8002878:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800287a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800287c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800287e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002884:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002886:	b012      	add	sp, #72	@ 0x48
 8002888:	bcf0      	pop	{r4, r5, r6, r7}
 800288a:	4770      	bx	lr
 800288c:	48000400 	.word	0x48000400
 8002890:	00010004 	.word	0x00010004
 8002894:	00010002 	.word	0x00010002
 8002898:	00010080 	.word	0x00010080
 800289c:	00010008 	.word	0x00010008
 80028a0:	00010040 	.word	0x00010040
 80028a4:	00010020 	.word	0x00010020
 80028a8:	48000800 	.word	0x48000800

080028ac <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80028ac:	b538      	push	{r3, r4, r5, lr}
 80028ae:	4604      	mov	r4, r0
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[bMotor] );
 80028b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028b4:	481e      	ldr	r0, [pc, #120]	@ (8002930 <FOC_Clear+0x84>)
 80028b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80028ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80028be:	f7ff fcc7 	bl	8002250 <MCI_GetControlMode>
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80028c2:	2226      	movs	r2, #38	@ 0x26
  FOCVars[bMotor].Iqd = NULL_qd;
  if ( mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 80028c4:	3801      	subs	r0, #1
 80028c6:	fb04 f202 	mul.w	r2, r4, r2
 80028ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002934 <FOC_Clear+0x88>)
 80028cc:	b2c0      	uxtb	r0, r0
 80028ce:	2801      	cmp	r0, #1
  FOCVars[bMotor].Iab = NULL_ab;
 80028d0:	f04f 0100 	mov.w	r1, #0
 80028d4:	5099      	str	r1, [r3, r2]
 80028d6:	eb03 0c02 	add.w	ip, r3, r2
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
 80028da:	bf88      	it	hi
 80028dc:	3210      	addhi	r2, #16
  FOCVars[bMotor].Iab = NULL_ab;
 80028de:	f8cc 1004 	str.w	r1, [ip, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 80028e2:	f8cc 100c 	str.w	r1, [ip, #12]
    FOCVars[bMotor].Iqdref = NULL_qd;
 80028e6:	bf88      	it	hi
 80028e8:	5099      	strhi	r1, [r3, r2]
 80028ea:	2126      	movs	r1, #38	@ 0x26
 80028ec:	fb01 3304 	mla	r3, r1, r4, r3
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80028f0:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <FOC_Clear+0x8c>)
  FOCVars[bMotor].Vqd = NULL_qd;
 80028f2:	2500      	movs	r5, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80028f4:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 80028f8:	f8c3 5016 	str.w	r5, [r3, #22]
 80028fc:	f8c3 501a 	str.w	r5, [r3, #26]
 8002900:	f8c3 501e 	str.w	r5, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002904:	4629      	mov	r1, r5
 8002906:	f007 f98f 	bl	8009c28 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <FOC_Clear+0x90>)
 800290c:	4629      	mov	r1, r5
 800290e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002912:	f007 f989 	bl	8009c28 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <FOC_Clear+0x94>)
 8002918:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800291c:	f008 fb92 	bl	800b044 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <FOC_Clear+0x98>)
 8002922:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800292a:	f000 be97 	b.w	800365c <PWMC_SwitchOffPWM>
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000
 8002934:	20000c1c 	.word	0x20000c1c
 8002938:	20000034 	.word	0x20000034
 800293c:	20000030 	.word	0x20000030
 8002940:	20000038 	.word	0x20000038
 8002944:	20000c44 	.word	0x20000c44

08002948 <FOC_Init>:
{
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800294a:	4d2d      	ldr	r5, [pc, #180]	@ (8002a00 <FOC_Init+0xb8>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 800294c:	4e2d      	ldr	r6, [pc, #180]	@ (8002a04 <FOC_Init+0xbc>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800294e:	482e      	ldr	r0, [pc, #184]	@ (8002a08 <FOC_Init+0xc0>)
    STO_PLL_Init (&STO_PLL_M1);
 8002950:	4f2e      	ldr	r7, [pc, #184]	@ (8002a0c <FOC_Init+0xc4>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8002952:	4c2f      	ldr	r4, [pc, #188]	@ (8002a10 <FOC_Init+0xc8>)
{
 8002954:	b085      	sub	sp, #20
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002956:	6028      	str	r0, [r5, #0]
    R3_2_Init(&PWM_Handle_M1);
 8002958:	f007 fd44 	bl	800a3e4 <R3_2_Init>
    startTimers();
 800295c:	f000 fcca 	bl	80032f4 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002960:	4630      	mov	r0, r6
 8002962:	f007 f94d 	bl	8009c00 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8002966:	4638      	mov	r0, r7
 8002968:	f008 fdf6 	bl	800b558 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800296c:	6820      	ldr	r0, [r4, #0]
 800296e:	463a      	mov	r2, r7
 8002970:	4631      	mov	r1, r6
 8002972:	f008 fb4f 	bl	800b014 <STC_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002976:	4f27      	ldr	r7, [pc, #156]	@ (8002a14 <FOC_Init+0xcc>)
 8002978:	682a      	ldr	r2, [r5, #0]
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	6821      	ldr	r1, [r4, #0]
 800297e:	4b26      	ldr	r3, [pc, #152]	@ (8002a18 <FOC_Init+0xd0>)
 8002980:	4826      	ldr	r0, [pc, #152]	@ (8002a1c <FOC_Init+0xd4>)
    OL_Init(&OpenLoop_ParamsM1, &VirtualSpeedSensorM1);     /* Only if M1 has open loop */
 8002982:	4e27      	ldr	r6, [pc, #156]	@ (8002a20 <FOC_Init+0xd8>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002984:	4d27      	ldr	r5, [pc, #156]	@ (8002a24 <FOC_Init+0xdc>)
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002986:	463a      	mov	r2, r7
 8002988:	f008 fa36 	bl	800adf8 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 800298c:	4826      	ldr	r0, [pc, #152]	@ (8002a28 <FOC_Init+0xe0>)
 800298e:	f007 f937 	bl	8009c00 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002992:	4826      	ldr	r0, [pc, #152]	@ (8002a2c <FOC_Init+0xe4>)
 8002994:	f007 f934 	bl	8009c00 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002998:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <FOC_Init+0xe8>)
 800299a:	4a26      	ldr	r2, [pc, #152]	@ (8002a34 <FOC_Init+0xec>)
 800299c:	681b      	ldr	r3, [r3, #0]
    OL_Init(&OpenLoop_ParamsM1, &VirtualSpeedSensorM1);     /* Only if M1 has open loop */
 800299e:	4639      	mov	r1, r7
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80029a0:	60da      	str	r2, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80029a2:	609d      	str	r5, [r3, #8]
    OL_Init(&OpenLoop_ParamsM1, &VirtualSpeedSensorM1);     /* Only if M1 has open loop */
 80029a4:	4630      	mov	r0, r6
 80029a6:	f007 f911 	bl	8009bcc <OL_Init>
    pOpenLoop[M1] = &OpenLoop_ParamsM1;
 80029aa:	4a23      	ldr	r2, [pc, #140]	@ (8002a38 <FOC_Init+0xf0>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80029ac:	4823      	ldr	r0, [pc, #140]	@ (8002a3c <FOC_Init+0xf4>)
    pOpenLoop[M1] = &OpenLoop_ParamsM1;
 80029ae:	6016      	str	r6, [r2, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80029b0:	4a23      	ldr	r2, [pc, #140]	@ (8002a40 <FOC_Init+0xf8>)
    MCI_SetSpeedMode(&Mci[M1]);
 80029b2:	4e24      	ldr	r6, [pc, #144]	@ (8002a44 <FOC_Init+0xfc>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80029b4:	6010      	str	r0, [r2, #0]
    REMNG_Init(pREMNG[M1]);
 80029b6:	f008 f98d 	bl	800acd4 <REMNG_Init>
    FOC_Clear(M1);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7ff ff76 	bl	80028ac <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 80029c0:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80029c2:	6820      	ldr	r0, [r4, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80029c4:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80029c8:	f008 fbce 	bl	800b168 <STC_GetDefaultIqdref>
 80029cc:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80029d0:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80029d2:	6820      	ldr	r0, [r4, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80029d4:	826a      	strh	r2, [r5, #18]
 80029d6:	822b      	strh	r3, [r5, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80029d8:	f008 fbc6 	bl	800b168 <STC_GetDefaultIqdref>
 80029dc:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_SetSpeedMode(&Mci[M1]);
 80029e0:	4630      	mov	r0, r6
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80029e2:	82ab      	strh	r3, [r5, #20]
    MCI_SetSpeedMode(&Mci[M1]);
 80029e4:	f7ff fb58 	bl	8002098 <MCI_SetSpeedMode>
    MCI_ExecSpeedRamp(&Mci[M1],
 80029e8:	6820      	ldr	r0, [r4, #0]
 80029ea:	f008 fbb9 	bl	800b160 <STC_GetMecSpeedRefUnitDefault>
 80029ee:	2200      	movs	r2, #0
 80029f0:	4601      	mov	r1, r0
 80029f2:	4630      	mov	r0, r6
}
 80029f4:	b005      	add	sp, #20
 80029f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 80029fa:	f7ff bb3b 	b.w	8002074 <MCI_ExecSpeedRamp>
 80029fe:	bf00      	nop
 8002a00:	20000c44 	.word	0x20000c44
 8002a04:	2000034c 	.word	0x2000034c
 8002a08:	200001a4 	.word	0x200001a4
 8002a0c:	2000007c 	.word	0x2000007c
 8002a10:	20000038 	.word	0x20000038
 8002a14:	200003e0 	.word	0x200003e0
 8002a18:	20000068 	.word	0x20000068
 8002a1c:	20000248 	.word	0x20000248
 8002a20:	20000058 	.word	0x20000058
 8002a24:	20000c1c 	.word	0x20000c1c
 8002a28:	20000320 	.word	0x20000320
 8002a2c:	200002f4 	.word	0x200002f4
 8002a30:	2000002c 	.word	0x2000002c
 8002a34:	20000388 	.word	0x20000388
 8002a38:	20000c5c 	.word	0x20000c5c
 8002a3c:	20000040 	.word	0x20000040
 8002a40:	20000c18 	.word	0x20000c18
 8002a44:	20000000 	.word	0x20000000

08002a48 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop

08002a4c <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a50:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a52:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 8002a54:	4e15      	ldr	r6, [pc, #84]	@ (8002aac <FOC_CalcCurrRef+0x60>)
 8002a56:	2526      	movs	r5, #38	@ 0x26
 8002a58:	fb05 6500 	mla	r5, r5, r0, r6
 8002a5c:	f9b5 8010 	ldrsh.w	r8, [r5, #16]
 8002a60:	f9b5 7012 	ldrsh.w	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a64:	b662      	cpsie	i
  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[bMotor] );
 8002a66:	4812      	ldr	r0, [pc, #72]	@ (8002ab0 <FOC_CalcCurrRef+0x64>)
 8002a68:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002a6c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002a70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002a74:	f7ff fbec 	bl	8002250 <MCI_GetControlMode>
  if (INTERNAL == FOCVars[bMotor].bDriveInput
 8002a78:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8002a7c:	b91b      	cbnz	r3, 8002a86 <FOC_CalcCurrRef+0x3a>
               && (mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE))
 8002a7e:	3801      	subs	r0, #1
 8002a80:	b2c3      	uxtb	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d809      	bhi.n	8002a9a <FOC_CalcCurrRef+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a86:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8002a88:	2326      	movs	r3, #38	@ 0x26
 8002a8a:	fb03 6604 	mla	r6, r3, r4, r6
 8002a8e:	f8a6 8010 	strh.w	r8, [r6, #16]
 8002a92:	8277      	strh	r7, [r6, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a94:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <FOC_CalcCurrRef+0x68>)
 8002a9c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002aa0:	f008 fb28 	bl	800b0f4 <STC_CalcTorqueReference>
 8002aa4:	4680      	mov	r8, r0
 8002aa6:	83e8      	strh	r0, [r5, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8002aa8:	e7ed      	b.n	8002a86 <FOC_CalcCurrRef+0x3a>
 8002aaa:	bf00      	nop
 8002aac:	20000c1c 	.word	0x20000c1c
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	20000038 	.word	0x20000038

08002ab8 <TSK_MediumFrequencyTaskM1>:
{
 8002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  mode = MCI_GetControlMode(&Mci[M1]);
 8002aba:	4cbe      	ldr	r4, [pc, #760]	@ (8002db4 <TSK_MediumFrequencyTaskM1+0x2fc>)
{
 8002abc:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8002abe:	2300      	movs	r3, #0
  mode = MCI_GetControlMode(&Mci[M1]);
 8002ac0:	4620      	mov	r0, r4
  int16_t wAux = 0;
 8002ac2:	f8ad 3000 	strh.w	r3, [sp]
  mode = MCI_GetControlMode(&Mci[M1]);
 8002ac6:	f7ff fbc3 	bl	8002250 <MCI_GetControlMode>
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002aca:	4669      	mov	r1, sp
  mode = MCI_GetControlMode(&Mci[M1]);
 8002acc:	4605      	mov	r5, r0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002ace:	48ba      	ldr	r0, [pc, #744]	@ (8002db8 <TSK_MediumFrequencyTaskM1+0x300>)
 8002ad0:	f008 fc4a 	bl	800b368 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002ad4:	4bb9      	ldr	r3, [pc, #740]	@ (8002dbc <TSK_MediumFrequencyTaskM1+0x304>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002ad6:	4606      	mov	r6, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	f007 f919 	bl	8009d10 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff fb66 	bl	80021b0 <MCI_GetCurrentFaults>
 8002ae4:	b120      	cbz	r0, 8002af0 <TSK_MediumFrequencyTaskM1+0x38>
    Mci[M1].State = FAULT_NOW;
 8002ae6:	230a      	movs	r3, #10
 8002ae8:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
}
 8002aec:	b003      	add	sp, #12
 8002aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7ff fb5b 	bl	80021ac <MCI_GetOccurredFaults>
 8002af6:	bb78      	cbnz	r0, 8002b58 <TSK_MediumFrequencyTaskM1+0xa0>
      switch (Mci[M1].State)
 8002af8:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8002afc:	2b13      	cmp	r3, #19
 8002afe:	d8f5      	bhi.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
 8002b00:	a201      	add	r2, pc, #4	@ (adr r2, 8002b08 <TSK_MediumFrequencyTaskM1+0x50>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002d01 	.word	0x08002d01
 8002b0c:	08002aed 	.word	0x08002aed
 8002b10:	08002aed 	.word	0x08002aed
 8002b14:	08002aed 	.word	0x08002aed
 8002b18:	08002c6d 	.word	0x08002c6d
 8002b1c:	08002aed 	.word	0x08002aed
 8002b20:	08002c3d 	.word	0x08002c3d
 8002b24:	08002aed 	.word	0x08002aed
 8002b28:	08002c1d 	.word	0x08002c1d
 8002b2c:	08002aed 	.word	0x08002aed
 8002b30:	08002b59 	.word	0x08002b59
 8002b34:	08002c0d 	.word	0x08002c0d
 8002b38:	08002aed 	.word	0x08002aed
 8002b3c:	08002aed 	.word	0x08002aed
 8002b40:	08002aed 	.word	0x08002aed
 8002b44:	08002aed 	.word	0x08002aed
 8002b48:	08002bbd 	.word	0x08002bbd
 8002b4c:	08002b85 	.word	0x08002b85
 8002b50:	08002aed 	.word	0x08002aed
 8002b54:	08002b63 	.word	0x08002b63
      Mci[M1].State = FAULT_OVER;
 8002b58:	230b      	movs	r3, #11
 8002b5a:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
}
 8002b5e:	b003      	add	sp, #12
 8002b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002b62:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	f000 80e8 	beq.w	8002d3c <TSK_MediumFrequencyTaskM1+0x284>
            if (! RUC_Exec(&RevUpControlM1))
 8002b6c:	4894      	ldr	r0, [pc, #592]	@ (8002dc0 <TSK_MediumFrequencyTaskM1+0x308>)
 8002b6e:	f008 f9cb 	bl	800af08 <RUC_Exec>
 8002b72:	4602      	mov	r2, r0
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f040 80f0 	bne.w	8002d5a <TSK_MediumFrequencyTaskM1+0x2a2>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8002b7a:	488e      	ldr	r0, [pc, #568]	@ (8002db4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002b7c:	2110      	movs	r1, #16
 8002b7e:	f7ff fab5 	bl	80020ec <MCI_FaultProcessing>
 8002b82:	e7b3      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002b84:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8002b88:	4d8e      	ldr	r5, [pc, #568]	@ (8002dc4 <TSK_MediumFrequencyTaskM1+0x30c>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002b8a:	2b05      	cmp	r3, #5
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8002b8c:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002b8e:	f000 80d7 	beq.w	8002d40 <TSK_MediumFrequencyTaskM1+0x288>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8002b92:	2101      	movs	r1, #1
 8002b94:	f000 fd66 	bl	8003664 <PWMC_CurrentReadingCalibr>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d0a7      	beq.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002b9c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	f000 8136 	beq.w	8002e12 <TSK_MediumFrequencyTaskM1+0x35a>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002ba6:	6828      	ldr	r0, [r5, #0]
 8002ba8:	2100      	movs	r1, #0
 8002baa:	f007 fb7f 	bl	800a2ac <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8002bae:	2014      	movs	r0, #20
 8002bb0:	f7ff fcd2 	bl	8002558 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8002bba:	e797      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002bbc:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	f000 80bb 	beq.w	8002d3c <TSK_MediumFrequencyTaskM1+0x284>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002bc6:	f7ff fccd 	bl	8002564 <TSK_ChargeBootCapDelayHasElapsedM1>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d08e      	beq.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002bce:	4e7d      	ldr	r6, [pc, #500]	@ (8002dc4 <TSK_MediumFrequencyTaskM1+0x30c>)
 8002bd0:	6830      	ldr	r0, [r6, #0]
 8002bd2:	f007 faab 	bl	800a12c <R3_2_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8002bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc8 <TSK_MediumFrequencyTaskM1+0x310>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002bd8:	497c      	ldr	r1, [pc, #496]	@ (8002dcc <TSK_MediumFrequencyTaskM1+0x314>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002be0:	4b7b      	ldr	r3, [pc, #492]	@ (8002dd0 <TSK_MediumFrequencyTaskM1+0x318>)
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	f008 fa2c 	bl	800b040 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8002be8:	4873      	ldr	r0, [pc, #460]	@ (8002db8 <TSK_MediumFrequencyTaskM1+0x300>)
 8002bea:	f008 fc8f 	bl	800b50c <STO_PLL_Clear>
              FOC_Clear( M1 );
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff fe5c 	bl	80028ac <FOC_Clear>
              if (MCM_OPEN_LOOP_VOLTAGE_MODE == mode || MCM_OPEN_LOOP_CURRENT_MODE == mode)
 8002bf4:	1e6b      	subs	r3, r5, #1
 8002bf6:	b2db      	uxtb	r3, r3
                Mci[M1].State = RUN;
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	bf8c      	ite	hi
 8002bfc:	2304      	movhi	r3, #4
 8002bfe:	2306      	movls	r3, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002c00:	6830      	ldr	r0, [r6, #0]
 8002c02:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8002c06:	f000 fd2b 	bl	8003660 <PWMC_SwitchOnPWM>
 8002c0a:	e76f      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8002c0c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	f47f af6b 	bne.w	8002aec <TSK_MediumFrequencyTaskM1+0x34>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002c16:	2300      	movs	r3, #0
 8002c18:	8463      	strh	r3, [r4, #34]	@ 0x22
 8002c1a:	e767      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8002c1c:	f7ff fcb2 	bl	8002584 <TSK_StopPermanencyTimeHasElapsedM1>
 8002c20:	2800      	cmp	r0, #0
 8002c22:	f43f af63 	beq.w	8002aec <TSK_MediumFrequencyTaskM1+0x34>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8002c26:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd0 <TSK_MediumFrequencyTaskM1+0x318>)
 8002c28:	4968      	ldr	r1, [pc, #416]	@ (8002dcc <TSK_MediumFrequencyTaskM1+0x314>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	f008 fa08 	bl	800b040 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8002c30:	4866      	ldr	r0, [pc, #408]	@ (8002dcc <TSK_MediumFrequencyTaskM1+0x314>)
 8002c32:	f008 fd6d 	bl	800b710 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002c36:	2300      	movs	r3, #0
 8002c38:	8463      	strh	r3, [r4, #34]	@ 0x22
 8002c3a:	e757      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002c3c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d07b      	beq.n	8002d3c <TSK_MediumFrequencyTaskM1+0x284>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8002c44:	485b      	ldr	r0, [pc, #364]	@ (8002db4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002c46:	f7ff fa5d 	bl	8002104 <MCI_ExecBufferedCommands>
            if (mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8002c4a:	1e6b      	subs	r3, r5, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	f240 80d6 	bls.w	8002e00 <TSK_MediumFrequencyTaskM1+0x348>
              FOC_CalcCurrRef(M1);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7ff fef9 	bl	8002a4c <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8002c5a:	2e00      	cmp	r6, #0
 8002c5c:	f47f af46 	bne.w	8002aec <TSK_MediumFrequencyTaskM1+0x34>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8002c60:	4854      	ldr	r0, [pc, #336]	@ (8002db4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002c62:	4632      	mov	r2, r6
 8002c64:	2120      	movs	r1, #32
 8002c66:	f7ff fa41 	bl	80020ec <MCI_FaultProcessing>
 8002c6a:	e73f      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002c6c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d063      	beq.n	8002d3c <TSK_MediumFrequencyTaskM1+0x284>
            if(! RUC_Exec(&RevUpControlM1))
 8002c74:	4852      	ldr	r0, [pc, #328]	@ (8002dc0 <TSK_MediumFrequencyTaskM1+0x308>)
 8002c76:	f008 f947 	bl	800af08 <RUC_Exec>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	f040 80ad 	bne.w	8002ddc <TSK_MediumFrequencyTaskM1+0x324>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8002c82:	484c      	ldr	r0, [pc, #304]	@ (8002db4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002c84:	2110      	movs	r1, #16
 8002c86:	f7ff fa31 	bl	80020ec <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8002c8a:	4850      	ldr	r0, [pc, #320]	@ (8002dcc <TSK_MediumFrequencyTaskM1+0x314>)
 8002c8c:	f10d 0102 	add.w	r1, sp, #2
 8002c90:	f008 fda2 	bl	800b7d8 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8002c94:	484a      	ldr	r0, [pc, #296]	@ (8002dc0 <TSK_MediumFrequencyTaskM1+0x308>)
 8002c96:	f008 f96f 	bl	800af78 <RUC_FirstAccelerationStageReached>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	f43f af26 	beq.w	8002aec <TSK_MediumFrequencyTaskM1+0x34>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8002ca0:	4e45      	ldr	r6, [pc, #276]	@ (8002db8 <TSK_MediumFrequencyTaskM1+0x300>)
 8002ca2:	f10d 0102 	add.w	r1, sp, #2
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f008 fc90 	bl	800b5cc <STO_PLL_IsObserverConverged>
 8002cac:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8002cae:	4841      	ldr	r0, [pc, #260]	@ (8002db4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002cb0:	f7ff faee 	bl	8002290 <MCI_GetImposedMotorDirection>
 8002cb4:	b241      	sxtb	r1, r0
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f008 fd26 	bl	800b708 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8002cbc:	4843      	ldr	r0, [pc, #268]	@ (8002dcc <TSK_MediumFrequencyTaskM1+0x314>)
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	f008 fe18 	bl	800b8f4 <VSS_SetStartTransition>
            if (ObserverConverged)
 8002cc4:	2d00      	cmp	r5, #0
 8002cc6:	f43f af11 	beq.w	8002aec <TSK_MediumFrequencyTaskM1+0x34>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8002cca:	4f3f      	ldr	r7, [pc, #252]	@ (8002dc8 <TSK_MediumFrequencyTaskM1+0x310>)
 8002ccc:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8002cd0:	6878      	ldr	r0, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 8002cd2:	4d40      	ldr	r5, [pc, #256]	@ (8002dd4 <TSK_MediumFrequencyTaskM1+0x31c>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8002cd4:	f7ff fb9a 	bl	800240c <MCM_Park>
 8002cd8:	9001      	str	r0, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8002cda:	6828      	ldr	r0, [r5, #0]
 8002cdc:	f007 fffa 	bl	800acd4 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8002ce0:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002ce4:	6828      	ldr	r0, [r5, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f008 f840 	bl	800ad6c <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8002cec:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8002cf0:	6828      	ldr	r0, [r5, #0]
 8002cf2:	2219      	movs	r2, #25
 8002cf4:	f008 f83a 	bl	800ad6c <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8002cf8:	2313      	movs	r3, #19
 8002cfa:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8002cfe:	e6f5      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002d00:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8002d04:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	f47f aeef 	bne.w	8002aec <TSK_MediumFrequencyTaskM1+0x34>
            if ( mode != MCM_OPEN_LOOP_VOLTAGE_MODE && mode != MCM_OPEN_LOOP_CURRENT_MODE)
 8002d0e:	1e6b      	subs	r3, r5, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d906      	bls.n	8002d24 <TSK_MediumFrequencyTaskM1+0x26c>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8002d16:	4827      	ldr	r0, [pc, #156]	@ (8002db4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002d18:	f7ff faba 	bl	8002290 <MCI_GetImposedMotorDirection>
 8002d1c:	4601      	mov	r1, r0
 8002d1e:	4828      	ldr	r0, [pc, #160]	@ (8002dc0 <TSK_MediumFrequencyTaskM1+0x308>)
 8002d20:	f008 f8a6 	bl	800ae70 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002d24:	4d27      	ldr	r5, [pc, #156]	@ (8002dc4 <TSK_MediumFrequencyTaskM1+0x30c>)
 8002d26:	6828      	ldr	r0, [r5, #0]
 8002d28:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	d15f      	bne.n	8002df0 <TSK_MediumFrequencyTaskM1+0x338>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8002d30:	f000 fc98 	bl	8003664 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8002d34:	2311      	movs	r3, #17
 8002d36:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8002d3a:	e6d7      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8002d3c:	4b21      	ldr	r3, [pc, #132]	@ (8002dc4 <TSK_MediumFrequencyTaskM1+0x30c>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	f007 f9f4 	bl	800a12c <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7ff fdb1 	bl	80028ac <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002d4a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002d4e:	f7ff fc13 	bl	8002578 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002d52:	2308      	movs	r3, #8
 8002d54:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
}
 8002d58:	e6c8      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8002d5a:	481c      	ldr	r0, [pc, #112]	@ (8002dcc <TSK_MediumFrequencyTaskM1+0x314>)
 8002d5c:	a901      	add	r1, sp, #4
 8002d5e:	f008 fd3b 	bl	800b7d8 <VSS_CalcAvrgMecSpeedUnit>
 8002d62:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8002d64:	4819      	ldr	r0, [pc, #100]	@ (8002dcc <TSK_MediumFrequencyTaskM1+0x314>)
 8002d66:	f008 fdd3 	bl	800b910 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8002d6a:	b915      	cbnz	r5, 8002d72 <TSK_MediumFrequencyTaskM1+0x2ba>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	f43f aebd 	beq.w	8002aec <TSK_MediumFrequencyTaskM1+0x34>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8002d72:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <TSK_MediumFrequencyTaskM1+0x310>)
 8002d74:	4818      	ldr	r0, [pc, #96]	@ (8002dd8 <TSK_MediumFrequencyTaskM1+0x320>)
 8002d76:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 8002d7a:	f006 ff5f 	bl	8009c3c <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8002d7e:	b201      	sxth	r1, r0
 8002d80:	fb05 f101 	mul.w	r1, r5, r1
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8002d84:	4d12      	ldr	r5, [pc, #72]	@ (8002dd0 <TSK_MediumFrequencyTaskM1+0x318>)
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8002d86:	4814      	ldr	r0, [pc, #80]	@ (8002dd8 <TSK_MediumFrequencyTaskM1+0x320>)
 8002d88:	f006 ff4e 	bl	8009c28 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8002d8c:	490a      	ldr	r1, [pc, #40]	@ (8002db8 <TSK_MediumFrequencyTaskM1+0x300>)
 8002d8e:	6828      	ldr	r0, [r5, #0]
 8002d90:	f008 f956 	bl	800b040 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fe57 	bl	8002a48 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7ff fe56 	bl	8002a4c <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8002da0:	6828      	ldr	r0, [r5, #0]
 8002da2:	f008 f9e7 	bl	800b174 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002da6:	4803      	ldr	r0, [pc, #12]	@ (8002db4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002da8:	f7ff f9ac 	bl	8002104 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8002dac:	2306      	movs	r3, #6
 8002dae:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 8002db2:	e69b      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
 8002db4:	20000000 	.word	0x20000000
 8002db8:	2000007c 	.word	0x2000007c
 8002dbc:	2000002c 	.word	0x2000002c
 8002dc0:	20000248 	.word	0x20000248
 8002dc4:	20000c44 	.word	0x20000c44
 8002dc8:	20000c1c 	.word	0x20000c1c
 8002dcc:	200003e0 	.word	0x200003e0
 8002dd0:	20000038 	.word	0x20000038
 8002dd4:	20000c18 	.word	0x20000c18
 8002dd8:	2000034c 	.word	0x2000034c
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <TSK_MediumFrequencyTaskM1+0x368>)
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	f008 f988 	bl	800b0f4 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <TSK_MediumFrequencyTaskM1+0x36c>)
 8002de6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 8002dea:	8218      	strh	r0, [r3, #16]
 8002dec:	825a      	strh	r2, [r3, #18]
 8002dee:	e74c      	b.n	8002c8a <TSK_MediumFrequencyTaskM1+0x1d2>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002df0:	2101      	movs	r1, #1
 8002df2:	f8a0 1060 	strh.w	r1, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002df6:	f000 fc35 	bl	8003664 <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002dfa:	6828      	ldr	r0, [r5, #0]
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	e6d4      	b.n	8002baa <TSK_MediumFrequencyTaskM1+0xf2>
              VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8002e00:	a901      	add	r1, sp, #4
 8002e02:	4809      	ldr	r0, [pc, #36]	@ (8002e28 <TSK_MediumFrequencyTaskM1+0x370>)
 8002e04:	f008 fce8 	bl	800b7d8 <VSS_CalcAvrgMecSpeedUnit>
              OL_Calc(pOpenLoop[M1]);
 8002e08:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <TSK_MediumFrequencyTaskM1+0x374>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	f006 fee6 	bl	8009bdc <OL_Calc>
 8002e10:	e66c      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
                FOC_Clear(M1);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7ff fd4a 	bl	80028ac <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	8463      	strh	r3, [r4, #34]	@ 0x22
 8002e1c:	e666      	b.n	8002aec <TSK_MediumFrequencyTaskM1+0x34>
 8002e1e:	bf00      	nop
 8002e20:	20000038 	.word	0x20000038
 8002e24:	20000c1c 	.word	0x20000c1c
 8002e28:	200003e0 	.word	0x200003e0
 8002e2c:	20000c5c 	.word	0x20000c5c

08002e30 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 8002e34:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 8002f88 <FOC_HighFrequencyTask+0x158>
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8002e38:	4c52      	ldr	r4, [pc, #328]	@ (8002f84 <FOC_HighFrequencyTask+0x154>)
  if (SWITCH_OVER == Mci[M1].State)
 8002e3a:	f898 3023 	ldrb.w	r3, [r8, #35]	@ 0x23
{
 8002e3e:	b088      	sub	sp, #32
 8002e40:	4605      	mov	r5, r0
  if (SWITCH_OVER == Mci[M1].State)
 8002e42:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8002e44:	f8d4 001a 	ldr.w	r0, [r4, #26]
 8002e48:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8002e4a:	f000 808e 	beq.w	8002f6a <FOC_HighFrequencyTask+0x13a>
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  MC_ControlMode_t mode;

  mode = MCI_GetControlMode( &Mci[M1] );
 8002e4e:	484e      	ldr	r0, [pc, #312]	@ (8002f88 <FOC_HighFrequencyTask+0x158>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002e50:	4f4e      	ldr	r7, [pc, #312]	@ (8002f8c <FOC_HighFrequencyTask+0x15c>)
  mode = MCI_GetControlMode( &Mci[M1] );
 8002e52:	f7ff f9fd 	bl	8002250 <MCI_GetControlMode>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002e56:	4b4e      	ldr	r3, [pc, #312]	@ (8002f90 <FOC_HighFrequencyTask+0x160>)
 8002e58:	681b      	ldr	r3, [r3, #0]
  mode = MCI_GetControlMode( &Mci[M1] );
 8002e5a:	4681      	mov	r9, r0
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8002e5c:	695b      	ldr	r3, [r3, #20]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002e5e:	6838      	ldr	r0, [r7, #0]
 8002e60:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002e64:	6803      	ldr	r3, [r0, #0]
 8002e66:	a902      	add	r1, sp, #8
 8002e68:	4798      	blx	r3
  RCM_ReadOngoingConv();
 8002e6a:	f001 ff7f 	bl	8004d6c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8002e6e:	f001 ff39 	bl	8004ce4 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002e72:	9802      	ldr	r0, [sp, #8]
 8002e74:	f7ff fa90 	bl	8002398 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002e78:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002e7a:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002e7c:	f7ff fac6 	bl	800240c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002e80:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002e84:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002e86:	b201      	sxth	r1, r0
 8002e88:	1a59      	subs	r1, r3, r1
 8002e8a:	4b42      	ldr	r3, [pc, #264]	@ (8002f94 <FOC_HighFrequencyTask+0x164>)
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	f006 feff 	bl	8009c90 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002e92:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002e96:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8002e9a:	1ac9      	subs	r1, r1, r3
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f98 <FOC_HighFrequencyTask+0x168>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002e9e:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	f006 fef5 	bl	8009c90 <PI_Controller>
 8002ea6:	fa1f f18a 	uxth.w	r1, sl
  if (mode == MCM_OPEN_LOOP_VOLTAGE_MODE)
 8002eaa:	f1b9 0f01 	cmp.w	r9, #1
 8002eae:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002eb2:	d054      	beq.n	8002f5e <FOC_HighFrequencyTask+0x12e>
  }
  else
  {
    /* Nothing to do */
  }
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002eb4:	4839      	ldr	r0, [pc, #228]	@ (8002f9c <FOC_HighFrequencyTask+0x16c>)
 8002eb6:	f006 fca3 	bl	8009800 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002eba:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002ebc:	4681      	mov	r9, r0
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002ebe:	f7ff fae7 	bl	8002490 <MCM_Rev_Park>
 8002ec2:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002ec4:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002ec6:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002ec8:	f000 fa80 	bl	80033cc <PWMC_SetPhaseVoltage>
 8002ecc:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8002ece:	9802      	ldr	r0, [sp, #8]
 8002ed0:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002ed2:	9803      	ldr	r0, [sp, #12]
 8002ed4:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002ed6:	9800      	ldr	r0, [sp, #0]
 8002ed8:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 8002eda:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002edc:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8002ede:	f8c4 9016 	str.w	r9, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 8002ee2:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002ee4:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 8002ee8:	d031      	beq.n	8002f4e <FOC_HighFrequencyTask+0x11e>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002eea:	482d      	ldr	r0, [pc, #180]	@ (8002fa0 <FOC_HighFrequencyTask+0x170>)
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002eec:	4e2d      	ldr	r6, [pc, #180]	@ (8002fa4 <FOC_HighFrequencyTask+0x174>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002eee:	f008 f843 	bl	800af78 <RUC_FirstAccelerationStageReached>
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 8002ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa8 <FOC_HighFrequencyTask+0x178>)
 8002ef4:	4603      	mov	r3, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8002ef6:	6860      	ldr	r0, [r4, #4]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8002ef8:	88d2      	ldrh	r2, [r2, #6]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8002efa:	9006      	str	r0, [sp, #24]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002efc:	a905      	add	r1, sp, #20
 8002efe:	4630      	mov	r0, r6
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002f00:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8002f02:	f8ad 201c 	strh.w	r2, [sp, #28]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002f06:	f008 f93d 	bl	800b184 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	f008 fad2 	bl	800b4b4 <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8002f10:	b19c      	cbz	r4, 8002f3a <FOC_HighFrequencyTask+0x10a>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State) || (RUN == Mci[M1].State))
 8002f12:	f898 3023 	ldrb.w	r3, [r8, #35]	@ 0x23
 8002f16:	2b13      	cmp	r3, #19
 8002f18:	d80b      	bhi.n	8002f32 <FOC_HighFrequencyTask+0x102>
 8002f1a:	4a24      	ldr	r2, [pc, #144]	@ (8002fac <FOC_HighFrequencyTask+0x17c>)
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	07db      	lsls	r3, r3, #31
 8002f22:	d506      	bpl.n	8002f32 <FOC_HighFrequencyTask+0x102>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002f24:	88b3      	ldrh	r3, [r6, #4]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002f26:	4822      	ldr	r0, [pc, #136]	@ (8002fb0 <FOC_HighFrequencyTask+0x180>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002f28:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002f2c:	a904      	add	r1, sp, #16
 8002f2e:	f008 fc01 	bl	800b734 <VSS_CalcElAngle>
}
 8002f32:	4628      	mov	r0, r5
 8002f34:	b008      	add	sp, #32
 8002f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 8002f40:	f006 fe72 	bl	8009c28 <PID_SetIntegralTerm>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State) || (RUN == Mci[M1].State))
 8002f44:	f898 3023 	ldrb.w	r3, [r8, #35]	@ 0x23
 8002f48:	2b13      	cmp	r3, #19
 8002f4a:	d9e6      	bls.n	8002f1a <FOC_HighFrequencyTask+0xea>
 8002f4c:	e7f1      	b.n	8002f32 <FOC_HighFrequencyTask+0x102>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002f4e:	480e      	ldr	r0, [pc, #56]	@ (8002f88 <FOC_HighFrequencyTask+0x158>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	f7ff f8cb 	bl	80020ec <MCI_FaultProcessing>
}
 8002f56:	4628      	mov	r0, r5
 8002f58:	b008      	add	sp, #32
 8002f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Vqd = OL_VqdConditioning(pOpenLoop[M1]);
 8002f5e:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <FOC_HighFrequencyTask+0x184>)
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	f006 fe37 	bl	8009bd4 <OL_VqdConditioning>
 8002f66:	4601      	mov	r1, r0
 8002f68:	e7a4      	b.n	8002eb4 <FOC_HighFrequencyTask+0x84>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002f6a:	4e13      	ldr	r6, [pc, #76]	@ (8002fb8 <FOC_HighFrequencyTask+0x188>)
 8002f6c:	6830      	ldr	r0, [r6, #0]
 8002f6e:	f007 fedb 	bl	800ad28 <REMNG_RampCompleted>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	f47f af6b 	bne.w	8002e4e <FOC_HighFrequencyTask+0x1e>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8002f78:	6830      	ldr	r0, [r6, #0]
 8002f7a:	f007 feb3 	bl	800ace4 <REMNG_Calc>
 8002f7e:	8220      	strh	r0, [r4, #16]
 8002f80:	e765      	b.n	8002e4e <FOC_HighFrequencyTask+0x1e>
 8002f82:	bf00      	nop
 8002f84:	20000c1c 	.word	0x20000c1c
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000c44 	.word	0x20000c44
 8002f90:	20000038 	.word	0x20000038
 8002f94:	20000034 	.word	0x20000034
 8002f98:	20000030 	.word	0x20000030
 8002f9c:	2000003c 	.word	0x2000003c
 8002fa0:	20000248 	.word	0x20000248
 8002fa4:	2000007c 	.word	0x2000007c
 8002fa8:	20000388 	.word	0x20000388
 8002fac:	00080050 	.word	0x00080050
 8002fb0:	200003e0 	.word	0x200003e0
 8002fb4:	20000c5c 	.word	0x20000c5c
 8002fb8:	20000c18 	.word	0x20000c18

08002fbc <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc0:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8002fc2:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002fc4:	4b33      	ldr	r3, [pc, #204]	@ (8003094 <RI_SetRegCommandParser+0xd8>)
 8002fc6:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 8002fc8:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002fcc:	4b32      	ldr	r3, [pc, #200]	@ (8003098 <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002fce:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 8002fd0:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 8002fd4:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 8002fd8:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002fda:	f8a0 800e 	strh.w	r8, [r0, #14]
 8002fde:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 8002fe0:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002fe4:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8002fe6:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002fea:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 8002fee:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002ff0:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002ff4:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002ff8:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 8002ffc:	dd36      	ble.n	800306c <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 8002ffe:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003002:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 8003006:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 800300a:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 800300e:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003012:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 8003014:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8003016:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800301a:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 800301e:	d12d      	bne.n	800307c <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003020:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8003024:	f8cd e000 	str.w	lr, [sp]
 8003028:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 800302a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 800302e:	eb05 0309 	add.w	r3, r5, r9
 8003032:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8003034:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8003038:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 800303a:	b212      	sxth	r2, r2
        rxData = rxData+size;
 800303c:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 800303e:	d012      	beq.n	8003066 <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8003040:	42bd      	cmp	r5, r7
 8003042:	d021      	beq.n	8003088 <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 8003044:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 8003048:	89f3      	ldrh	r3, [r6, #14]
 800304a:	3301      	adds	r3, #1
 800304c:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800304e:	2800      	cmp	r0, #0
 8003050:	d0cb      	beq.n	8002fea <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8003052:	2807      	cmp	r0, #7
 8003054:	d012      	beq.n	800307c <RI_SetRegCommandParser+0xc0>
 8003056:	2301      	movs	r3, #1
 8003058:	280a      	cmp	r0, #10
 800305a:	9303      	str	r3, [sp, #12]
 800305c:	d1c5      	bne.n	8002fea <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800305e:	9803      	ldr	r0, [sp, #12]
 8003060:	b009      	add	sp, #36	@ 0x24
 8003062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8003066:	2a00      	cmp	r2, #0
 8003068:	d1ea      	bne.n	8003040 <RI_SetRegCommandParser+0x84>
 800306a:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 800306c:	9b03      	ldr	r3, [sp, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f5      	bne.n	800305e <RI_SetRegCommandParser+0xa2>
}
 8003072:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 8003074:	81f3      	strh	r3, [r6, #14]
}
 8003076:	b009      	add	sp, #36	@ 0x24
 8003078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 800307c:	2301      	movs	r3, #1
 800307e:	9303      	str	r3, [sp, #12]
}
 8003080:	9803      	ldr	r0, [sp, #12]
 8003082:	b009      	add	sp, #36	@ 0x24
 8003084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003088:	2308      	movs	r3, #8
 800308a:	9303      	str	r3, [sp, #12]
}
 800308c:	9803      	ldr	r0, [sp, #12]
 800308e:	b009      	add	sp, #36	@ 0x24
 8003090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003094:	0800372d 	.word	0x0800372d
 8003098:	0800382d 	.word	0x0800382d

0800309c <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 800309c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a0:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 80030a8:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 80030aa:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80030ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003120 <RI_GetRegCommandParser+0x84>)
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003124 <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 80030b4:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 80030b8:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80030ba:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 80030bc:	f1b8 0f00 	cmp.w	r8, #0
 80030c0:	d029      	beq.n	8003116 <RI_GetRegCommandParser+0x7a>
 80030c2:	4607      	mov	r7, r0
 80030c4:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 80030c6:	464d      	mov	r5, r9
 80030c8:	e012      	b.n	80030f0 <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80030ca:	f85e ac08 	ldr.w	sl, [lr, #-8]
 80030ce:	9400      	str	r4, [sp, #0]
 80030d0:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 80030d2:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 80030d6:	fa19 f383 	uxtah	r3, r9, r3
 80030da:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 80030dc:	b9e0      	cbnz	r0, 8003118 <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 80030de:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 80030e2:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80030e4:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 80030e6:	440a      	add	r2, r1
          txData = txData+size;
 80030e8:	440e      	add	r6, r1
          pHandle->txLength += size;
 80030ea:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80030ec:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 80030ee:	b19b      	cbz	r3, 8003118 <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 80030f0:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80030f4:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 80030f8:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 80030fc:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8003100:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003104:	f10d 030e 	add.w	r3, sp, #14
 8003108:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 800310a:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 800310c:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003110:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8003114:	d0d9      	beq.n	80030ca <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 8003116:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003118:	b006      	add	sp, #24
 800311a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800311e:	bf00      	nop
 8003120:	08003e35 	.word	0x08003e35
 8003124:	08003f69 	.word	0x08003f69

08003128 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8003128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312a:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800312c:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800312e:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003130:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003134:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003136:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003138:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800313c:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800313e:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003140:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003144:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003148:	b291      	uxth	r1, r2
{
 800314a:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800314c:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800314e:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003152:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003154:	d03c      	beq.n	80031d0 <MCP_ReceivedPacket+0xa8>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8003156:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4d54      	ldr	r5, [pc, #336]	@ (80032b0 <MCP_ReceivedPacket+0x188>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800315e:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003160:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003164:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8003168:	eb05 0783 	add.w	r7, r5, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;

    switch (command)
 800316c:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->txLength = 0U;
 8003170:	f04f 0500 	mov.w	r5, #0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8003174:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8003176:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8003178:	d835      	bhi.n	80031e6 <MCP_ReceivedPacket+0xbe>
 800317a:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 800317e:	d81e      	bhi.n	80031be <MCP_ReceivedPacket+0x96>
 8003180:	e8df f00c 	tbb	[pc, ip]
 8003184:	1d1d1d6c 	.word	0x1d1d1d6c
 8003188:	1d1d1d1d 	.word	0x1d1d1d1d
 800318c:	1d1d1d74 	.word	0x1d1d1d74
 8003190:	1d1d1d1d 	.word	0x1d1d1d1d
 8003194:	1d1d1d59 	.word	0x1d1d1d59
 8003198:	1d1d1d1d 	.word	0x1d1d1d1d
 800319c:	1d1d1d4b 	.word	0x1d1d1d4b
 80031a0:	1d1d1d1d 	.word	0x1d1d1d1d
 80031a4:	1d1d1d53 	.word	0x1d1d1d53
 80031a8:	1d1d1d1d 	.word	0x1d1d1d1d
 80031ac:	1d1d1d5e 	.word	0x1d1d1d5e
 80031b0:	1d1d1d1d 	.word	0x1d1d1d1d
 80031b4:	1d1d1d47 	.word	0x1d1d1d47
 80031b8:	1d1d1d1d 	.word	0x1d1d1d1d
 80031bc:	66          	.byte	0x66
 80031bd:	00          	.byte	0x00
 80031be:	2300      	movs	r3, #0
 80031c0:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80031c2:	68a2      	ldr	r2, [r4, #8]
 80031c4:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80031c6:	89e3      	ldrh	r3, [r4, #14]
 80031c8:	3301      	adds	r3, #1
 80031ca:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80031cc:	b003      	add	sp, #12
 80031ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80031d0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 80031d4:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80031d6:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80031da:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80031dc:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 80031de:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80031e0:	d951      	bls.n	8003286 <MCP_ReceivedPacket+0x15e>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80031e2:	200d      	movs	r0, #13
 80031e4:	e7ed      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
    switch (command)
 80031e6:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 80031ea:	d009      	beq.n	8003200 <MCP_ReceivedPacket+0xd8>
 80031ec:	d843      	bhi.n	8003276 <MCP_ReceivedPacket+0x14e>
 80031ee:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 80031f2:	d1e4      	bne.n	80031be <MCP_ReceivedPacket+0x96>
        MCI_Clear_Iqdref(pMCI);
 80031f4:	4638      	mov	r0, r7
 80031f6:	f7ff f8c5 	bl	8002384 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80031fa:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80031fc:	4628      	mov	r0, r5
        break;
 80031fe:	e7e0      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8003200:	68a3      	ldr	r3, [r4, #8]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4631      	mov	r1, r6
 8003206:	f104 030e 	add.w	r3, r4, #14
 800320a:	f7fe ff2d 	bl	8002068 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800320e:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003210:	e7d7      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
        if (IDLE == MCI_GetSTMState(pMCI))
 8003212:	4638      	mov	r0, r7
 8003214:	f7fe ffc6 	bl	80021a4 <MCI_GetSTMState>
 8003218:	b938      	cbnz	r0, 800322a <MCP_ReceivedPacket+0x102>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800321a:	4638      	mov	r0, r7
 800321c:	f7fe ffca 	bl	80021b4 <MCI_StartMotor>
 8003220:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003224:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8003226:	b2c0      	uxtb	r0, r0
 8003228:	e7cb      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
          (void)MCI_StopMotor(pMCI);
 800322a:	4638      	mov	r0, r7
 800322c:	f7fe ffda 	bl	80021e4 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003230:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003232:	2000      	movs	r0, #0
 8003234:	e7c5      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff ff30 	bl	800309c <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800323c:	89e3      	ldrh	r3, [r4, #14]
        break;
 800323e:	e7c0      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
        if (RUN == MCI_GetSTMState(pMCI))
 8003240:	4638      	mov	r0, r7
 8003242:	f7fe ffaf 	bl	80021a4 <MCI_GetSTMState>
 8003246:	2806      	cmp	r0, #6
 8003248:	d029      	beq.n	800329e <MCP_ReceivedPacket+0x176>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800324a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800324c:	2000      	movs	r0, #0
 800324e:	e7b8      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
        (void)MCI_FaultAcknowledged(pMCI);
 8003250:	4638      	mov	r0, r7
 8003252:	f7fe ffe3 	bl	800221c <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003256:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003258:	2000      	movs	r0, #0
        break;
 800325a:	e7b2      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
        *pHandle->txBuffer = MCP_VERSION;
 800325c:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 800325e:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8003260:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8003262:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8003264:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003266:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003268:	2000      	movs	r0, #0
        break;
 800326a:	e7aa      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800326c:	4620      	mov	r0, r4
 800326e:	f7ff fea5 	bl	8002fbc <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003272:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003274:	e7a5      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
    switch (command)
 8003276:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 800327a:	d1a0      	bne.n	80031be <MCP_ReceivedPacket+0x96>
        HAL_NVIC_SystemReset();
 800327c:	f003 faea 	bl	8006854 <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003280:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003282:	4628      	mov	r0, r5
        break;
 8003284:	e79d      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8003286:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <MCP_ReceivedPacket+0x18c>)
 8003288:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 800328c:	b16d      	cbz	r5, 80032aa <MCP_ReceivedPacket+0x182>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800328e:	68a3      	ldr	r3, [r4, #8]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	4631      	mov	r1, r6
 8003294:	f104 030e 	add.w	r3, r4, #14
 8003298:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800329a:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800329c:	e791      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
          MCI_StopRamp(pMCI);
 800329e:	4638      	mov	r0, r7
 80032a0:	f7ff f822 	bl	80022e8 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80032a4:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80032a6:	2000      	movs	r0, #0
 80032a8:	e78b      	b.n	80031c2 <MCP_ReceivedPacket+0x9a>
 80032aa:	462b      	mov	r3, r5
 80032ac:	e799      	b.n	80031e2 <MCP_ReceivedPacket+0xba>
 80032ae:	bf00      	nop
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000c60 	.word	0x20000c60

080032b8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80032b8:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80032ba:	f004 fba5 	bl	8007a08 <HAL_RCC_GetHCLKFreq>
 80032be:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <MX_MotorControl_Init+0x30>)
 80032c0:	fba3 3000 	umull	r3, r0, r3, r0
 80032c4:	09c0      	lsrs	r0, r0, #7
 80032c6:	f003 fad7 	bl	8006878 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80032ca:	4b08      	ldr	r3, [pc, #32]	@ (80032ec <MX_MotorControl_Init+0x34>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f003 fa74 	bl	80067c0 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80032d8:	4805      	ldr	r0, [pc, #20]	@ (80032f0 <MX_MotorControl_Init+0x38>)
 80032da:	f7ff f907 	bl	80024ec <MCboot>
  mc_lock_pins();
}
 80032de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80032e2:	f7ff ba37 	b.w	8002754 <mc_lock_pins>
 80032e6:	bf00      	nop
 80032e8:	10624dd3 	.word	0x10624dd3
 80032ec:	20000508 	.word	0x20000508
 80032f0:	20001eec 	.word	0x20001eec

080032f4 <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 80032f4:	4922      	ldr	r1, [pc, #136]	@ (8003380 <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 80032f6:	4a23      	ldr	r2, [pc, #140]	@ (8003384 <startTimers+0x90>)
 80032f8:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 80032fa:	b410      	push	{r4}
 80032fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003304:	f043 0310 	orr.w	r3, r3, #16
 8003308:	b083      	sub	sp, #12
 800330a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 800330c:	688b      	ldr	r3, [r1, #8]
 800330e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003312:	f023 0307 	bic.w	r3, r3, #7
 8003316:	f043 0306 	orr.w	r3, r3, #6
 800331a:	608b      	str	r3, [r1, #8]
 800331c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800331e:	07db      	lsls	r3, r3, #31
 8003320:	d416      	bmi.n	8003350 <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003322:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800332a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800332c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003336:	9b01      	ldr	r3, [sp, #4]
 8003338:	694b      	ldr	r3, [r1, #20]
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003340:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	6593      	str	r3, [r2, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8003348:	b003      	add	sp, #12
 800334a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800334e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8003350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003354:	480c      	ldr	r0, [pc, #48]	@ (8003388 <startTimers+0x94>)
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	4c0c      	ldr	r4, [pc, #48]	@ (800338c <startTimers+0x98>)
 800335c:	4001      	ands	r1, r0
 800335e:	f041 0120 	orr.w	r1, r1, #32
 8003362:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003364:	6959      	ldr	r1, [r3, #20]
 8003366:	f041 0101 	orr.w	r1, r1, #1
 800336a:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	4022      	ands	r2, r4
 8003370:	4001      	ands	r1, r0
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
}
 8003376:	b003      	add	sp, #12
 8003378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40021000 	.word	0x40021000
 8003388:	fdffff8f 	.word	0xfdffff8f
 800338c:	02000070 	.word	0x02000070

08003390 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8003390:	3201      	adds	r2, #1
{
 8003392:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8003394:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003396:	f06f 0602 	mvn.w	r6, #2
 800339a:	0155      	lsls	r5, r2, #5
 800339c:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 800339e:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80033a0:	f893 c000 	ldrb.w	ip, [r3]
 80033a4:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80033a8:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80033ac:	d80c      	bhi.n	80033c8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80033ae:	6904      	ldr	r4, [r0, #16]
 80033b0:	07a4      	lsls	r4, r4, #30
 80033b2:	d5f5      	bpl.n	80033a0 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 80033b4:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80033b8:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80033ba:	6106      	str	r6, [r0, #16]
 80033bc:	d8f0      	bhi.n	80033a0 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 80033be:	781c      	ldrb	r4, [r3, #0]
 80033c0:	2c0f      	cmp	r4, #15
 80033c2:	d8ed      	bhi.n	80033a0 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 80033c4:	2301      	movs	r3, #1
 80033c6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80033c8:	bd70      	pop	{r4, r5, r6, pc}
 80033ca:	bf00      	nop

080033cc <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80033cc:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80033ce:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80033d2:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80033d6:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80033da:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80033dc:	fb04 fc0c 	mul.w	ip, r4, ip
 80033e0:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80033e4:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80033e8:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 80033ec:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80033f0:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 80033f4:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 80033f8:	1c55      	adds	r5, r2, #1
{
 80033fa:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80033fc:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003400:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8003404:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8003408:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 800340c:	db6b      	blt.n	80034e6 <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 800340e:	1c5d      	adds	r5, r3, #1
 8003410:	db3d      	blt.n	800348e <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003412:	ebbe 0e01 	subs.w	lr, lr, r1
 8003416:	bf44      	itt	mi
 8003418:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 800341c:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8003420:	2b00      	cmp	r3, #0
 8003422:	bfbc      	itt	lt
 8003424:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8003428:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 800342c:	2a00      	cmp	r2, #0
 800342e:	bfb8      	it	lt
 8003430:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8003434:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003438:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 800343c:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8003440:	bfb8      	it	lt
 8003442:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8003446:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 800344a:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800344e:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8003452:	2900      	cmp	r1, #0
 8003454:	d16e      	bne.n	8003534 <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8003456:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 800345a:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 800345e:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 8003460:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8003464:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 8003466:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800346a:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800346e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003472:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 8003476:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800347a:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800347e:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003482:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8003486:	b003      	add	sp, #12
 8003488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800348c:	4708      	bx	r1
        if ( wX <= 0 )
 800348e:	f1bc 0f00 	cmp.w	ip, #0
 8003492:	dd7b      	ble.n	800358c <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 8003494:	2b00      	cmp	r3, #0
 8003496:	bfb8      	it	lt
 8003498:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800349c:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 80034a0:	bfb8      	it	lt
 80034a2:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 80034a6:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80034aa:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80034ae:	bfb8      	it	lt
 80034b0:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80034b4:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 80034b8:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 80034bc:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80034c0:	bfb8      	it	lt
 80034c2:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 80034c6:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 80034ca:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80034ce:	2900      	cmp	r1, #0
 80034d0:	f040 80ae 	bne.w	8003630 <PWMC_SetPhaseVoltage+0x264>
 80034d4:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 80034d8:	2c00      	cmp	r4, #0
 80034da:	f000 80b9 	beq.w	8003650 <PWMC_SetPhaseVoltage+0x284>
 80034de:	f04f 0c02 	mov.w	ip, #2
 80034e2:	2401      	movs	r4, #1
 80034e4:	e7bc      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 80034ea:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 80034ee:	db70      	blt.n	80035d2 <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 80034f0:	f1bc 0f00 	cmp.w	ip, #0
 80034f4:	dd23      	ble.n	800353e <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80034f6:	ebbe 0e0c 	subs.w	lr, lr, ip
 80034fa:	bf44      	itt	mi
 80034fc:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8003500:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8003504:	2a00      	cmp	r2, #0
 8003506:	bfb8      	it	lt
 8003508:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800350c:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8003510:	bfb8      	it	lt
 8003512:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 8003516:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8003518:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 800351c:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8003520:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8003524:	2d00      	cmp	r5, #0
 8003526:	d17e      	bne.n	8003626 <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8003528:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 800352c:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 800352e:	fa1f f18e 	uxth.w	r1, lr
 8003532:	e795      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
 8003534:	f04f 0c02 	mov.w	ip, #2
 8003538:	2400      	movs	r4, #0
 800353a:	2101      	movs	r1, #1
 800353c:	e790      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800353e:	ebbc 0101 	subs.w	r1, ip, r1
 8003542:	bf44      	itt	mi
 8003544:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8003548:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800354c:	2b00      	cmp	r3, #0
 800354e:	bfb8      	it	lt
 8003550:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8003554:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8003558:	bfb8      	it	lt
 800355a:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 800355e:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8003562:	f1bc 0200 	subs.w	r2, ip, #0
 8003566:	bfb8      	it	lt
 8003568:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800356c:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8003570:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003574:	bfb8      	it	lt
 8003576:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 800357a:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 800357e:	2d00      	cmp	r5, #0
 8003580:	d060      	beq.n	8003644 <PWMC_SetPhaseVoltage+0x278>
 8003582:	f04f 0c00 	mov.w	ip, #0
 8003586:	2401      	movs	r4, #1
 8003588:	2102      	movs	r1, #2
 800358a:	e769      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 800358c:	2a00      	cmp	r2, #0
 800358e:	bfb8      	it	lt
 8003590:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 8003594:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8003598:	bfb8      	it	lt
 800359a:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800359e:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 80035a2:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 80035a6:	f1bc 0300 	subs.w	r3, ip, #0
 80035aa:	bfb8      	it	lt
 80035ac:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80035b0:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 80035b4:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 80035b8:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80035bc:	bfb8      	it	lt
 80035be:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80035c2:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 80035c6:	b3c1      	cbz	r1, 800363a <PWMC_SetPhaseVoltage+0x26e>
 80035c8:	f04f 0c01 	mov.w	ip, #1
 80035cc:	2402      	movs	r4, #2
 80035ce:	2100      	movs	r1, #0
 80035d0:	e746      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80035d2:	ebbe 0e01 	subs.w	lr, lr, r1
 80035d6:	bf44      	itt	mi
 80035d8:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80035dc:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bfbc      	itt	lt
 80035e4:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80035e8:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80035ec:	2a00      	cmp	r2, #0
 80035ee:	bfb8      	it	lt
 80035f0:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80035f4:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 80035f8:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 80035fc:	bfb8      	it	lt
 80035fe:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8003602:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8003606:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 800360a:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 800360e:	b92d      	cbnz	r5, 800361c <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003610:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8003614:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 8003618:	b299      	uxth	r1, r3
 800361a:	e721      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
 800361c:	f04f 0c01 	mov.w	ip, #1
 8003620:	2400      	movs	r4, #0
 8003622:	2102      	movs	r1, #2
 8003624:	e71c      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
 8003626:	f04f 0c00 	mov.w	ip, #0
 800362a:	2402      	movs	r4, #2
 800362c:	2101      	movs	r1, #1
 800362e:	e717      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
 8003630:	f04f 0c02 	mov.w	ip, #2
 8003634:	2401      	movs	r4, #1
 8003636:	2100      	movs	r1, #0
 8003638:	e712      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800363a:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 800363e:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8003640:	b299      	uxth	r1, r3
 8003642:	e70d      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003644:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8003648:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 800364a:	fa1f f18e 	uxth.w	r1, lr
 800364e:	e707      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8003650:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 8003654:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8003656:	b291      	uxth	r1, r2
 8003658:	e702      	b.n	8003460 <PWMC_SetPhaseVoltage+0x94>
 800365a:	bf00      	nop

0800365c <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 800365c:	6843      	ldr	r3, [r0, #4]
 800365e:	4718      	bx	r3

08003660 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8003660:	6883      	ldr	r3, [r0, #8]
 8003662:	4718      	bx	r3

08003664 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8003664:	b510      	push	{r4, lr}
 8003666:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8003668:	b179      	cbz	r1, 800368a <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 800366a:	2901      	cmp	r1, #1
 800366c:	d001      	beq.n	8003672 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 800366e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8003670:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8003672:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8003676:	b16b      	cbz	r3, 8003694 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8003678:	3b01      	subs	r3, #1
 800367a:	b29b      	uxth	r3, r3
 800367c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f4      	bne.n	800366e <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8003684:	68c3      	ldr	r3, [r0, #12]
 8003686:	4798      	blx	r3
          retVal = true;
 8003688:	e004      	b.n	8003694 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 800368a:	f7ff ffe7 	bl	800365c <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800368e:	68e3      	ldr	r3, [r4, #12]
 8003690:	4620      	mov	r0, r4
 8003692:	4798      	blx	r3
      retVal = true;
 8003694:	2001      	movs	r0, #1
}
 8003696:	bd10      	pop	{r4, pc}

08003698 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8003698:	f890 3083 	ldrb.w	r3, [r0, #131]	@ 0x83
 800369c:	b91b      	cbnz	r3, 80036a6 <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 800369e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d004      	beq.n	80036b0 <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80036ac:	3078      	adds	r0, #120	@ 0x78
 80036ae:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80036b0:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80036b4:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80036b6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 80036b8:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80036bc:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80036be:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80036c2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80036c6:	628c      	str	r4, [r1, #40]	@ 0x28
 80036c8:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 80036d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d4:	3078      	adds	r0, #120	@ 0x78
 80036d6:	4770      	bx	lr

080036d8 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80036d8:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 80036da:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 80036dc:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80036e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036e4:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80036e6:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 80036e8:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 80036ec:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop

080036f4 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80036f4:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80036f6:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 80036fa:	b1a8      	cbz	r0, 8003728 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8003702:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8003704:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8003706:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800370a:	b11a      	cbz	r2, 8003714 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 8003712:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8003714:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8003718:	b12a      	cbz	r2, 8003726 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 800371a:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 800371e:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8003720:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8003722:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8003726:	4770      	bx	lr
 8003728:	2140      	movs	r1, #64	@ 0x40
 800372a:	e7ec      	b.n	8003706 <PWMC_IsFaultOccurred+0x12>

0800372c <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 800372c:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800372e:	3908      	subs	r1, #8
{
 8003730:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8003734:	2920      	cmp	r1, #32
 8003736:	d812      	bhi.n	800375e <RI_SetRegisterGlobal+0x32>
 8003738:	e8df f001 	tbb	[pc, r1]
 800373c:	11111117 	.word	0x11111117
 8003740:	11111111 	.word	0x11111111
 8003744:	11111121 	.word	0x11111121
 8003748:	11111111 	.word	0x11111111
 800374c:	1111112f 	.word	0x1111112f
 8003750:	11111111 	.word	0x11111111
 8003754:	11111139 	.word	0x11111139
 8003758:	11111111 	.word	0x11111111
 800375c:	4d          	.byte	0x4d
 800375d:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800375e:	2200      	movs	r2, #0
 8003760:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003762:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8003764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003768:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 800376a:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 800376c:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8003770:	bf14      	ite	ne
 8003772:	2005      	movne	r0, #5
 8003774:	2004      	moveq	r0, #4
}
 8003776:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 800377a:	801a      	strh	r2, [r3, #0]
}
 800377c:	4770      	bx	lr
      switch (regID)
 800377e:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003782:	d039      	beq.n	80037f8 <RI_SetRegisterGlobal+0xcc>
 8003784:	d942      	bls.n	800380c <RI_SetRegisterGlobal+0xe0>
 8003786:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800378a:	d035      	beq.n	80037f8 <RI_SetRegisterGlobal+0xcc>
 800378c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003790:	4290      	cmp	r0, r2
 8003792:	bf14      	ite	ne
 8003794:	2005      	movne	r0, #5
 8003796:	2004      	moveq	r0, #4
 8003798:	e02f      	b.n	80037fa <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 800379a:	2818      	cmp	r0, #24
      *size = 4;
 800379c:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80037a0:	bf14      	ite	ne
 80037a2:	2005      	movne	r0, #5
 80037a4:	4610      	moveq	r0, r2
}
 80037a6:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80037aa:	801a      	strh	r2, [r3, #0]
}
 80037ac:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80037ae:	2101      	movs	r1, #1
 80037b0:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80037b2:	f992 0000 	ldrsb.w	r0, [r2]
 80037b6:	b328      	cbz	r0, 8003804 <RI_SetRegisterGlobal+0xd8>
 80037b8:	fa1f f08c 	uxth.w	r0, ip
 80037bc:	e003      	b.n	80037c6 <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80037be:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80037c0:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 80037c4:	b1f4      	cbz	r4, 8003804 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 80037c6:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80037ca:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80037cc:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80037d0:	d3f5      	bcc.n	80037be <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 80037d2:	2004      	movs	r0, #4
 80037d4:	e7c6      	b.n	8003764 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 80037d6:	8812      	ldrh	r2, [r2, #0]
 80037d8:	3202      	adds	r2, #2
 80037da:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80037dc:	fa1f fc8c 	uxth.w	ip, ip
 80037e0:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 80037e2:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80037e4:	d81a      	bhi.n	800381c <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 80037e6:	28a8      	cmp	r0, #168	@ 0xa8
 80037e8:	d0f3      	beq.n	80037d2 <RI_SetRegisterGlobal+0xa6>
 80037ea:	d81b      	bhi.n	8003824 <RI_SetRegisterGlobal+0xf8>
 80037ec:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80037f0:	2828      	cmp	r0, #40	@ 0x28
 80037f2:	d0ee      	beq.n	80037d2 <RI_SetRegisterGlobal+0xa6>
 80037f4:	2005      	movs	r0, #5
 80037f6:	e7b5      	b.n	8003764 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 80037f8:	2000      	movs	r0, #0
      *size = 2;
 80037fa:	2202      	movs	r2, #2
}
 80037fc:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8003800:	801a      	strh	r2, [r3, #0]
}
 8003802:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8003804:	2300      	movs	r3, #0
 8003806:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8003808:	2004      	movs	r0, #4
 800380a:	e7ab      	b.n	8003764 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 800380c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003810:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003814:	bf14      	ite	ne
 8003816:	2005      	movne	r0, #5
 8003818:	2004      	moveq	r0, #4
 800381a:	e7ee      	b.n	80037fa <RI_SetRegisterGlobal+0xce>
        *size = 0;
 800381c:	2200      	movs	r2, #0
 800381e:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8003820:	200a      	movs	r0, #10
 8003822:	e79f      	b.n	8003764 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 8003824:	28e8      	cmp	r0, #232	@ 0xe8
 8003826:	d1e5      	bne.n	80037f4 <RI_SetRegisterGlobal+0xc8>
 8003828:	e7d3      	b.n	80037d2 <RI_SetRegisterGlobal+0xa6>
 800382a:	bf00      	nop

0800382c <RI_SetRegisterMotor1>:
{
 800382c:	b530      	push	{r4, r5, lr}
 800382e:	b083      	sub	sp, #12
  switch(typeID)
 8003830:	3908      	subs	r1, #8
{
 8003832:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8003836:	4694      	mov	ip, r2
 8003838:	461c      	mov	r4, r3
  switch(typeID)
 800383a:	2920      	cmp	r1, #32
 800383c:	d812      	bhi.n	8003864 <RI_SetRegisterMotor1+0x38>
 800383e:	e8df f001 	tbb	[pc, r1]
 8003842:	1116      	.short	0x1116
 8003844:	11111111 	.word	0x11111111
 8003848:	11231111 	.word	0x11231111
 800384c:	11111111 	.word	0x11111111
 8003850:	115a1111 	.word	0x115a1111
 8003854:	11111111 	.word	0x11111111
 8003858:	11481111 	.word	0x11481111
 800385c:	11111111 	.word	0x11111111
 8003860:	1111      	.short	0x1111
 8003862:	67          	.byte	0x67
 8003863:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003864:	2300      	movs	r3, #0
 8003866:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003868:	2007      	movs	r0, #7
}
 800386a:	b003      	add	sp, #12
 800386c:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 800386e:	2888      	cmp	r0, #136	@ 0x88
 8003870:	f000 8096 	beq.w	80039a0 <RI_SetRegisterMotor1+0x174>
 8003874:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8003878:	2848      	cmp	r0, #72	@ 0x48
 800387a:	bf0c      	ite	eq
 800387c:	2004      	moveq	r0, #4
 800387e:	2005      	movne	r0, #5
      *size = 1;
 8003880:	2301      	movs	r3, #1
 8003882:	8023      	strh	r3, [r4, #0]
}
 8003884:	b003      	add	sp, #12
 8003886:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8003888:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800388c:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 800388e:	f000 825a 	beq.w	8003d46 <RI_SetRegisterMotor1+0x51a>
 8003892:	d860      	bhi.n	8003956 <RI_SetRegisterMotor1+0x12a>
 8003894:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8003898:	f000 8250 	beq.w	8003d3c <RI_SetRegisterMotor1+0x510>
 800389c:	f200 80a6 	bhi.w	80039ec <RI_SetRegisterMotor1+0x1c0>
 80038a0:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 80038a4:	f000 8219 	beq.w	8003cda <RI_SetRegisterMotor1+0x4ae>
 80038a8:	f200 8107 	bhi.w	8003aba <RI_SetRegisterMotor1+0x28e>
 80038ac:	28d0      	cmp	r0, #208	@ 0xd0
 80038ae:	f000 821e 	beq.w	8003cee <RI_SetRegisterMotor1+0x4c2>
 80038b2:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80038b6:	f000 8215 	beq.w	8003ce4 <RI_SetRegisterMotor1+0x4b8>
 80038ba:	2890      	cmp	r0, #144	@ 0x90
 80038bc:	f040 8254 	bne.w	8003d68 <RI_SetRegisterMotor1+0x53c>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80038c0:	48b5      	ldr	r0, [pc, #724]	@ (8003b98 <RI_SetRegisterMotor1+0x36c>)
 80038c2:	b229      	sxth	r1, r5
 80038c4:	f006 f9a4 	bl	8009c10 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 80038c8:	2000      	movs	r0, #0
      *size = 2;
 80038ca:	2302      	movs	r3, #2
 80038cc:	8023      	strh	r3, [r4, #0]
}
 80038ce:	b003      	add	sp, #12
 80038d0:	bd30      	pop	{r4, r5, pc}
  *size= 1U ; /* /0 is the min String size */
 80038d2:	2201      	movs	r2, #1
 80038d4:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038d6:	f99c 3000 	ldrsb.w	r3, [ip]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d036      	beq.n	800394c <RI_SetRegisterMotor1+0x120>
 80038de:	fa1f f38e 	uxth.w	r3, lr
 80038e2:	e003      	b.n	80038ec <RI_SetRegisterMotor1+0xc0>
    *size = *size + 1U;
 80038e4:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038e6:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 80038ea:	b379      	cbz	r1, 800394c <RI_SetRegisterMotor1+0x120>
    *size = *size + 1U;
 80038ec:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038ee:	4293      	cmp	r3, r2
    *size = *size + 1U;
 80038f0:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038f2:	d8f7      	bhi.n	80038e4 <RI_SetRegisterMotor1+0xb8>
 80038f4:	e02d      	b.n	8003952 <RI_SetRegisterMotor1+0x126>
      switch (regID)
 80038f6:	2898      	cmp	r0, #152	@ 0x98
 80038f8:	d06a      	beq.n	80039d0 <RI_SetRegisterMotor1+0x1a4>
 80038fa:	d861      	bhi.n	80039c0 <RI_SetRegisterMotor1+0x194>
 80038fc:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_RO_REG;
 8003900:	2818      	cmp	r0, #24
 8003902:	bf14      	ite	ne
 8003904:	2005      	movne	r0, #5
 8003906:	2004      	moveq	r0, #4
      *size = 4;
 8003908:	2304      	movs	r3, #4
 800390a:	8023      	strh	r3, [r4, #0]
}
 800390c:	b003      	add	sp, #12
 800390e:	bd30      	pop	{r4, r5, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003910:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 8003912:	1c8a      	adds	r2, r1, #2
 8003914:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003916:	fa1f f38e 	uxth.w	r3, lr
 800391a:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 800391c:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 800391e:	d83b      	bhi.n	8003998 <RI_SetRegisterMotor1+0x16c>
        switch (regID)
 8003920:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8003924:	f000 80e1 	beq.w	8003aea <RI_SetRegisterMotor1+0x2be>
 8003928:	f200 80ac 	bhi.w	8003a84 <RI_SetRegisterMotor1+0x258>
 800392c:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003930:	f000 808e 	beq.w	8003a50 <RI_SetRegisterMotor1+0x224>
 8003934:	f200 80b5 	bhi.w	8003aa2 <RI_SetRegisterMotor1+0x276>
 8003938:	28a8      	cmp	r0, #168	@ 0xa8
 800393a:	d00a      	beq.n	8003952 <RI_SetRegisterMotor1+0x126>
 800393c:	f200 819b 	bhi.w	8003c76 <RI_SetRegisterMotor1+0x44a>
 8003940:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003944:	2828      	cmp	r0, #40	@ 0x28
 8003946:	d004      	beq.n	8003952 <RI_SetRegisterMotor1+0x126>
 8003948:	2005      	movs	r0, #5
 800394a:	e78e      	b.n	800386a <RI_SetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 800394c:	2300      	movs	r3, #0
 800394e:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 8003952:	2004      	movs	r0, #4
 8003954:	e789      	b.n	800386a <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8003956:	f241 5390 	movw	r3, #5520	@ 0x1590
 800395a:	4298      	cmp	r0, r3
 800395c:	f000 81ff 	beq.w	8003d5e <RI_SetRegisterMotor1+0x532>
 8003960:	d85b      	bhi.n	8003a1a <RI_SetRegisterMotor1+0x1ee>
 8003962:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003966:	4298      	cmp	r0, r3
 8003968:	f000 8193 	beq.w	8003c92 <RI_SetRegisterMotor1+0x466>
 800396c:	f240 8122 	bls.w	8003bb4 <RI_SetRegisterMotor1+0x388>
 8003970:	f241 5310 	movw	r3, #5392	@ 0x1510
 8003974:	4298      	cmp	r0, r3
 8003976:	f000 81c4 	beq.w	8003d02 <RI_SetRegisterMotor1+0x4d6>
 800397a:	f241 5350 	movw	r3, #5456	@ 0x1550
 800397e:	4298      	cmp	r0, r3
 8003980:	f000 81ba 	beq.w	8003cf8 <RI_SetRegisterMotor1+0x4cc>
 8003984:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8003988:	4298      	cmp	r0, r3
 800398a:	f040 81ed 	bne.w	8003d68 <RI_SetRegisterMotor1+0x53c>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800398e:	4882      	ldr	r0, [pc, #520]	@ (8003b98 <RI_SetRegisterMotor1+0x36c>)
 8003990:	4629      	mov	r1, r5
 8003992:	f006 f977 	bl	8009c84 <PID_SetKDDivisorPOW2>
          break;
 8003996:	e797      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
        *size = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 800399c:	200a      	movs	r0, #10
 800399e:	e764      	b.n	800386a <RI_SetRegisterMotor1+0x3e>
          uint8_t regdata8 = *data;
 80039a0:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d065      	beq.n	8003a72 <RI_SetRegisterMotor1+0x246>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	f000 8148 	beq.w	8003c3c <RI_SetRegisterMotor1+0x410>
          if ((uint8_t)regdata8 == MCM_OPEN_LOOP_CURRENT_MODE)
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	f000 8141 	beq.w	8003c34 <RI_SetRegisterMotor1+0x408>
          if ((uint8_t)regdata8 == MCM_OPEN_LOOP_VOLTAGE_MODE)
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <RI_SetRegisterMotor1+0x190>
            MCI_SetOpenLoopVoltageMode(pMCIN);
 80039b6:	4879      	ldr	r0, [pc, #484]	@ (8003b9c <RI_SetRegisterMotor1+0x370>)
 80039b8:	f7fe fb8a 	bl	80020d0 <MCI_SetOpenLoopVoltageMode>
  uint8_t retVal = MCP_CMD_OK;
 80039bc:	2000      	movs	r0, #0
 80039be:	e75f      	b.n	8003880 <RI_SetRegisterMotor1+0x54>
      switch (regID)
 80039c0:	28d8      	cmp	r0, #216	@ 0xd8
 80039c2:	d054      	beq.n	8003a6e <RI_SetRegisterMotor1+0x242>
          retVal = MCP_ERROR_RO_REG;
 80039c4:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 80039c8:	bf14      	ite	ne
 80039ca:	2005      	movne	r0, #5
 80039cc:	2004      	moveq	r0, #4
 80039ce:	e79b      	b.n	8003908 <RI_SetRegisterMotor1+0xdc>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80039d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80039d4:	4972      	ldr	r1, [pc, #456]	@ (8003ba0 <RI_SetRegisterMotor1+0x374>)
 80039d6:	4871      	ldr	r0, [pc, #452]	@ (8003b9c <RI_SetRegisterMotor1+0x370>)
 80039d8:	fb81 2103 	smull	r2, r1, r1, r3
 80039dc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80039e0:	2200      	movs	r2, #0
 80039e2:	b209      	sxth	r1, r1
 80039e4:	f7fe fb46 	bl	8002074 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80039e8:	2000      	movs	r0, #0
          break;
 80039ea:	e78d      	b.n	8003908 <RI_SetRegisterMotor1+0xdc>
      switch (regID)
 80039ec:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80039f0:	f000 8154 	beq.w	8003c9c <RI_SetRegisterMotor1+0x470>
 80039f4:	f200 80ff 	bhi.w	8003bf6 <RI_SetRegisterMotor1+0x3ca>
 80039f8:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 80039fc:	f000 8160 	beq.w	8003cc0 <RI_SetRegisterMotor1+0x494>
 8003a00:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8003a04:	f000 814f 	beq.w	8003ca6 <RI_SetRegisterMotor1+0x47a>
 8003a08:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8003a0c:	f040 81ac 	bne.w	8003d68 <RI_SetRegisterMotor1+0x53c>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8003a10:	4864      	ldr	r0, [pc, #400]	@ (8003ba4 <RI_SetRegisterMotor1+0x378>)
 8003a12:	b229      	sxth	r1, r5
 8003a14:	f006 f92e 	bl	8009c74 <PID_SetKD>
          break;
 8003a18:	e756      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
      switch (regID)
 8003a1a:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8003a1e:	4298      	cmp	r0, r3
 8003a20:	f000 817e 	beq.w	8003d20 <RI_SetRegisterMotor1+0x4f4>
 8003a24:	f200 80f5 	bhi.w	8003c12 <RI_SetRegisterMotor1+0x3e6>
 8003a28:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003a2c:	4298      	cmp	r0, r3
 8003a2e:	f000 812b 	beq.w	8003c88 <RI_SetRegisterMotor1+0x45c>
 8003a32:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003a36:	4298      	cmp	r0, r3
 8003a38:	f000 8121 	beq.w	8003c7e <RI_SetRegisterMotor1+0x452>
 8003a3c:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003a40:	4298      	cmp	r0, r3
 8003a42:	f040 8191 	bne.w	8003d68 <RI_SetRegisterMotor1+0x53c>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003a46:	4858      	ldr	r0, [pc, #352]	@ (8003ba8 <RI_SetRegisterMotor1+0x37c>)
 8003a48:	4629      	mov	r1, r5
 8003a4a:	f006 f8f1 	bl	8009c30 <PID_SetKPDivisorPOW2>
          break;
 8003a4e:	e73b      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003a50:	f8dc 1002 	ldr.w	r1, [ip, #2]
 8003a54:	4b52      	ldr	r3, [pc, #328]	@ (8003ba0 <RI_SetRegisterMotor1+0x374>)
 8003a56:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003a5a:	fb83 0301 	smull	r0, r3, r3, r1
 8003a5e:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003a62:	484e      	ldr	r0, [pc, #312]	@ (8003b9c <RI_SetRegisterMotor1+0x370>)
 8003a64:	b209      	sxth	r1, r1
 8003a66:	f7fe fb05 	bl	8002074 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e6fd      	b.n	800386a <RI_SetRegisterMotor1+0x3e>
          retVal = MCP_ERROR_RO_REG;
 8003a6e:	2004      	movs	r0, #4
 8003a70:	e74a      	b.n	8003908 <RI_SetRegisterMotor1+0xdc>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8003a72:	484a      	ldr	r0, [pc, #296]	@ (8003b9c <RI_SetRegisterMotor1+0x370>)
 8003a74:	f7fe fc82 	bl	800237c <MCI_GetTeref>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4847      	ldr	r0, [pc, #284]	@ (8003b9c <RI_SetRegisterMotor1+0x370>)
 8003a7e:	f7fe fb01 	bl	8002084 <MCI_ExecTorqueRamp>
          if ((uint8_t)regdata8 == MCM_OPEN_LOOP_VOLTAGE_MODE)
 8003a82:	e79b      	b.n	80039bc <RI_SetRegisterMotor1+0x190>
        switch (regID)
 8003a84:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8003a88:	d028      	beq.n	8003adc <RI_SetRegisterMotor1+0x2b0>
 8003a8a:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8003a8e:	f47f af5b 	bne.w	8003948 <RI_SetRegisterMotor1+0x11c>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003a92:	4846      	ldr	r0, [pc, #280]	@ (8003bac <RI_SetRegisterMotor1+0x380>)
 8003a94:	f10c 0102 	add.w	r1, ip, #2
}
 8003a98:	b003      	add	sp, #12
 8003a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003a9e:	f005 bfc9 	b.w	8009a34 <MCPA_cfgLog>
        switch (regID)
 8003aa2:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003aa6:	f47f af4f 	bne.w	8003948 <RI_SetRegisterMotor1+0x11c>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8003aaa:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003aae:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 8003ab2:	483a      	ldr	r0, [pc, #232]	@ (8003b9c <RI_SetRegisterMotor1+0x370>)
 8003ab4:	f7fe fae6 	bl	8002084 <MCI_ExecTorqueRamp>
            break;
 8003ab8:	e7d7      	b.n	8003a6a <RI_SetRegisterMotor1+0x23e>
      switch (regID)
 8003aba:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8003abe:	f000 812a 	beq.w	8003d16 <RI_SetRegisterMotor1+0x4ea>
 8003ac2:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8003ac6:	f000 8121 	beq.w	8003d0c <RI_SetRegisterMotor1+0x4e0>
 8003aca:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8003ace:	f040 814b 	bne.w	8003d68 <RI_SetRegisterMotor1+0x53c>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8003ad2:	4835      	ldr	r0, [pc, #212]	@ (8003ba8 <RI_SetRegisterMotor1+0x37c>)
 8003ad4:	b229      	sxth	r1, r5
 8003ad6:	f006 f89d 	bl	8009c14 <PID_SetKI>
          break;
 8003ada:	e6f5      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003adc:	f8dc 1002 	ldr.w	r1, [ip, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8003ae0:	482e      	ldr	r0, [pc, #184]	@ (8003b9c <RI_SetRegisterMotor1+0x370>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003ae2:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8003ae4:	f7fe fbb8 	bl	8002258 <MCI_SetCurrentReferences>
            break;
 8003ae8:	e7bf      	b.n	8003a6a <RI_SetRegisterMotor1+0x23e>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8003aea:	074b      	lsls	r3, r1, #29
 8003aec:	f47f af56 	bne.w	800399c <RI_SetRegisterMotor1+0x170>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8003af0:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8003af2:	292f      	cmp	r1, #47	@ 0x2f
 8003af4:	f63f af52 	bhi.w	800399c <RI_SetRegisterMotor1+0x170>
              for (i = 0; i <nbrOfPhase; i++)
 8003af8:	08c9      	lsrs	r1, r1, #3
 8003afa:	d0b6      	beq.n	8003a6a <RI_SetRegisterMotor1+0x23e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003afc:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 8003b00:	4a27      	ldr	r2, [pc, #156]	@ (8003ba0 <RI_SetRegisterMotor1+0x374>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b02:	f8bc 5008 	ldrh.w	r5, [ip, #8]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b06:	fb82 4003 	smull	r4, r0, r2, r3
 8003b0a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003b0e:	4b28      	ldr	r3, [pc, #160]	@ (8003bb0 <RI_SetRegisterMotor1+0x384>)
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b10:	f9bc 4006 	ldrsh.w	r4, [ip, #6]
 8003b14:	821c      	strh	r4, [r3, #16]
              for (i = 0; i <nbrOfPhase; i++)
 8003b16:	2901      	cmp	r1, #1
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003b18:	819d      	strh	r5, [r3, #12]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003b1a:	81d8      	strh	r0, [r3, #14]
 8003b1c:	d0a5      	beq.n	8003a6a <RI_SetRegisterMotor1+0x23e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b1e:	f9bc 400a 	ldrsh.w	r4, [ip, #10]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b22:	f9bc 500e 	ldrsh.w	r5, [ip, #14]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b26:	fb82 e004 	smull	lr, r0, r2, r4
 8003b2a:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8003b2e:	2902      	cmp	r1, #2
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b30:	f8bc 4010 	ldrh.w	r4, [ip, #16]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003b34:	831c      	strh	r4, [r3, #24]
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003b36:	839d      	strh	r5, [r3, #28]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003b38:	8358      	strh	r0, [r3, #26]
              for (i = 0; i <nbrOfPhase; i++)
 8003b3a:	d096      	beq.n	8003a6a <RI_SetRegisterMotor1+0x23e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b3c:	f9bc 4012 	ldrsh.w	r4, [ip, #18]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b40:	f9bc 5016 	ldrsh.w	r5, [ip, #22]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b44:	fb82 e004 	smull	lr, r0, r2, r4
 8003b48:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8003b4c:	2903      	cmp	r1, #3
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b4e:	f8bc 4018 	ldrh.w	r4, [ip, #24]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003b52:	849c      	strh	r4, [r3, #36]	@ 0x24
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003b54:	851d      	strh	r5, [r3, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003b56:	84d8      	strh	r0, [r3, #38]	@ 0x26
              for (i = 0; i <nbrOfPhase; i++)
 8003b58:	d087      	beq.n	8003a6a <RI_SetRegisterMotor1+0x23e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b5a:	f9bc 401a 	ldrsh.w	r4, [ip, #26]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b5e:	f9bc 501e 	ldrsh.w	r5, [ip, #30]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b62:	fb82 e004 	smull	lr, r0, r2, r4
 8003b66:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8003b6a:	2905      	cmp	r1, #5
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b6c:	f8bc 4020 	ldrh.w	r4, [ip, #32]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003b70:	861c      	strh	r4, [r3, #48]	@ 0x30
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003b72:	869d      	strh	r5, [r3, #52]	@ 0x34
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003b74:	8658      	strh	r0, [r3, #50]	@ 0x32
              for (i = 0; i <nbrOfPhase; i++)
 8003b76:	f47f af78 	bne.w	8003a6a <RI_SetRegisterMotor1+0x23e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b7a:	f9bc 1022 	ldrsh.w	r1, [ip, #34]	@ 0x22
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b7e:	f9bc 0026 	ldrsh.w	r0, [ip, #38]	@ 0x26
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003b82:	fb82 4201 	smull	r4, r2, r2, r1
 8003b86:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003b8a:	f8bc 4028 	ldrh.w	r4, [ip, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003b8e:	879c      	strh	r4, [r3, #60]	@ 0x3c
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003b90:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003b94:	87da      	strh	r2, [r3, #62]	@ 0x3e
              for (i = 0; i <nbrOfPhase; i++)
 8003b96:	e768      	b.n	8003a6a <RI_SetRegisterMotor1+0x23e>
 8003b98:	2000034c 	.word	0x2000034c
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	2aaaaaab 	.word	0x2aaaaaab
 8003ba4:	200002f4 	.word	0x200002f4
 8003ba8:	20000320 	.word	0x20000320
 8003bac:	20000438 	.word	0x20000438
 8003bb0:	20000248 	.word	0x20000248
      switch (regID)
 8003bb4:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003bb8:	f43f ae86 	beq.w	80038c8 <RI_SetRegisterMotor1+0x9c>
 8003bbc:	d852      	bhi.n	8003c64 <RI_SetRegisterMotor1+0x438>
 8003bbe:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003bc2:	f43f ae81 	beq.w	80038c8 <RI_SetRegisterMotor1+0x9c>
 8003bc6:	f200 80cf 	bhi.w	8003d68 <RI_SetRegisterMotor1+0x53c>
 8003bca:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8003bce:	f000 80cd 	beq.w	8003d6c <RI_SetRegisterMotor1+0x540>
 8003bd2:	f200 80e8 	bhi.w	8003da6 <RI_SetRegisterMotor1+0x57a>
 8003bd6:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8003bda:	f000 80c7 	beq.w	8003d6c <RI_SetRegisterMotor1+0x540>
 8003bde:	f200 80fd 	bhi.w	8003ddc <RI_SetRegisterMotor1+0x5b0>
 8003be2:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8003be6:	f000 80c1 	beq.w	8003d6c <RI_SetRegisterMotor1+0x540>
 8003bea:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8003bee:	bf14      	ite	ne
 8003bf0:	2005      	movne	r0, #5
 8003bf2:	2004      	moveq	r0, #4
 8003bf4:	e669      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003bf6:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8003bfa:	f000 80b7 	beq.w	8003d6c <RI_SetRegisterMotor1+0x540>
 8003bfe:	d821      	bhi.n	8003c44 <RI_SetRegisterMotor1+0x418>
 8003c00:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8003c04:	f040 80b4 	bne.w	8003d70 <RI_SetRegisterMotor1+0x544>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8003c08:	4882      	ldr	r0, [pc, #520]	@ (8003e14 <RI_SetRegisterMotor1+0x5e8>)
 8003c0a:	b229      	sxth	r1, r5
 8003c0c:	f006 f800 	bl	8009c10 <PID_SetKP>
          break;
 8003c10:	e65a      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
      switch (regID)
 8003c12:	f641 23d0 	movw	r3, #6864	@ 0x1ad0
 8003c16:	4298      	cmp	r0, r3
 8003c18:	f000 8087 	beq.w	8003d2a <RI_SetRegisterMotor1+0x4fe>
 8003c1c:	f200 80d7 	bhi.w	8003dce <RI_SetRegisterMotor1+0x5a2>
 8003c20:	f641 1310 	movw	r3, #6416	@ 0x1910
 8003c24:	4298      	cmp	r0, r3
 8003c26:	f040 80cb 	bne.w	8003dc0 <RI_SetRegisterMotor1+0x594>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8003c2a:	487a      	ldr	r0, [pc, #488]	@ (8003e14 <RI_SetRegisterMotor1+0x5e8>)
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	f005 ffff 	bl	8009c30 <PID_SetKPDivisorPOW2>
          break;
 8003c32:	e649      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
            MCI_SetOpenLoopCurrentMode(pMCIN);
 8003c34:	4878      	ldr	r0, [pc, #480]	@ (8003e18 <RI_SetRegisterMotor1+0x5ec>)
 8003c36:	f7fe fa3d 	bl	80020b4 <MCI_SetOpenLoopCurrentMode>
          if ((uint8_t)regdata8 == MCM_OPEN_LOOP_VOLTAGE_MODE)
 8003c3a:	e6bf      	b.n	80039bc <RI_SetRegisterMotor1+0x190>
            MCI_SetSpeedMode(pMCIN);
 8003c3c:	4876      	ldr	r0, [pc, #472]	@ (8003e18 <RI_SetRegisterMotor1+0x5ec>)
 8003c3e:	f7fe fa2b 	bl	8002098 <MCI_SetSpeedMode>
          if ((uint8_t)regdata8 == MCM_OPEN_LOOP_VOLTAGE_MODE)
 8003c42:	e6bb      	b.n	80039bc <RI_SetRegisterMotor1+0x190>
      switch (regID)
 8003c44:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8003c48:	f040 809f 	bne.w	8003d8a <RI_SetRegisterMotor1+0x55e>
          currComp = MCI_GetIqdref(pMCIN);
 8003c4c:	4872      	ldr	r0, [pc, #456]	@ (8003e18 <RI_SetRegisterMotor1+0x5ec>)
 8003c4e:	f7fe fb77 	bl	8002340 <MCI_GetIqdref>
 8003c52:	4603      	mov	r3, r0
 8003c54:	9301      	str	r3, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8003c56:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8003c5a:	486f      	ldr	r0, [pc, #444]	@ (8003e18 <RI_SetRegisterMotor1+0x5ec>)
 8003c5c:	9901      	ldr	r1, [sp, #4]
 8003c5e:	f7fe fafb 	bl	8002258 <MCI_SetCurrentReferences>
          break;
 8003c62:	e631      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
      switch (regID)
 8003c64:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003c68:	4298      	cmp	r0, r3
 8003c6a:	d17d      	bne.n	8003d68 <RI_SetRegisterMotor1+0x53c>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003c6c:	486b      	ldr	r0, [pc, #428]	@ (8003e1c <RI_SetRegisterMotor1+0x5f0>)
 8003c6e:	4629      	mov	r1, r5
 8003c70:	f005 ffde 	bl	8009c30 <PID_SetKPDivisorPOW2>
          break;
 8003c74:	e628      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
        switch (regID)
 8003c76:	28e8      	cmp	r0, #232	@ 0xe8
 8003c78:	f43f ae6b 	beq.w	8003952 <RI_SetRegisterMotor1+0x126>
 8003c7c:	e664      	b.n	8003948 <RI_SetRegisterMotor1+0x11c>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003c7e:	4868      	ldr	r0, [pc, #416]	@ (8003e20 <RI_SetRegisterMotor1+0x5f4>)
 8003c80:	4629      	mov	r1, r5
 8003c82:	f005 ffff 	bl	8009c84 <PID_SetKDDivisorPOW2>
          break;
 8003c86:	e61f      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003c88:	4865      	ldr	r0, [pc, #404]	@ (8003e20 <RI_SetRegisterMotor1+0x5f4>)
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	f005 ffde 	bl	8009c4c <PID_SetKIDivisorPOW2>
          break;
 8003c90:	e61a      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003c92:	4862      	ldr	r0, [pc, #392]	@ (8003e1c <RI_SetRegisterMotor1+0x5f0>)
 8003c94:	4629      	mov	r1, r5
 8003c96:	f005 ffd9 	bl	8009c4c <PID_SetKIDivisorPOW2>
          break;
 8003c9a:	e615      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8003c9c:	485d      	ldr	r0, [pc, #372]	@ (8003e14 <RI_SetRegisterMotor1+0x5e8>)
 8003c9e:	b229      	sxth	r1, r5
 8003ca0:	f005 ffb8 	bl	8009c14 <PID_SetKI>
          break;
 8003ca4:	e610      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003ca6:	aa01      	add	r2, sp, #4
 8003ca8:	f10d 0102 	add.w	r1, sp, #2
 8003cac:	485d      	ldr	r0, [pc, #372]	@ (8003e24 <RI_SetRegisterMotor1+0x5f8>)
 8003cae:	f007 fd09 	bl	800b6c4 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8003cb2:	485c      	ldr	r0, [pc, #368]	@ (8003e24 <RI_SetRegisterMotor1+0x5f8>)
 8003cb4:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8003cb8:	b22a      	sxth	r2, r5
 8003cba:	f007 fd0b 	bl	800b6d4 <STO_PLL_SetObserverGains>
          break;
 8003cbe:	e603      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003cc0:	aa01      	add	r2, sp, #4
 8003cc2:	f10d 0102 	add.w	r1, sp, #2
 8003cc6:	4857      	ldr	r0, [pc, #348]	@ (8003e24 <RI_SetRegisterMotor1+0x5f8>)
 8003cc8:	f007 fcfc 	bl	800b6c4 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 8003ccc:	4855      	ldr	r0, [pc, #340]	@ (8003e24 <RI_SetRegisterMotor1+0x5f8>)
 8003cce:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003cd2:	b229      	sxth	r1, r5
 8003cd4:	f007 fcfe 	bl	800b6d4 <STO_PLL_SetObserverGains>
          break;
 8003cd8:	e5f6      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8003cda:	4851      	ldr	r0, [pc, #324]	@ (8003e20 <RI_SetRegisterMotor1+0x5f4>)
 8003cdc:	b229      	sxth	r1, r5
 8003cde:	f005 ff97 	bl	8009c10 <PID_SetKP>
          break;
 8003ce2:	e5f1      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003ce4:	484d      	ldr	r0, [pc, #308]	@ (8003e1c <RI_SetRegisterMotor1+0x5f0>)
 8003ce6:	b229      	sxth	r1, r5
 8003ce8:	f005 ffc4 	bl	8009c74 <PID_SetKD>
          break;
 8003cec:	e5ec      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003cee:	484b      	ldr	r0, [pc, #300]	@ (8003e1c <RI_SetRegisterMotor1+0x5f0>)
 8003cf0:	b229      	sxth	r1, r5
 8003cf2:	f005 ff8f 	bl	8009c14 <PID_SetKI>
          break;
 8003cf6:	e5e7      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003cf8:	484b      	ldr	r0, [pc, #300]	@ (8003e28 <RI_SetRegisterMotor1+0x5fc>)
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f005 ffa6 	bl	8009c4c <PID_SetKIDivisorPOW2>
          break;
 8003d00:	e5e2      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003d02:	4849      	ldr	r0, [pc, #292]	@ (8003e28 <RI_SetRegisterMotor1+0x5fc>)
 8003d04:	4629      	mov	r1, r5
 8003d06:	f005 ff93 	bl	8009c30 <PID_SetKPDivisorPOW2>
          break;
 8003d0a:	e5dd      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8003d0c:	4846      	ldr	r0, [pc, #280]	@ (8003e28 <RI_SetRegisterMotor1+0x5fc>)
 8003d0e:	b229      	sxth	r1, r5
 8003d10:	f005 ff7e 	bl	8009c10 <PID_SetKP>
          break;
 8003d14:	e5d8      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8003d16:	4842      	ldr	r0, [pc, #264]	@ (8003e20 <RI_SetRegisterMotor1+0x5f4>)
 8003d18:	b229      	sxth	r1, r5
 8003d1a:	f005 ffab 	bl	8009c74 <PID_SetKD>
          break;
 8003d1e:	e5d3      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8003d20:	483c      	ldr	r0, [pc, #240]	@ (8003e14 <RI_SetRegisterMotor1+0x5e8>)
 8003d22:	4629      	mov	r1, r5
 8003d24:	f005 ff92 	bl	8009c4c <PID_SetKIDivisorPOW2>
          break;
 8003d28:	e5ce      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          OL_UpdateVoltage(&OpenLoop_ParamsM1, ((regdata16 * 32767) / 100));
 8003d2a:	4a40      	ldr	r2, [pc, #256]	@ (8003e2c <RI_SetRegisterMotor1+0x600>)
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hVoltage = hNewVoltage;
 8003d2c:	4940      	ldr	r1, [pc, #256]	@ (8003e30 <RI_SetRegisterMotor1+0x604>)
 8003d2e:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	810b      	strh	r3, [r1, #8]
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 8003d3a:	e5c5      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8003d3c:	483a      	ldr	r0, [pc, #232]	@ (8003e28 <RI_SetRegisterMotor1+0x5fc>)
 8003d3e:	b229      	sxth	r1, r5
 8003d40:	f005 ff68 	bl	8009c14 <PID_SetKI>
          break;
 8003d44:	e5c0      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          currComp = MCI_GetIqdref(pMCIN);
 8003d46:	4834      	ldr	r0, [pc, #208]	@ (8003e18 <RI_SetRegisterMotor1+0x5ec>)
 8003d48:	f7fe fafa 	bl	8002340 <MCI_GetIqdref>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	9301      	str	r3, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8003d50:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8003d54:	4830      	ldr	r0, [pc, #192]	@ (8003e18 <RI_SetRegisterMotor1+0x5ec>)
 8003d56:	9901      	ldr	r1, [sp, #4]
 8003d58:	f7fe fa7e 	bl	8002258 <MCI_SetCurrentReferences>
          break;
 8003d5c:	e5b4      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003d5e:	4832      	ldr	r0, [pc, #200]	@ (8003e28 <RI_SetRegisterMotor1+0x5fc>)
 8003d60:	4629      	mov	r1, r5
 8003d62:	f005 ff8f 	bl	8009c84 <PID_SetKDDivisorPOW2>
          break;
 8003d66:	e5af      	b.n	80038c8 <RI_SetRegisterMotor1+0x9c>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8003d68:	2005      	movs	r0, #5
 8003d6a:	e5ae      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
      switch (regID)
 8003d6c:	2004      	movs	r0, #4
 8003d6e:	e5ac      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003d70:	d3fa      	bcc.n	8003d68 <RI_SetRegisterMotor1+0x53c>
 8003d72:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 8003d76:	d0f9      	beq.n	8003d6c <RI_SetRegisterMotor1+0x540>
 8003d78:	d845      	bhi.n	8003e06 <RI_SetRegisterMotor1+0x5da>
 8003d7a:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003d7e:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003d82:	bf14      	ite	ne
 8003d84:	2005      	movne	r0, #5
 8003d86:	2004      	moveq	r0, #4
 8003d88:	e59f      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003d8a:	d8ed      	bhi.n	8003d68 <RI_SetRegisterMotor1+0x53c>
 8003d8c:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8003d90:	d0ec      	beq.n	8003d6c <RI_SetRegisterMotor1+0x540>
 8003d92:	d82c      	bhi.n	8003dee <RI_SetRegisterMotor1+0x5c2>
 8003d94:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8003d98:	d0e8      	beq.n	8003d6c <RI_SetRegisterMotor1+0x540>
 8003d9a:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8003d9e:	bf14      	ite	ne
 8003da0:	2005      	movne	r0, #5
 8003da2:	2004      	moveq	r0, #4
 8003da4:	e591      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003da6:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8003daa:	d0df      	beq.n	8003d6c <RI_SetRegisterMotor1+0x540>
 8003dac:	d825      	bhi.n	8003dfa <RI_SetRegisterMotor1+0x5ce>
 8003dae:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8003db2:	d0db      	beq.n	8003d6c <RI_SetRegisterMotor1+0x540>
 8003db4:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8003db8:	bf14      	ite	ne
 8003dba:	2005      	movne	r0, #5
 8003dbc:	2004      	moveq	r0, #4
 8003dbe:	e584      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003dc0:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8003dc4:	4298      	cmp	r0, r3
 8003dc6:	bf14      	ite	ne
 8003dc8:	2005      	movne	r0, #5
 8003dca:	2004      	moveq	r0, #4
 8003dcc:	e57d      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003dce:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003dd2:	4298      	cmp	r0, r3
 8003dd4:	bf14      	ite	ne
 8003dd6:	2005      	movne	r0, #5
 8003dd8:	2004      	moveq	r0, #4
 8003dda:	e576      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003ddc:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8003de0:	d0c4      	beq.n	8003d6c <RI_SetRegisterMotor1+0x540>
 8003de2:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8003de6:	bf14      	ite	ne
 8003de8:	2005      	movne	r0, #5
 8003dea:	2004      	moveq	r0, #4
 8003dec:	e56d      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003dee:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8003df2:	bf14      	ite	ne
 8003df4:	2005      	movne	r0, #5
 8003df6:	2004      	moveq	r0, #4
 8003df8:	e567      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003dfa:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8003dfe:	bf14      	ite	ne
 8003e00:	2005      	movne	r0, #5
 8003e02:	2004      	moveq	r0, #4
 8003e04:	e561      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003e06:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8003e0a:	bf14      	ite	ne
 8003e0c:	2005      	movne	r0, #5
 8003e0e:	2004      	moveq	r0, #4
 8003e10:	e55b      	b.n	80038ca <RI_SetRegisterMotor1+0x9e>
 8003e12:	bf00      	nop
 8003e14:	200000b0 	.word	0x200000b0
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	2000034c 	.word	0x2000034c
 8003e20:	20000320 	.word	0x20000320
 8003e24:	2000007c 	.word	0x2000007c
 8003e28:	200002f4 	.word	0x200002f4
 8003e2c:	51eb851f 	.word	0x51eb851f
 8003e30:	20000058 	.word	0x20000058

08003e34 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8003e34:	b510      	push	{r4, lr}
    switch (typeID)
 8003e36:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8003e3a:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8003e3e:	f1bc 0f20 	cmp.w	ip, #32
 8003e42:	d812      	bhi.n	8003e6a <RI_GetRegisterGlobal+0x36>
 8003e44:	e8df f00c 	tbb	[pc, ip]
 8003e48:	1111111b 	.word	0x1111111b
 8003e4c:	11111111 	.word	0x11111111
 8003e50:	11111127 	.word	0x11111127
 8003e54:	11111111 	.word	0x11111111
 8003e58:	11111122 	.word	0x11111122
 8003e5c:	11111111 	.word	0x11111111
 8003e60:	11111135 	.word	0x11111135
 8003e64:	11111111 	.word	0x11111111
 8003e68:	13          	.byte	0x13
 8003e69:	00          	.byte	0x00
 8003e6a:	2007      	movs	r0, #7
}
 8003e6c:	bd10      	pop	{r4, pc}
        switch (regID)
 8003e6e:	2828      	cmp	r0, #40	@ 0x28
 8003e70:	d029      	beq.n	8003ec6 <RI_GetRegisterGlobal+0x92>
        *size = (*rawSize) + 2U;
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003e76:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	801a      	strh	r2, [r3, #0]
}
 8003e7c:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8003e7e:	f1be 0f00 	cmp.w	lr, #0
 8003e82:	dd1e      	ble.n	8003ec2 <RI_GetRegisterGlobal+0x8e>
 8003e84:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8003e86:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8003e88:	2005      	movs	r0, #5
}
 8003e8a:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8003e8c:	f1be 0f03 	cmp.w	lr, #3
 8003e90:	dd15      	ble.n	8003ebe <RI_GetRegisterGlobal+0x8a>
 8003e92:	2204      	movs	r2, #4
 8003e94:	e7f7      	b.n	8003e86 <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8003e96:	f1be 0f01 	cmp.w	lr, #1
 8003e9a:	dd10      	ble.n	8003ebe <RI_GetRegisterGlobal+0x8a>
          switch (regID)
 8003e9c:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003ea0:	d05a      	beq.n	8003f58 <RI_GetRegisterGlobal+0x124>
    uint8_t retVal = MCP_CMD_OK;
 8003ea2:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003ea6:	bf14      	ite	ne
 8003ea8:	2005      	movne	r0, #5
 8003eaa:	2000      	moveq	r0, #0
          *size = 2;
 8003eac:	2202      	movs	r2, #2
 8003eae:	801a      	strh	r2, [r3, #0]
}
 8003eb0:	bd10      	pop	{r4, pc}
        switch (regID)
 8003eb2:	2820      	cmp	r0, #32
 8003eb4:	d02c      	beq.n	8003f10 <RI_GetRegisterGlobal+0xdc>
 8003eb6:	2860      	cmp	r0, #96	@ 0x60
 8003eb8:	d00f      	beq.n	8003eda <RI_GetRegisterGlobal+0xa6>
 8003eba:	2200      	movs	r2, #0
 8003ebc:	e7e3      	b.n	8003e86 <RI_GetRegisterGlobal+0x52>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003ebe:	2008      	movs	r0, #8
}
 8003ec0:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003ec2:	4608      	mov	r0, r1
}
 8003ec4:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003ec6:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003eca:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003ecc:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003ed0:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003ed2:	d835      	bhi.n	8003f40 <RI_GetRegisterGlobal+0x10c>
 8003ed4:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003ed6:	2008      	movs	r0, #8
 8003ed8:	e7cf      	b.n	8003e7a <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003eda:	4c20      	ldr	r4, [pc, #128]	@ (8003f5c <RI_GetRegisterGlobal+0x128>)
 8003edc:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003ee4:	b180      	cbz	r0, 8003f08 <RI_GetRegisterGlobal+0xd4>
 8003ee6:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8003eea:	46a4      	mov	ip, r4
 8003eec:	e008      	b.n	8003f00 <RI_GetRegisterGlobal+0xcc>
    *tempdestString = *tempsrcString;
 8003eee:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8003ef2:	8819      	ldrh	r1, [r3, #0]
 8003ef4:	3101      	adds	r1, #1
 8003ef6:	b289      	uxth	r1, r1
 8003ef8:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003efa:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8003efe:	b118      	cbz	r0, 8003f08 <RI_GetRegisterGlobal+0xd4>
 8003f00:	4571      	cmp	r1, lr
 8003f02:	d3f4      	bcc.n	8003eee <RI_GetRegisterGlobal+0xba>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003f04:	2006      	movs	r0, #6
}
 8003f06:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003f0c:	2000      	movs	r0, #0
}
 8003f0e:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003f10:	4c13      	ldr	r4, [pc, #76]	@ (8003f60 <RI_GetRegisterGlobal+0x12c>)
 8003f12:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8003f16:	2101      	movs	r1, #1
 8003f18:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d0f4      	beq.n	8003f08 <RI_GetRegisterGlobal+0xd4>
 8003f1e:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8003f22:	46a4      	mov	ip, r4
 8003f24:	e009      	b.n	8003f3a <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8003f26:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8003f2a:	8819      	ldrh	r1, [r3, #0]
 8003f2c:	3101      	adds	r1, #1
 8003f2e:	b289      	uxth	r1, r1
 8003f30:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003f32:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d0e6      	beq.n	8003f08 <RI_GetRegisterGlobal+0xd4>
 8003f3a:	458e      	cmp	lr, r1
 8003f3c:	d8f3      	bhi.n	8003f26 <RI_GetRegisterGlobal+0xf2>
 8003f3e:	e7e1      	b.n	8003f04 <RI_GetRegisterGlobal+0xd0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003f40:	4908      	ldr	r1, [pc, #32]	@ (8003f64 <RI_GetRegisterGlobal+0x130>)
 8003f42:	6848      	ldr	r0, [r1, #4]
 8003f44:	680c      	ldr	r4, [r1, #0]
 8003f46:	8909      	ldrh	r1, [r1, #8]
 8003f48:	f8c2 0006 	str.w	r0, [r2, #6]
 8003f4c:	f8c2 4002 	str.w	r4, [r2, #2]
 8003f50:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8003f52:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003f54:	220c      	movs	r2, #12
 8003f56:	e790      	b.n	8003e7a <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e7a7      	b.n	8003eac <RI_GetRegisterGlobal+0x78>
 8003f5c:	080101bc 	.word	0x080101bc
 8003f60:	08010198 	.word	0x08010198
 8003f64:	0801018c 	.word	0x0801018c

08003f68 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003f68:	b530      	push	{r4, r5, lr}
 8003f6a:	b095      	sub	sp, #84	@ 0x54
 8003f6c:	461d      	mov	r5, r3
    switch (typeID)
 8003f6e:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003f72:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 8003f76:	4614      	mov	r4, r2
    switch (typeID)
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d812      	bhi.n	8003fa2 <RI_GetRegisterMotor1+0x3a>
 8003f7c:	e8df f003 	tbb	[pc, r3]
 8003f80:	11111131 	.word	0x11111131
 8003f84:	11111111 	.word	0x11111111
 8003f88:	1111116a 	.word	0x1111116a
 8003f8c:	11111111 	.word	0x11111111
 8003f90:	11111147 	.word	0x11111147
 8003f94:	11111111 	.word	0x11111111
 8003f98:	11111161 	.word	0x11111161
 8003f9c:	11111111 	.word	0x11111111
 8003fa0:	14          	.byte	0x14
 8003fa1:	00          	.byte	0x00
 8003fa2:	2007      	movs	r0, #7
  }
 8003fa4:	b015      	add	sp, #84	@ 0x54
 8003fa6:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003fa8:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003fac:	f000 81d4 	beq.w	8004358 <RI_GetRegisterMotor1+0x3f0>
 8003fb0:	d87e      	bhi.n	80040b0 <RI_GetRegisterMotor1+0x148>
 8003fb2:	28e8      	cmp	r0, #232	@ 0xe8
        rawData++;
 8003fb4:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8003fb8:	f000 81ea 	beq.w	8004390 <RI_GetRegisterMotor1+0x428>
 8003fbc:	f200 8121 	bhi.w	8004202 <RI_GetRegisterMotor1+0x29a>
 8003fc0:	2868      	cmp	r0, #104	@ 0x68
 8003fc2:	f000 81da 	beq.w	800437a <RI_GetRegisterMotor1+0x412>
 8003fc6:	28a8      	cmp	r0, #168	@ 0xa8
 8003fc8:	f040 81ae 	bne.w	8004328 <RI_GetRegisterMotor1+0x3c0>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003fcc:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003fd0:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003fd2:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003fd6:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003fd8:	f200 824b 	bhi.w	8004472 <RI_GetRegisterMotor1+0x50a>
 8003fdc:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003fde:	2008      	movs	r0, #8
 8003fe0:	e082      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
        if (freeSpace > 0)
 8003fe2:	f1bc 0f00 	cmp.w	ip, #0
 8003fe6:	f340 8174 	ble.w	80042d2 <RI_GetRegisterMotor1+0x36a>
          switch (regID)
 8003fea:	2888      	cmp	r0, #136	@ 0x88
 8003fec:	f000 8198 	beq.w	8004320 <RI_GetRegisterMotor1+0x3b8>
 8003ff0:	28c8      	cmp	r0, #200	@ 0xc8
 8003ff2:	f000 8191 	beq.w	8004318 <RI_GetRegisterMotor1+0x3b0>
 8003ff6:	2848      	cmp	r0, #72	@ 0x48
 8003ff8:	f040 80cd 	bne.w	8004196 <RI_GetRegisterMotor1+0x22e>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003ffc:	48b6      	ldr	r0, [pc, #728]	@ (80042d8 <RI_GetRegisterMotor1+0x370>)
 8003ffe:	f7fe f8d1 	bl	80021a4 <MCI_GetSTMState>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004002:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8004004:	2000      	movs	r0, #0
          *size = 1;
 8004006:	2301      	movs	r3, #1
 8004008:	802b      	strh	r3, [r5, #0]
  }
 800400a:	b015      	add	sp, #84	@ 0x54
 800400c:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 800400e:	f1bc 0f03 	cmp.w	ip, #3
 8004012:	dd4a      	ble.n	80040aa <RI_GetRegisterMotor1+0x142>
          switch (regID)
 8004014:	28d8      	cmp	r0, #216	@ 0xd8
 8004016:	f000 81c5 	beq.w	80043a4 <RI_GetRegisterMotor1+0x43c>
 800401a:	f200 816d 	bhi.w	80042f8 <RI_GetRegisterMotor1+0x390>
 800401e:	2858      	cmp	r0, #88	@ 0x58
 8004020:	f000 814f 	beq.w	80042c2 <RI_GetRegisterMotor1+0x35a>
 8004024:	2898      	cmp	r0, #152	@ 0x98
 8004026:	f000 81c4 	beq.w	80043b2 <RI_GetRegisterMotor1+0x44a>
 800402a:	2818      	cmp	r0, #24
 800402c:	f040 81bf 	bne.w	80043ae <RI_GetRegisterMotor1+0x446>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8004030:	48a9      	ldr	r0, [pc, #676]	@ (80042d8 <RI_GetRegisterMotor1+0x370>)
 8004032:	f7fe f907 	bl	8002244 <MCI_GetFaultState>
 8004036:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8004038:	2000      	movs	r0, #0
          *size = 4;
 800403a:	2304      	movs	r3, #4
 800403c:	802b      	strh	r3, [r5, #0]
  }
 800403e:	b015      	add	sp, #84	@ 0x54
 8004040:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8004042:	28a0      	cmp	r0, #160	@ 0xa0
 8004044:	f000 808f 	beq.w	8004166 <RI_GetRegisterMotor1+0x1fe>
 8004048:	28e0      	cmp	r0, #224	@ 0xe0
 800404a:	d06f      	beq.n	800412c <RI_GetRegisterMotor1+0x1c4>
            *size= 0 ; /* */
 800404c:	2300      	movs	r3, #0
 800404e:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004050:	2005      	movs	r0, #5
            break;
 8004052:	e7a7      	b.n	8003fa4 <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 8004054:	f1bc 0f01 	cmp.w	ip, #1
 8004058:	dd27      	ble.n	80040aa <RI_GetRegisterMotor1+0x142>
          switch (regID)
 800405a:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800405e:	f000 832e 	beq.w	80046be <RI_GetRegisterMotor1+0x756>
 8004062:	d844      	bhi.n	80040ee <RI_GetRegisterMotor1+0x186>
 8004064:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8004068:	f000 8324 	beq.w	80046b4 <RI_GetRegisterMotor1+0x74c>
 800406c:	f240 8095 	bls.w	800419a <RI_GetRegisterMotor1+0x232>
 8004070:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8004074:	f000 8328 	beq.w	80046c8 <RI_GetRegisterMotor1+0x760>
 8004078:	f200 81bb 	bhi.w	80043f2 <RI_GetRegisterMotor1+0x48a>
 800407c:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8004080:	f000 82a3 	beq.w	80045ca <RI_GetRegisterMotor1+0x662>
 8004084:	f200 8260 	bhi.w	8004548 <RI_GetRegisterMotor1+0x5e0>
 8004088:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 800408c:	f000 8345 	beq.w	800471a <RI_GetRegisterMotor1+0x7b2>
 8004090:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8004094:	f040 823d 	bne.w	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8004098:	4890      	ldr	r0, [pc, #576]	@ (80042dc <RI_GetRegisterMotor1+0x374>)
 800409a:	f005 fbab 	bl	80097f4 <VBS_GetAvBusVoltage_V>
 800409e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80040a0:	2000      	movs	r0, #0
          *size = 2;
 80040a2:	2302      	movs	r3, #2
 80040a4:	802b      	strh	r3, [r5, #0]
  }
 80040a6:	b015      	add	sp, #84	@ 0x54
 80040a8:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80040aa:	2008      	movs	r0, #8
  }
 80040ac:	b015      	add	sp, #84	@ 0x54
 80040ae:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 80040b0:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 80040b4:	f000 80bd 	beq.w	8004232 <RI_GetRegisterMotor1+0x2ca>
 80040b8:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 80040bc:	f000 8139 	beq.w	8004332 <RI_GetRegisterMotor1+0x3ca>
 80040c0:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 80040c4:	f040 8130 	bne.w	8004328 <RI_GetRegisterMotor1+0x3c0>
            *rawSize = 4;
 80040c8:	2304      	movs	r3, #4
 80040ca:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80040cc:	4882      	ldr	r0, [pc, #520]	@ (80042d8 <RI_GetRegisterMotor1+0x370>)
 80040ce:	f7fe f905 	bl	80022dc <MCI_GetLastRampFinalTorque>
 80040d2:	4603      	mov	r3, r0
 80040d4:	8063      	strh	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80040d6:	4880      	ldr	r0, [pc, #512]	@ (80042d8 <RI_GetRegisterMotor1+0x370>)
 80040d8:	f7fe f904 	bl	80022e4 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 80040dc:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80040de:	4602      	mov	r2, r0
        *size = (*rawSize) + 2U;
 80040e0:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 80040e2:	2000      	movs	r0, #0
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80040e4:	80a2      	strh	r2, [r4, #4]
        *size = (*rawSize) + 2U;
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	802b      	strh	r3, [r5, #0]
  }
 80040ea:	b015      	add	sp, #84	@ 0x54
 80040ec:	bd30      	pop	{r4, r5, pc}
          switch (regID)
 80040ee:	f241 4390 	movw	r3, #5264	@ 0x1490
 80040f2:	4298      	cmp	r0, r3
 80040f4:	f000 82d2 	beq.w	800469c <RI_GetRegisterMotor1+0x734>
 80040f8:	d866      	bhi.n	80041c8 <RI_GetRegisterMotor1+0x260>
 80040fa:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 80040fe:	f000 8311 	beq.w	8004724 <RI_GetRegisterMotor1+0x7bc>
 8004102:	f200 8163 	bhi.w	80043cc <RI_GetRegisterMotor1+0x464>
 8004106:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 800410a:	f000 82ff 	beq.w	800470c <RI_GetRegisterMotor1+0x7a4>
 800410e:	f200 81e6 	bhi.w	80044de <RI_GetRegisterMotor1+0x576>
 8004112:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8004116:	f000 82c6 	beq.w	80046a6 <RI_GetRegisterMotor1+0x73e>
 800411a:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 800411e:	f040 81f8 	bne.w	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8004122:	486d      	ldr	r0, [pc, #436]	@ (80042d8 <RI_GetRegisterMotor1+0x370>)
 8004124:	f7fe f920 	bl	8002368 <MCI_GetValphabeta>
 8004128:	8020      	strh	r0, [r4, #0]
              break;
 800412a:	e7b9      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 800412c:	4b6c      	ldr	r3, [pc, #432]	@ (80042e0 <RI_GetRegisterMotor1+0x378>)
 800412e:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8004130:	2301      	movs	r3, #1
 8004132:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8004134:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004138:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 800413c:	b17a      	cbz	r2, 800415e <RI_GetRegisterMotor1+0x1f6>
 800413e:	fa1f fc8c 	uxth.w	ip, ip
 8004142:	e008      	b.n	8004156 <RI_GetRegisterMotor1+0x1ee>
    *tempdestString = *tempsrcString;
 8004144:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8004148:	882b      	ldrh	r3, [r5, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	b29b      	uxth	r3, r3
 800414e:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004150:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8004154:	b11a      	cbz	r2, 800415e <RI_GetRegisterMotor1+0x1f6>
 8004156:	459c      	cmp	ip, r3
 8004158:	d8f4      	bhi.n	8004144 <RI_GetRegisterMotor1+0x1dc>
    retVal = MCP_ERROR_STRING_FORMAT;
 800415a:	2006      	movs	r0, #6
 800415c:	e722      	b.n	8003fa4 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 800415e:	2300      	movs	r3, #0
 8004160:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8004162:	2000      	movs	r0, #0
 8004164:	e71e      	b.n	8003fa4 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8004166:	4a5f      	ldr	r2, [pc, #380]	@ (80042e4 <RI_GetRegisterMotor1+0x37c>)
  *size= 1U ; /* /0 is the min String size */
 8004168:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 800416a:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 800416c:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800416e:	f991 2000 	ldrsb.w	r2, [r1]
 8004172:	2a00      	cmp	r2, #0
 8004174:	d0f3      	beq.n	800415e <RI_GetRegisterMotor1+0x1f6>
 8004176:	fa1f fc8c 	uxth.w	ip, ip
 800417a:	e009      	b.n	8004190 <RI_GetRegisterMotor1+0x228>
    *tempdestString = *tempsrcString;
 800417c:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8004180:	882b      	ldrh	r3, [r5, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	b29b      	uxth	r3, r3
 8004186:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004188:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 800418c:	2a00      	cmp	r2, #0
 800418e:	d0e6      	beq.n	800415e <RI_GetRegisterMotor1+0x1f6>
 8004190:	459c      	cmp	ip, r3
 8004192:	d8f3      	bhi.n	800417c <RI_GetRegisterMotor1+0x214>
 8004194:	e7e1      	b.n	800415a <RI_GetRegisterMotor1+0x1f2>
          switch (regID)
 8004196:	2005      	movs	r0, #5
 8004198:	e735      	b.n	8004006 <RI_GetRegisterMotor1+0x9e>
          switch (regID)
 800419a:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800419e:	f000 8261 	beq.w	8004664 <RI_GetRegisterMotor1+0x6fc>
 80041a2:	f200 8139 	bhi.w	8004418 <RI_GetRegisterMotor1+0x4b0>
 80041a6:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80041aa:	f000 823d 	beq.w	8004628 <RI_GetRegisterMotor1+0x6c0>
 80041ae:	f200 81c0 	bhi.w	8004532 <RI_GetRegisterMotor1+0x5ca>
 80041b2:	2890      	cmp	r0, #144	@ 0x90
 80041b4:	f000 82a0 	beq.w	80046f8 <RI_GetRegisterMotor1+0x790>
 80041b8:	28d0      	cmp	r0, #208	@ 0xd0
 80041ba:	f040 81aa 	bne.w	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 80041be:	484a      	ldr	r0, [pc, #296]	@ (80042e8 <RI_GetRegisterMotor1+0x380>)
 80041c0:	f005 fd2e 	bl	8009c20 <PID_GetKI>
 80041c4:	8020      	strh	r0, [r4, #0]
              break;
 80041c6:	e76b      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 80041c8:	f241 6310 	movw	r3, #5648	@ 0x1610
 80041cc:	4298      	cmp	r0, r3
 80041ce:	f000 8235 	beq.w	800463c <RI_GetRegisterMotor1+0x6d4>
 80041d2:	f200 8133 	bhi.w	800443c <RI_GetRegisterMotor1+0x4d4>
 80041d6:	f241 5350 	movw	r3, #5456	@ 0x1550
 80041da:	4298      	cmp	r0, r3
 80041dc:	f000 821f 	beq.w	800461e <RI_GetRegisterMotor1+0x6b6>
 80041e0:	f200 8199 	bhi.w	8004516 <RI_GetRegisterMotor1+0x5ae>
 80041e4:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 80041e8:	4298      	cmp	r0, r3
 80041ea:	f000 828a 	beq.w	8004702 <RI_GetRegisterMotor1+0x79a>
 80041ee:	f241 5310 	movw	r3, #5392	@ 0x1510
 80041f2:	4298      	cmp	r0, r3
 80041f4:	f040 818d 	bne.w	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 80041f8:	483c      	ldr	r0, [pc, #240]	@ (80042ec <RI_GetRegisterMotor1+0x384>)
 80041fa:	f005 fd17 	bl	8009c2c <PID_GetKPDivisorPOW2>
 80041fe:	8020      	strh	r0, [r4, #0]
              break;
 8004200:	e74e      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
        switch (regID)
 8004202:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8004206:	f040 808f 	bne.w	8004328 <RI_GetRegisterMotor1+0x3c0>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 800420a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 800420e:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8004210:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8004214:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8004216:	f240 8129 	bls.w	800446c <RI_GetRegisterMotor1+0x504>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800421a:	4a35      	ldr	r2, [pc, #212]	@ (80042f0 <RI_GetRegisterMotor1+0x388>)
 800421c:	6850      	ldr	r0, [r2, #4]
 800421e:	6814      	ldr	r4, [r2, #0]
 8004220:	6891      	ldr	r1, [r2, #8]
 8004222:	68d2      	ldr	r2, [r2, #12]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	6058      	str	r0, [r3, #4]
 8004228:	601c      	str	r4, [r3, #0]
 800422a:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 800422c:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800422e:	230e      	movs	r3, #14
 8004230:	e75a      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004232:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8004236:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004238:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 800423c:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800423e:	f240 8112 	bls.w	8004466 <RI_GetRegisterMotor1+0x4fe>
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8004242:	4b2c      	ldr	r3, [pc, #176]	@ (80042f4 <RI_GetRegisterMotor1+0x38c>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004244:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004248:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800424c:	8999      	ldrh	r1, [r3, #12]
                *durationms  = revUpPhase.hDurationms;
 800424e:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004250:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8004254:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004256:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8004258:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 800425c:	f8c4 2002 	str.w	r2, [r4, #2]
 8004260:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8004264:	8b19      	ldrh	r1, [r3, #24]
                *durationms  = revUpPhase.hDurationms;
 8004266:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004268:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800426c:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800426e:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8004270:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	@ 0x28
 8004274:	f8c4 200a 	str.w	r2, [r4, #10]
 8004278:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800427c:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                *durationms  = revUpPhase.hDurationms;
 800427e:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004280:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8004284:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004286:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8004288:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	@ 0x34
 800428c:	f8c4 2012 	str.w	r2, [r4, #18]
 8004290:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8004294:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
                *durationms  = revUpPhase.hDurationms;
 8004296:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004298:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800429c:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800429e:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80042a0:	f9b3 0040 	ldrsh.w	r0, [r3, #64]	@ 0x40
 80042a4:	f8c4 201a 	str.w	r2, [r4, #26]
 80042a8:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80042ac:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
                *durationms  = revUpPhase.hDurationms;
 80042ae:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80042b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042b4:	0052      	lsls	r2, r2, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80042b6:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80042b8:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 80042bc:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 80042be:	2000      	movs	r0, #0
 80042c0:	e712      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80042c2:	4805      	ldr	r0, [pc, #20]	@ (80042d8 <RI_GetRegisterMotor1+0x370>)
 80042c4:	f7fe f816 	bl	80022f4 <MCI_GetAvrgMecSpeedUnit>
 80042c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80042cc:	0040      	lsls	r0, r0, #1
 80042ce:	6020      	str	r0, [r4, #0]
              break;
 80042d0:	e6b2      	b.n	8004038 <RI_GetRegisterMotor1+0xd0>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80042d2:	4608      	mov	r0, r1
 80042d4:	e666      	b.n	8003fa4 <RI_GetRegisterMotor1+0x3c>
 80042d6:	bf00      	nop
 80042d8:	20000000 	.word	0x20000000
 80042dc:	20000388 	.word	0x20000388
 80042e0:	2000041c 	.word	0x2000041c
 80042e4:	20000424 	.word	0x20000424
 80042e8:	2000034c 	.word	0x2000034c
 80042ec:	200002f4 	.word	0x200002f4
 80042f0:	20000428 	.word	0x20000428
 80042f4:	20000248 	.word	0x20000248
          switch (regID)
 80042f8:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 80042fc:	d061      	beq.n	80043c2 <RI_GetRegisterMotor1+0x45a>
 80042fe:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8004302:	4298      	cmp	r0, r3
 8004304:	d153      	bne.n	80043ae <RI_GetRegisterMotor1+0x446>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8004306:	4bb6      	ldr	r3, [pc, #728]	@ (80045e0 <RI_GetRegisterMotor1+0x678>)
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	f005 fd1d 	bl	8009d48 <PQD_GetAvrgElMotorPowerW>
 800430e:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8004312:	9b01      	ldr	r3, [sp, #4]
 8004314:	6023      	str	r3, [r4, #0]
              break;
 8004316:	e68f      	b.n	8004038 <RI_GetRegisterMotor1+0xd0>
  return ((uint8_t)pHandle->bPhaseNbr);
 8004318:	4bb2      	ldr	r3, [pc, #712]	@ (80045e4 <RI_GetRegisterMotor1+0x67c>)
 800431a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
              break;
 800431e:	e670      	b.n	8004002 <RI_GetRegisterMotor1+0x9a>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004320:	48b1      	ldr	r0, [pc, #708]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
 8004322:	f7fd ff95 	bl	8002250 <MCI_GetControlMode>
              break;
 8004326:	e66c      	b.n	8004002 <RI_GetRegisterMotor1+0x9a>
        *size = (*rawSize) + 2U;
 8004328:	8823      	ldrh	r3, [r4, #0]
 800432a:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 800432c:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800432e:	b29b      	uxth	r3, r3
 8004330:	e6da      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
            *rawSize = 4;
 8004332:	2304      	movs	r3, #4
 8004334:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8004336:	48ac      	ldr	r0, [pc, #688]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
 8004338:	f7fe f802 	bl	8002340 <MCI_GetIqdref>
 800433c:	4603      	mov	r3, r0
 800433e:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004340:	48a9      	ldr	r0, [pc, #676]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8004342:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004344:	f7fd fffc 	bl	8002340 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8004348:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800434a:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 800434e:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004350:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8004352:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8004354:	2000      	movs	r0, #0
            break;
 8004356:	e6c7      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8004358:	48a3      	ldr	r0, [pc, #652]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
 800435a:	f7fd ffbb 	bl	80022d4 <MCI_GetLastRampFinalSpeed>
 800435e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004362:	0043      	lsls	r3, r0, #1
 8004364:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8004368:	489f      	ldr	r0, [pc, #636]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
 800436a:	f7fd ffbb 	bl	80022e4 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 800436e:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8004370:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8004372:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8004374:	2000      	movs	r0, #0
            break;
 8004376:	2308      	movs	r3, #8
 8004378:	e6b6      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800437a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800437e:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004380:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8004384:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004386:	f200 808e 	bhi.w	80044a6 <RI_GetRegisterMotor1+0x53e>
 800438a:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800438c:	2008      	movs	r0, #8
 800438e:	e6ab      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004390:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8004394:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004396:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800439a:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800439c:	d876      	bhi.n	800448c <RI_GetRegisterMotor1+0x524>
 800439e:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80043a0:	2008      	movs	r0, #8
 80043a2:	e6a1      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
static inline int32_t STO_PLL_GetEstimatedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
 80043a4:	4b91      	ldr	r3, [pc, #580]	@ (80045ec <RI_GetRegisterMotor1+0x684>)
 80043a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 80043aa:	6023      	str	r3, [r4, #0]
              break;
 80043ac:	e644      	b.n	8004038 <RI_GetRegisterMotor1+0xd0>
          switch (regID)
 80043ae:	2005      	movs	r0, #5
 80043b0:	e643      	b.n	800403a <RI_GetRegisterMotor1+0xd2>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80043b2:	488d      	ldr	r0, [pc, #564]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
 80043b4:	f7fd ffa2 	bl	80022fc <MCI_GetMecSpeedRefUnit>
 80043b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80043bc:	0040      	lsls	r0, r0, #1
 80043be:	6020      	str	r0, [r4, #0]
              break;
 80043c0:	e63a      	b.n	8004038 <RI_GetRegisterMotor1+0xd0>
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 80043c2:	4b8a      	ldr	r3, [pc, #552]	@ (80045ec <RI_GetRegisterMotor1+0x684>)
 80043c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 80043c8:	6023      	str	r3, [r4, #0]
              break;
 80043ca:	e635      	b.n	8004038 <RI_GetRegisterMotor1+0xd0>
          switch (regID)
 80043cc:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 80043d0:	f000 8186 	beq.w	80046e0 <RI_GetRegisterMotor1+0x778>
 80043d4:	f200 808f 	bhi.w	80044f6 <RI_GetRegisterMotor1+0x58e>
 80043d8:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 80043dc:	f000 8179 	beq.w	80046d2 <RI_GetRegisterMotor1+0x76a>
 80043e0:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 80043e4:	f040 8095 	bne.w	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 80043e8:	4880      	ldr	r0, [pc, #512]	@ (80045ec <RI_GetRegisterMotor1+0x684>)
 80043ea:	f007 f955 	bl	800b698 <STO_PLL_GetEstimatedBemf>
 80043ee:	8020      	strh	r0, [r4, #0]
              break;
 80043f0:	e656      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 80043f2:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80043f6:	f000 8141 	beq.w	800467c <RI_GetRegisterMotor1+0x714>
 80043fa:	f200 80c3 	bhi.w	8004584 <RI_GetRegisterMotor1+0x61c>
 80043fe:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8004402:	f000 8134 	beq.w	800466e <RI_GetRegisterMotor1+0x706>
 8004406:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 800440a:	f040 8082 	bne.w	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800440e:	4876      	ldr	r0, [pc, #472]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
 8004410:	f7fd ff8c 	bl	800232c <MCI_GetIqd>
 8004414:	8020      	strh	r0, [r4, #0]
              break;
 8004416:	e643      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 8004418:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 800441c:	f000 8118 	beq.w	8004650 <RI_GetRegisterMotor1+0x6e8>
 8004420:	f200 80a0 	bhi.w	8004564 <RI_GetRegisterMotor1+0x5fc>
 8004424:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8004428:	f000 810d 	beq.w	8004646 <RI_GetRegisterMotor1+0x6de>
 800442c:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8004430:	d16f      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8004432:	486f      	ldr	r0, [pc, #444]	@ (80045f0 <RI_GetRegisterMotor1+0x688>)
 8004434:	f005 fbf4 	bl	8009c20 <PID_GetKI>
 8004438:	8020      	strh	r0, [r4, #0]
              break;
 800443a:	e631      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 800443c:	f641 1310 	movw	r3, #6416	@ 0x1910
 8004440:	4298      	cmp	r0, r3
 8004442:	f000 8179 	beq.w	8004738 <RI_GetRegisterMotor1+0x7d0>
 8004446:	f200 80ab 	bhi.w	80045a0 <RI_GetRegisterMotor1+0x638>
 800444a:	f241 6350 	movw	r3, #5712	@ 0x1650
 800444e:	4298      	cmp	r0, r3
 8004450:	f000 816d 	beq.w	800472e <RI_GetRegisterMotor1+0x7c6>
 8004454:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8004458:	4298      	cmp	r0, r3
 800445a:	d15a      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 800445c:	4865      	ldr	r0, [pc, #404]	@ (80045f4 <RI_GetRegisterMotor1+0x68c>)
 800445e:	f005 fbef 	bl	8009c40 <PID_GetKIDivisorPOW2>
 8004462:	8020      	strh	r0, [r4, #0]
              break;
 8004464:	e61c      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
 8004466:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004468:	2008      	movs	r0, #8
 800446a:	e63d      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
 800446c:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800446e:	2008      	movs	r0, #8
 8004470:	e63a      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8004472:	4a61      	ldr	r2, [pc, #388]	@ (80045f8 <RI_GetRegisterMotor1+0x690>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	6850      	ldr	r0, [r2, #4]
 8004478:	6814      	ldr	r4, [r2, #0]
 800447a:	6891      	ldr	r1, [r2, #8]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	6058      	str	r0, [r3, #4]
 8004482:	601c      	str	r4, [r3, #0]
 8004484:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8004486:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8004488:	2312      	movs	r3, #18
 800448a:	e62d      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 800448c:	4a5b      	ldr	r2, [pc, #364]	@ (80045fc <RI_GetRegisterMotor1+0x694>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	6810      	ldr	r0, [r2, #0]
 8004492:	6851      	ldr	r1, [r2, #4]
 8004494:	6894      	ldr	r4, [r2, #8]
 8004496:	609c      	str	r4, [r3, #8]
 8004498:	6018      	str	r0, [r3, #0]
 800449a:	6059      	str	r1, [r3, #4]
 800449c:	8992      	ldrh	r2, [r2, #12]
 800449e:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 80044a0:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80044a2:	2310      	movs	r3, #16
 80044a4:	e620      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80044a6:	4a56      	ldr	r2, [pc, #344]	@ (8004600 <RI_GetRegisterMotor1+0x698>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 80044ae:	6814      	ldr	r4, [r2, #0]
 80044b0:	6850      	ldr	r0, [r2, #4]
 80044b2:	6891      	ldr	r1, [r2, #8]
 80044b4:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80044b8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80044bc:	3210      	adds	r2, #16
 80044be:	4572      	cmp	r2, lr
 80044c0:	601c      	str	r4, [r3, #0]
 80044c2:	6058      	str	r0, [r3, #4]
 80044c4:	6099      	str	r1, [r3, #8]
 80044c6:	f103 0310 	add.w	r3, r3, #16
 80044ca:	d1f0      	bne.n	80044ae <RI_GetRegisterMotor1+0x546>
 80044cc:	6810      	ldr	r0, [r2, #0]
 80044ce:	6851      	ldr	r1, [r2, #4]
 80044d0:	6892      	ldr	r2, [r2, #8]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	6018      	str	r0, [r3, #0]
 80044d6:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 80044d8:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80044da:	233e      	movs	r3, #62	@ 0x3e
 80044dc:	e604      	b.n	80040e8 <RI_GetRegisterMotor1+0x180>
          switch (regID)
 80044de:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 80044e2:	f000 8104 	beq.w	80046ee <RI_GetRegisterMotor1+0x786>
 80044e6:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 80044ea:	d112      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80044ec:	483f      	ldr	r0, [pc, #252]	@ (80045ec <RI_GetRegisterMotor1+0x684>)
 80044ee:	f006 fd87 	bl	800b000 <SPD_GetS16Speed>
 80044f2:	8020      	strh	r0, [r4, #0]
              break;
 80044f4:	e5d4      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 80044f6:	f241 4350 	movw	r3, #5200	@ 0x1450
 80044fa:	4298      	cmp	r0, r3
 80044fc:	f000 808a 	beq.w	8004614 <RI_GetRegisterMotor1+0x6ac>
 8004500:	d807      	bhi.n	8004512 <RI_GetRegisterMotor1+0x5aa>
 8004502:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8004506:	f43f adcb 	beq.w	80040a0 <RI_GetRegisterMotor1+0x138>
 800450a:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800450e:	f43f adc7 	beq.w	80040a0 <RI_GetRegisterMotor1+0x138>
 8004512:	2005      	movs	r0, #5
 8004514:	e5c5      	b.n	80040a2 <RI_GetRegisterMotor1+0x13a>
 8004516:	f241 5390 	movw	r3, #5520	@ 0x1590
 800451a:	4298      	cmp	r0, r3
 800451c:	f000 8089 	beq.w	8004632 <RI_GetRegisterMotor1+0x6ca>
 8004520:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8004524:	4298      	cmp	r0, r3
 8004526:	d1f4      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8004528:	4836      	ldr	r0, [pc, #216]	@ (8004604 <RI_GetRegisterMotor1+0x69c>)
 800452a:	f005 fb7f 	bl	8009c2c <PID_GetKPDivisorPOW2>
 800452e:	8020      	strh	r0, [r4, #0]
              break;
 8004530:	e5b6      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 8004532:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8004536:	d04d      	beq.n	80045d4 <RI_GetRegisterMotor1+0x66c>
 8004538:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 800453c:	d1e9      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 800453e:	4831      	ldr	r0, [pc, #196]	@ (8004604 <RI_GetRegisterMotor1+0x69c>)
 8004540:	f005 fb6e 	bl	8009c20 <PID_GetKI>
 8004544:	8020      	strh	r0, [r4, #0]
              break;
 8004546:	e5ab      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 8004548:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 800454c:	f000 8085 	beq.w	800465a <RI_GetRegisterMotor1+0x6f2>
 8004550:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8004554:	d1dd      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8004556:	4824      	ldr	r0, [pc, #144]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
 8004558:	f7fd fed4 	bl	8002304 <MCI_GetIab>
 800455c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004560:	8023      	strh	r3, [r4, #0]
              break;
 8004562:	e59d      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 8004564:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8004568:	f000 808f 	beq.w	800468a <RI_GetRegisterMotor1+0x722>
 800456c:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8004570:	d1cf      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8004572:	481e      	ldr	r0, [pc, #120]	@ (80045ec <RI_GetRegisterMotor1+0x684>)
 8004574:	aa13      	add	r2, sp, #76	@ 0x4c
 8004576:	a912      	add	r1, sp, #72	@ 0x48
 8004578:	f007 f8a4 	bl	800b6c4 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 800457c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8004580:	8023      	strh	r3, [r4, #0]
              break;
 8004582:	e58d      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 8004584:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8004588:	f000 80db 	beq.w	8004742 <RI_GetRegisterMotor1+0x7da>
 800458c:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8004590:	d1bf      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8004592:	4815      	ldr	r0, [pc, #84]	@ (80045e8 <RI_GetRegisterMotor1+0x680>)
 8004594:	f7fd fed4 	bl	8002340 <MCI_GetIqdref>
 8004598:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800459c:	8023      	strh	r3, [r4, #0]
              break;
 800459e:	e57f      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
          switch (regID)
 80045a0:	f641 23d0 	movw	r3, #6864	@ 0x1ad0
 80045a4:	4298      	cmp	r0, r3
 80045a6:	d1b4      	bne.n	8004512 <RI_GetRegisterMotor1+0x5aa>
{
  int16_t hVoltage;
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  hVoltage = ((MC_NULL == pHandle) ? 0 : pHandle->hVoltage);
#else
  hVoltage = pHandle->hVoltage;
 80045a8:	4b17      	ldr	r3, [pc, #92]	@ (8004608 <RI_GetRegisterMotor1+0x6a0>)
            *regdata16 = ((OL_GetVoltage(&OpenLoop_ParamsM1)*100)/32767);
 80045aa:	4a18      	ldr	r2, [pc, #96]	@ (800460c <RI_GetRegisterMotor1+0x6a4>)
 80045ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	fb82 1203 	smull	r1, r2, r2, r3
 80045be:	441a      	add	r2, r3
 80045c0:	17db      	asrs	r3, r3, #31
 80045c2:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
 80045c6:	8023      	strh	r3, [r4, #0]
              break;
 80045c8:	e56a      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 80045ca:	4811      	ldr	r0, [pc, #68]	@ (8004610 <RI_GetRegisterMotor1+0x6a8>)
 80045cc:	f005 faec 	bl	8009ba8 <NTC_GetAvTemp_C>
 80045d0:	8020      	strh	r0, [r4, #0]
              break;
 80045d2:	e565      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 80045d4:	480b      	ldr	r0, [pc, #44]	@ (8004604 <RI_GetRegisterMotor1+0x69c>)
 80045d6:	f005 fb1f 	bl	8009c18 <PID_GetKP>
 80045da:	8020      	strh	r0, [r4, #0]
              break;
 80045dc:	e560      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
 80045de:	bf00      	nop
 80045e0:	2000002c 	.word	0x2000002c
 80045e4:	20000248 	.word	0x20000248
 80045e8:	20000000 	.word	0x20000000
 80045ec:	2000007c 	.word	0x2000007c
 80045f0:	200002f4 	.word	0x200002f4
 80045f4:	200000b0 	.word	0x200000b0
 80045f8:	20000418 	.word	0x20000418
 80045fc:	20000420 	.word	0x20000420
 8004600:	2000041c 	.word	0x2000041c
 8004604:	20000320 	.word	0x20000320
 8004608:	20000058 	.word	0x20000058
 800460c:	80010003 	.word	0x80010003
 8004610:	200003b4 	.word	0x200003b4
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8004614:	484d      	ldr	r0, [pc, #308]	@ (800474c <RI_GetRegisterMotor1+0x7e4>)
 8004616:	f005 fb09 	bl	8009c2c <PID_GetKPDivisorPOW2>
 800461a:	8020      	strh	r0, [r4, #0]
              break;
 800461c:	e540      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 800461e:	484c      	ldr	r0, [pc, #304]	@ (8004750 <RI_GetRegisterMotor1+0x7e8>)
 8004620:	f005 fb0e 	bl	8009c40 <PID_GetKIDivisorPOW2>
 8004624:	8020      	strh	r0, [r4, #0]
              break;
 8004626:	e53b      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8004628:	4848      	ldr	r0, [pc, #288]	@ (800474c <RI_GetRegisterMotor1+0x7e4>)
 800462a:	f005 fb25 	bl	8009c78 <PID_GetKD>
 800462e:	8020      	strh	r0, [r4, #0]
              break;
 8004630:	e536      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8004632:	4847      	ldr	r0, [pc, #284]	@ (8004750 <RI_GetRegisterMotor1+0x7e8>)
 8004634:	f005 fb24 	bl	8009c80 <PID_GetKDDivisorPOW2>
 8004638:	8020      	strh	r0, [r4, #0]
              break;
 800463a:	e531      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 800463c:	4845      	ldr	r0, [pc, #276]	@ (8004754 <RI_GetRegisterMotor1+0x7ec>)
 800463e:	f005 faff 	bl	8009c40 <PID_GetKIDivisorPOW2>
 8004642:	8020      	strh	r0, [r4, #0]
              break;
 8004644:	e52c      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8004646:	4842      	ldr	r0, [pc, #264]	@ (8004750 <RI_GetRegisterMotor1+0x7e8>)
 8004648:	f005 fae6 	bl	8009c18 <PID_GetKP>
 800464c:	8020      	strh	r0, [r4, #0]
              break;
 800464e:	e527      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8004650:	483f      	ldr	r0, [pc, #252]	@ (8004750 <RI_GetRegisterMotor1+0x7e8>)
 8004652:	f005 fb11 	bl	8009c78 <PID_GetKD>
 8004656:	8020      	strh	r0, [r4, #0]
              break;
 8004658:	e522      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = MCI_GetIab(pMCIN).a;
 800465a:	483f      	ldr	r0, [pc, #252]	@ (8004758 <RI_GetRegisterMotor1+0x7f0>)
 800465c:	f7fd fe52 	bl	8002304 <MCI_GetIab>
 8004660:	8020      	strh	r0, [r4, #0]
              break;
 8004662:	e51d      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8004664:	483b      	ldr	r0, [pc, #236]	@ (8004754 <RI_GetRegisterMotor1+0x7ec>)
 8004666:	f005 fb07 	bl	8009c78 <PID_GetKD>
 800466a:	8020      	strh	r0, [r4, #0]
              break;
 800466c:	e518      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800466e:	483a      	ldr	r0, [pc, #232]	@ (8004758 <RI_GetRegisterMotor1+0x7f0>)
 8004670:	f7fd fe52 	bl	8002318 <MCI_GetIalphabeta>
 8004674:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004678:	8023      	strh	r3, [r4, #0]
              break;
 800467a:	e511      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800467c:	4836      	ldr	r0, [pc, #216]	@ (8004758 <RI_GetRegisterMotor1+0x7f0>)
 800467e:	f7fd fe55 	bl	800232c <MCI_GetIqd>
 8004682:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004686:	8023      	strh	r3, [r4, #0]
              break;
 8004688:	e50a      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 800468a:	4834      	ldr	r0, [pc, #208]	@ (800475c <RI_GetRegisterMotor1+0x7f4>)
 800468c:	aa13      	add	r2, sp, #76	@ 0x4c
 800468e:	a912      	add	r1, sp, #72	@ 0x48
 8004690:	f007 f818 	bl	800b6c4 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8004694:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8004698:	8023      	strh	r3, [r4, #0]
              break;
 800469a:	e501      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 800469c:	482b      	ldr	r0, [pc, #172]	@ (800474c <RI_GetRegisterMotor1+0x7e4>)
 800469e:	f005 facf 	bl	8009c40 <PID_GetKIDivisorPOW2>
 80046a2:	8020      	strh	r0, [r4, #0]
              break;
 80046a4:	e4fc      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80046a6:	482c      	ldr	r0, [pc, #176]	@ (8004758 <RI_GetRegisterMotor1+0x7f0>)
 80046a8:	f7fd fe54 	bl	8002354 <MCI_GetVqd>
 80046ac:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80046b0:	8023      	strh	r3, [r4, #0]
              break;
 80046b2:	e4f5      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 80046b4:	482a      	ldr	r0, [pc, #168]	@ (8004760 <RI_GetRegisterMotor1+0x7f8>)
 80046b6:	f005 fab3 	bl	8009c20 <PID_GetKI>
 80046ba:	8020      	strh	r0, [r4, #0]
              break;
 80046bc:	e4f0      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80046be:	4826      	ldr	r0, [pc, #152]	@ (8004758 <RI_GetRegisterMotor1+0x7f0>)
 80046c0:	f7fd fe48 	bl	8002354 <MCI_GetVqd>
 80046c4:	8020      	strh	r0, [r4, #0]
              break;
 80046c6:	e4eb      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80046c8:	4823      	ldr	r0, [pc, #140]	@ (8004758 <RI_GetRegisterMotor1+0x7f0>)
 80046ca:	f7fd fe25 	bl	8002318 <MCI_GetIalphabeta>
 80046ce:	8020      	strh	r0, [r4, #0]
              break;
 80046d0:	e4e6      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 80046d2:	4822      	ldr	r0, [pc, #136]	@ (800475c <RI_GetRegisterMotor1+0x7f4>)
 80046d4:	f006 ffe4 	bl	800b6a0 <STO_PLL_GetEstimatedCurrent>
 80046d8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80046dc:	8023      	strh	r3, [r4, #0]
              break;
 80046de:	e4df      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 80046e0:	481e      	ldr	r0, [pc, #120]	@ (800475c <RI_GetRegisterMotor1+0x7f4>)
 80046e2:	f006 ffd9 	bl	800b698 <STO_PLL_GetEstimatedBemf>
 80046e6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80046ea:	8023      	strh	r3, [r4, #0]
              break;
 80046ec:	e4d8      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
 80046ee:	4b1b      	ldr	r3, [pc, #108]	@ (800475c <RI_GetRegisterMotor1+0x7f4>)
 80046f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80046f4:	8023      	strh	r3, [r4, #0]
              break;
 80046f6:	e4d3      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 80046f8:	4814      	ldr	r0, [pc, #80]	@ (800474c <RI_GetRegisterMotor1+0x7e4>)
 80046fa:	f005 fa8d 	bl	8009c18 <PID_GetKP>
 80046fe:	8020      	strh	r0, [r4, #0]
              break;
 8004700:	e4ce      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8004702:	4812      	ldr	r0, [pc, #72]	@ (800474c <RI_GetRegisterMotor1+0x7e4>)
 8004704:	f005 fabc 	bl	8009c80 <PID_GetKDDivisorPOW2>
 8004708:	8020      	strh	r0, [r4, #0]
              break;
 800470a:	e4c9      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800470c:	4812      	ldr	r0, [pc, #72]	@ (8004758 <RI_GetRegisterMotor1+0x7f0>)
 800470e:	f7fd fe2b 	bl	8002368 <MCI_GetValphabeta>
 8004712:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004716:	8023      	strh	r3, [r4, #0]
              break;
 8004718:	e4c2      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 800471a:	4811      	ldr	r0, [pc, #68]	@ (8004760 <RI_GetRegisterMotor1+0x7f8>)
 800471c:	f005 fa7c 	bl	8009c18 <PID_GetKP>
 8004720:	8020      	strh	r0, [r4, #0]
              break;
 8004722:	e4bd      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8004724:	480d      	ldr	r0, [pc, #52]	@ (800475c <RI_GetRegisterMotor1+0x7f4>)
 8004726:	f006 ffbb 	bl	800b6a0 <STO_PLL_GetEstimatedCurrent>
 800472a:	8020      	strh	r0, [r4, #0]
              break;
 800472c:	e4b8      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 800472e:	4809      	ldr	r0, [pc, #36]	@ (8004754 <RI_GetRegisterMotor1+0x7ec>)
 8004730:	f005 faa6 	bl	8009c80 <PID_GetKDDivisorPOW2>
 8004734:	8020      	strh	r0, [r4, #0]
              break;
 8004736:	e4b3      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8004738:	4809      	ldr	r0, [pc, #36]	@ (8004760 <RI_GetRegisterMotor1+0x7f8>)
 800473a:	f005 fa77 	bl	8009c2c <PID_GetKPDivisorPOW2>
 800473e:	8020      	strh	r0, [r4, #0]
              break;
 8004740:	e4ae      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8004742:	4805      	ldr	r0, [pc, #20]	@ (8004758 <RI_GetRegisterMotor1+0x7f0>)
 8004744:	f7fd fdfc 	bl	8002340 <MCI_GetIqdref>
 8004748:	8020      	strh	r0, [r4, #0]
              break;
 800474a:	e4a9      	b.n	80040a0 <RI_GetRegisterMotor1+0x138>
 800474c:	2000034c 	.word	0x2000034c
 8004750:	200002f4 	.word	0x200002f4
 8004754:	20000320 	.word	0x20000320
 8004758:	20000000 	.word	0x20000000
 800475c:	2000007c 	.word	0x2000007c
 8004760:	200000b0 	.word	0x200000b0

08004764 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8004764:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8004768:	3808      	subs	r0, #8
 800476a:	b2c0      	uxtb	r0, r0
 800476c:	2810      	cmp	r0, #16
 800476e:	bf9a      	itte	ls
 8004770:	4b01      	ldrls	r3, [pc, #4]	@ (8004778 <RI_GetIDSize+0x14>)
 8004772:	5c18      	ldrbls	r0, [r3, r0]
 8004774:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8004776:	4770      	bx	lr
 8004778:	080102dc 	.word	0x080102dc

0800477c <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 800477c:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8004780:	2b10      	cmp	r3, #16
 8004782:	d003      	beq.n	800478c <RI_GetPtrReg+0x10>
 8004784:	4b42      	ldr	r3, [pc, #264]	@ (8004890 <RI_GetPtrReg+0x114>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 8004786:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004788:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800478a:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 800478c:	f020 0007 	bic.w	r0, r0, #7
        switch (regID)
 8004790:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
    uint16_t regID = dataID & REG_MASK;
 8004794:	b282      	uxth	r2, r0
        switch (regID)
 8004796:	d068      	beq.n	800486a <RI_GetPtrReg+0xee>
 8004798:	d812      	bhi.n	80047c0 <RI_GetPtrReg+0x44>
 800479a:	f5b2 6f0d 	cmp.w	r2, #2256	@ 0x8d0
 800479e:	d05f      	beq.n	8004860 <RI_GetPtrReg+0xe4>
 80047a0:	d820      	bhi.n	80047e4 <RI_GetPtrReg+0x68>
 80047a2:	f5b2 6f05 	cmp.w	r2, #2128	@ 0x850
 80047a6:	d065      	beq.n	8004874 <RI_GetPtrReg+0xf8>
 80047a8:	d84d      	bhi.n	8004846 <RI_GetPtrReg+0xca>
 80047aa:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 80047ae:	d03b      	beq.n	8004828 <RI_GetPtrReg+0xac>
 80047b0:	f5b2 6f01 	cmp.w	r2, #2064	@ 0x810
 80047b4:	d1e6      	bne.n	8004784 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80047b6:	4b37      	ldr	r3, [pc, #220]	@ (8004894 <RI_GetPtrReg+0x118>)
 80047b8:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80047ba:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80047bc:	3302      	adds	r3, #2
            break;
 80047be:	e7e3      	b.n	8004788 <RI_GetPtrReg+0xc>
        switch (regID)
 80047c0:	f5b2 6f35 	cmp.w	r2, #2896	@ 0xb50
 80047c4:	d034      	beq.n	8004830 <RI_GetPtrReg+0xb4>
 80047c6:	d81b      	bhi.n	8004800 <RI_GetPtrReg+0x84>
 80047c8:	f5b2 6f25 	cmp.w	r2, #2640	@ 0xa50
 80047cc:	d043      	beq.n	8004856 <RI_GetPtrReg+0xda>
 80047ce:	f5b2 6f29 	cmp.w	r2, #2704	@ 0xa90
 80047d2:	d024      	beq.n	800481e <RI_GetPtrReg+0xa2>
 80047d4:	f5b2 6f21 	cmp.w	r2, #2576	@ 0xa10
 80047d8:	d1d4      	bne.n	8004784 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80047da:	4b2e      	ldr	r3, [pc, #184]	@ (8004894 <RI_GetPtrReg+0x118>)
 80047dc:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80047de:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80047e0:	3318      	adds	r3, #24
            break;
 80047e2:	e7d1      	b.n	8004788 <RI_GetPtrReg+0xc>
        switch (regID)
 80047e4:	f5b2 6f15 	cmp.w	r2, #2384	@ 0x950
 80047e8:	d04c      	beq.n	8004884 <RI_GetPtrReg+0x108>
 80047ea:	f5b2 6f19 	cmp.w	r2, #2448	@ 0x990
 80047ee:	d022      	beq.n	8004836 <RI_GetPtrReg+0xba>
 80047f0:	f5b2 6f11 	cmp.w	r2, #2320	@ 0x910
 80047f4:	d1c6      	bne.n	8004784 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80047f6:	4b27      	ldr	r3, [pc, #156]	@ (8004894 <RI_GetPtrReg+0x118>)
 80047f8:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80047fa:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80047fc:	330e      	adds	r3, #14
            break;
 80047fe:	e7c3      	b.n	8004788 <RI_GetPtrReg+0xc>
        switch (regID)
 8004800:	f5b2 6f45 	cmp.w	r2, #3152	@ 0xc50
 8004804:	d03b      	beq.n	800487e <RI_GetPtrReg+0x102>
 8004806:	f5b2 6f49 	cmp.w	r2, #3216	@ 0xc90
 800480a:	d019      	beq.n	8004840 <RI_GetPtrReg+0xc4>
 800480c:	4822      	ldr	r0, [pc, #136]	@ (8004898 <RI_GetPtrReg+0x11c>)
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <RI_GetPtrReg+0x114>)
 8004810:	f5b2 6f39 	cmp.w	r2, #2960	@ 0xb90
 8004814:	bf0a      	itet	eq
 8004816:	4603      	moveq	r3, r0
 8004818:	2005      	movne	r0, #5
 800481a:	2000      	moveq	r0, #0
 800481c:	e7b4      	b.n	8004788 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800481e:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <RI_GetPtrReg+0x118>)
 8004820:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004822:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004824:	331c      	adds	r3, #28
            break;
 8004826:	e7af      	b.n	8004788 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004828:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <RI_GetPtrReg+0x118>)
  uint8_t retVal = MCP_CMD_OK;
 800482a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800482c:	685b      	ldr	r3, [r3, #4]
             break;
 800482e:	e7ab      	b.n	8004788 <RI_GetPtrReg+0xc>
        switch (regID)
 8004830:	4b1a      	ldr	r3, [pc, #104]	@ (800489c <RI_GetPtrReg+0x120>)
  uint8_t retVal = MCP_CMD_OK;
 8004832:	2000      	movs	r0, #0
 8004834:	e7a8      	b.n	8004788 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8004836:	4b17      	ldr	r3, [pc, #92]	@ (8004894 <RI_GetPtrReg+0x118>)
 8004838:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800483a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800483c:	3312      	adds	r3, #18
            break;
 800483e:	e7a3      	b.n	8004788 <RI_GetPtrReg+0xc>
        switch (regID)
 8004840:	4b17      	ldr	r3, [pc, #92]	@ (80048a0 <RI_GetPtrReg+0x124>)
  uint8_t retVal = MCP_CMD_OK;
 8004842:	2000      	movs	r0, #0
 8004844:	e7a0      	b.n	8004788 <RI_GetPtrReg+0xc>
        switch (regID)
 8004846:	f5b2 6f09 	cmp.w	r2, #2192	@ 0x890
 800484a:	d19b      	bne.n	8004784 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800484c:	4b11      	ldr	r3, [pc, #68]	@ (8004894 <RI_GetPtrReg+0x118>)
 800484e:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004850:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004852:	3306      	adds	r3, #6
            break;
 8004854:	e798      	b.n	8004788 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8004856:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <RI_GetPtrReg+0x118>)
 8004858:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800485a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800485c:	331a      	adds	r3, #26
            break;
 800485e:	e793      	b.n	8004788 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004860:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <RI_GetPtrReg+0x118>)
 8004862:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004864:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004866:	330c      	adds	r3, #12
            break;
 8004868:	e78e      	b.n	8004788 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <RI_GetPtrReg+0x118>)
 800486c:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800486e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8004870:	3316      	adds	r3, #22
            break;
 8004872:	e789      	b.n	8004788 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8004874:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <RI_GetPtrReg+0x118>)
 8004876:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004878:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 800487a:	3304      	adds	r3, #4
            break;
 800487c:	e784      	b.n	8004788 <RI_GetPtrReg+0xc>
        switch (regID)
 800487e:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <RI_GetPtrReg+0x128>)
  uint8_t retVal = MCP_CMD_OK;
 8004880:	2000      	movs	r0, #0
 8004882:	e781      	b.n	8004788 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004884:	4b03      	ldr	r3, [pc, #12]	@ (8004894 <RI_GetPtrReg+0x118>)
 8004886:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004888:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800488a:	3310      	adds	r3, #16
            break;
 800488c:	e77c      	b.n	8004788 <RI_GetPtrReg+0xc>
 800488e:	bf00      	nop
 8004890:	20001ef0 	.word	0x20001ef0
 8004894:	20000000 	.word	0x20000000
 8004898:	20000088 	.word	0x20000088
 800489c:	20000080 	.word	0x20000080
 80048a0:	200000ee 	.word	0x200000ee
 80048a4:	200000ec 	.word	0x200000ec

080048a8 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 80048a8:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048aa:	4c8c      	ldr	r4, [pc, #560]	@ (8004adc <RCM_RegisterRegConv+0x234>)
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	d033      	beq.n	800491a <RCM_RegisterRegConv+0x72>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80048b2:	f890 c004 	ldrb.w	ip, [r0, #4]
 80048b6:	7913      	ldrb	r3, [r2, #4]
 80048b8:	4563      	cmp	r3, ip
 80048ba:	d01e      	beq.n	80048fa <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048bc:	6861      	ldr	r1, [r4, #4]
 80048be:	2900      	cmp	r1, #0
 80048c0:	f000 80d3 	beq.w	8004a6a <RCM_RegisterRegConv+0x1c2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80048c4:	790b      	ldrb	r3, [r1, #4]
 80048c6:	4563      	cmp	r3, ip
 80048c8:	d036      	beq.n	8004938 <RCM_RegisterRegConv+0x90>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048ca:	68a5      	ldr	r5, [r4, #8]
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	f000 80ad 	beq.w	8004a2c <RCM_RegisterRegConv+0x184>
  uint8_t handle = 255U;
 80048d2:	22ff      	movs	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80048d4:	792b      	ldrb	r3, [r5, #4]
 80048d6:	4563      	cmp	r3, ip
 80048d8:	f000 80b8 	beq.w	8004a4c <RCM_RegisterRegConv+0x1a4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048dc:	68e5      	ldr	r5, [r4, #12]
 80048de:	2d00      	cmp	r5, #0
 80048e0:	f000 80bc 	beq.w	8004a5c <RCM_RegisterRegConv+0x1b4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80048e4:	792b      	ldrb	r3, [r5, #4]
 80048e6:	4563      	cmp	r3, ip
 80048e8:	f000 80ce 	beq.w	8004a88 <RCM_RegisterRegConv+0x1e0>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80048ec:	2a03      	cmp	r2, #3
 80048ee:	bf98      	it	ls
 80048f0:	6803      	ldrls	r3, [r0, #0]
 80048f2:	d936      	bls.n	8004962 <RCM_RegisterRegConv+0xba>
 80048f4:	22ff      	movs	r2, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 80048f6:	7302      	strb	r2, [r0, #12]
}
 80048f8:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80048fa:	6803      	ldr	r3, [r0, #0]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	4293      	cmp	r3, r2
 8004900:	d031      	beq.n	8004966 <RCM_RegisterRegConv+0xbe>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004902:	6861      	ldr	r1, [r4, #4]
 8004904:	2900      	cmp	r1, #0
 8004906:	f000 80da 	beq.w	8004abe <RCM_RegisterRegConv+0x216>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800490a:	790a      	ldrb	r2, [r1, #4]
 800490c:	4562      	cmp	r2, ip
 800490e:	f000 80cb 	beq.w	8004aa8 <RCM_RegisterRegConv+0x200>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004912:	68a5      	ldr	r5, [r4, #8]
 8004914:	2d00      	cmp	r5, #0
 8004916:	d1dc      	bne.n	80048d2 <RCM_RegisterRegConv+0x2a>
 8004918:	e089      	b.n	8004a2e <RCM_RegisterRegConv+0x186>
 800491a:	6861      	ldr	r1, [r4, #4]
 800491c:	2900      	cmp	r1, #0
 800491e:	f000 80a8 	beq.w	8004a72 <RCM_RegisterRegConv+0x1ca>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004922:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004926:	790b      	ldrb	r3, [r1, #4]
 8004928:	4563      	cmp	r3, ip
 800492a:	d006      	beq.n	800493a <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800492c:	68a5      	ldr	r5, [r4, #8]
 800492e:	2d00      	cmp	r5, #0
 8004930:	d1d0      	bne.n	80048d4 <RCM_RegisterRegConv+0x2c>
 8004932:	6803      	ldr	r3, [r0, #0]
 8004934:	462a      	mov	r2, r5
 8004936:	e00b      	b.n	8004950 <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8004938:	22ff      	movs	r2, #255	@ 0xff
 800493a:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800493c:	6809      	ldr	r1, [r1, #0]
 800493e:	4299      	cmp	r1, r3
 8004940:	f000 80a8 	beq.w	8004a94 <RCM_RegisterRegConv+0x1ec>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004944:	68a5      	ldr	r5, [r4, #8]
 8004946:	2d00      	cmp	r5, #0
 8004948:	d1c4      	bne.n	80048d4 <RCM_RegisterRegConv+0x2c>
 800494a:	2a04      	cmp	r2, #4
 800494c:	d86f      	bhi.n	8004a2e <RCM_RegisterRegConv+0x186>
 800494e:	462a      	mov	r2, r5
 8004950:	68e1      	ldr	r1, [r4, #12]
 8004952:	b131      	cbz	r1, 8004962 <RCM_RegisterRegConv+0xba>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004954:	790d      	ldrb	r5, [r1, #4]
 8004956:	4565      	cmp	r5, ip
 8004958:	d103      	bne.n	8004962 <RCM_RegisterRegConv+0xba>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800495a:	6809      	ldr	r1, [r1, #0]
 800495c:	4299      	cmp	r1, r3
 800495e:	f000 8081 	beq.w	8004a64 <RCM_RegisterRegConv+0x1bc>
      RCM_handle_array [handle] = regConv;
 8004962:	4611      	mov	r1, r2
 8004964:	e001      	b.n	800496a <RCM_RegisterRegConv+0xc2>
    uint8_t i = 0;
 8004966:	2200      	movs	r2, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004968:	4611      	mov	r1, r2
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 800496a:	4d5d      	ldr	r5, [pc, #372]	@ (8004ae0 <RCM_RegisterRegConv+0x238>)
      RCM_handle_array [handle] = regConv;
 800496c:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
 8004970:	2400      	movs	r4, #0
 8004972:	46a6      	mov	lr, r4
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8004974:	f845 4031 	str.w	r4, [r5, r1, lsl #3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004978:	689c      	ldr	r4, [r3, #8]
 800497a:	f362 0e07 	bfi	lr, r2, #0, #8
 800497e:	07e6      	lsls	r6, r4, #31
 8004980:	f362 2e0f 	bfi	lr, r2, #8, #8
 8004984:	d422      	bmi.n	80049cc <RCM_RegisterRegConv+0x124>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004986:	685c      	ldr	r4, [r3, #4]
 8004988:	f024 0404 	bic.w	r4, r4, #4
 800498c:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800498e:	2404      	movs	r4, #4
 8004990:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8004992:	685c      	ldr	r4, [r3, #4]
 8004994:	f024 0420 	bic.w	r4, r4, #32
 8004998:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800499a:	2420      	movs	r4, #32
 800499c:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800499e:	689c      	ldr	r4, [r3, #8]
 80049a0:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 80049a4:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 80049a8:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80049ac:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80049ae:	689c      	ldr	r4, [r3, #8]
 80049b0:	2c00      	cmp	r4, #0
 80049b2:	dbfc      	blt.n	80049ae <RCM_RegisterRegConv+0x106>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80049b4:	681c      	ldr	r4, [r3, #0]
 80049b6:	07e5      	lsls	r5, r4, #31
 80049b8:	d408      	bmi.n	80049cc <RCM_RegisterRegConv+0x124>
  MODIFY_REG(ADCx->CR,
 80049ba:	4d4a      	ldr	r5, [pc, #296]	@ (8004ae4 <RCM_RegisterRegConv+0x23c>)
 80049bc:	689c      	ldr	r4, [r3, #8]
 80049be:	402c      	ands	r4, r5
 80049c0:	f044 0401 	orr.w	r4, r4, #1
 80049c4:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80049c6:	681c      	ldr	r4, [r3, #0]
 80049c8:	07e4      	lsls	r4, r4, #31
 80049ca:	d5f7      	bpl.n	80049bc <RCM_RegisterRegConv+0x114>
      RCM_NoInj_array[handle].enable = false;
 80049cc:	4d46      	ldr	r5, [pc, #280]	@ (8004ae8 <RCM_RegisterRegConv+0x240>)
 80049ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80049d2:	004c      	lsls	r4, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 80049d4:	1d2e      	adds	r6, r5, #4
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80049d6:	2101      	movs	r1, #1
      RCM_NoInj_array[handle].prev = handle;
 80049d8:	f826 e004 	strh.w	lr, [r6, r4]
      RCM_NoInj_array[handle].enable = false;
 80049dc:	f04f 0e00 	mov.w	lr, #0
 80049e0:	f805 e004 	strb.w	lr, [r5, r4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80049e4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80049e6:	fa01 f10c 	lsl.w	r1, r1, ip
 80049ea:	f024 040f 	bic.w	r4, r4, #15
 80049ee:	f1bc 0f09 	cmp.w	ip, #9
 80049f2:	631c      	str	r4, [r3, #48]	@ 0x30
 80049f4:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 80049f8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80049fc:	d81f      	bhi.n	8004a3e <RCM_RegisterRegConv+0x196>
 80049fe:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a02:	0dcd      	lsrs	r5, r1, #23
 8004a04:	f005 0504 	and.w	r5, r5, #4
 8004a08:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8004a0a:	6886      	ldr	r6, [r0, #8]
 8004a0c:	595c      	ldr	r4, [r3, r5]
 8004a0e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8004a12:	f04f 0e07 	mov.w	lr, #7
 8004a16:	fa06 fc01 	lsl.w	ip, r6, r1
 8004a1a:	fa0e f101 	lsl.w	r1, lr, r1
 8004a1e:	ea24 0101 	bic.w	r1, r4, r1
 8004a22:	ea41 010c 	orr.w	r1, r1, ip
 8004a26:	5159      	str	r1, [r3, r5]
  regConv->convHandle = handle;
 8004a28:	7302      	strb	r2, [r0, #12]
}
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a2e:	68e2      	ldr	r2, [r4, #12]
 8004a30:	b112      	cbz	r2, 8004a38 <RCM_RegisterRegConv+0x190>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a32:	7911      	ldrb	r1, [r2, #4]
 8004a34:	4561      	cmp	r1, ip
 8004a36:	d03e      	beq.n	8004ab6 <RCM_RegisterRegConv+0x20e>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a38:	2202      	movs	r2, #2
      RCM_handle_array [handle] = regConv;
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	e795      	b.n	800496a <RCM_RegisterRegConv+0xc2>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004a3e:	3c1e      	subs	r4, #30
 8004a40:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8004a44:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8004a48:	e7db      	b.n	8004a02 <RCM_RegisterRegConv+0x15a>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004a4e:	6829      	ldr	r1, [r5, #0]
 8004a50:	4299      	cmp	r1, r3
 8004a52:	f47f af43 	bne.w	80048dc <RCM_RegisterRegConv+0x34>
      i++;
 8004a56:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a58:	4611      	mov	r1, r2
 8004a5a:	e786      	b.n	800496a <RCM_RegisterRegConv+0xc2>
 8004a5c:	2a04      	cmp	r2, #4
 8004a5e:	6803      	ldr	r3, [r0, #0]
 8004a60:	f67f af7f 	bls.w	8004962 <RCM_RegisterRegConv+0xba>
 8004a64:	2203      	movs	r2, #3
      RCM_handle_array [handle] = regConv;
 8004a66:	4611      	mov	r1, r2
 8004a68:	e77f      	b.n	800496a <RCM_RegisterRegConv+0xc2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a6a:	68a5      	ldr	r5, [r4, #8]
 8004a6c:	b1cd      	cbz	r5, 8004aa2 <RCM_RegisterRegConv+0x1fa>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a6e:	2201      	movs	r2, #1
 8004a70:	e730      	b.n	80048d4 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a72:	68a5      	ldr	r5, [r4, #8]
 8004a74:	b1d5      	cbz	r5, 8004aac <RCM_RegisterRegConv+0x204>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a76:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004a7a:	792b      	ldrb	r3, [r5, #4]
 8004a7c:	4563      	cmp	r3, ip
 8004a7e:	d0e4      	beq.n	8004a4a <RCM_RegisterRegConv+0x1a2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a80:	68e5      	ldr	r5, [r4, #12]
 8004a82:	b155      	cbz	r5, 8004a9a <RCM_RegisterRegConv+0x1f2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a84:	460a      	mov	r2, r1
 8004a86:	e72d      	b.n	80048e4 <RCM_RegisterRegConv+0x3c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004a88:	6829      	ldr	r1, [r5, #0]
 8004a8a:	6803      	ldr	r3, [r0, #0]
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	f47f af2d 	bne.w	80048ec <RCM_RegisterRegConv+0x44>
 8004a92:	e7e7      	b.n	8004a64 <RCM_RegisterRegConv+0x1bc>
      i++;
 8004a94:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a96:	4611      	mov	r1, r2
 8004a98:	e767      	b.n	800496a <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a9a:	462a      	mov	r2, r5
 8004a9c:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array [handle] = regConv;
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	e763      	b.n	800496a <RCM_RegisterRegConv+0xc2>
 8004aa2:	6803      	ldr	r3, [r0, #0]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	e753      	b.n	8004950 <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8004aa8:	22ff      	movs	r2, #255	@ 0xff
 8004aaa:	e747      	b.n	800493c <RCM_RegisterRegConv+0x94>
 8004aac:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004ab0:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	e74c      	b.n	8004950 <RCM_RegisterRegConv+0xa8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d0d3      	beq.n	8004a64 <RCM_RegisterRegConv+0x1bc>
 8004abc:	e7bc      	b.n	8004a38 <RCM_RegisterRegConv+0x190>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004abe:	68a5      	ldr	r5, [r4, #8]
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	d0ef      	beq.n	8004aa4 <RCM_RegisterRegConv+0x1fc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004ac4:	792a      	ldrb	r2, [r5, #4]
 8004ac6:	4562      	cmp	r2, ip
 8004ac8:	d006      	beq.n	8004ad8 <RCM_RegisterRegConv+0x230>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004aca:	68e5      	ldr	r5, [r4, #12]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004acc:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	f47f af08 	bne.w	80048e4 <RCM_RegisterRegConv+0x3c>
      RCM_handle_array [handle] = regConv;
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	e748      	b.n	800496a <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004ad8:	2201      	movs	r2, #1
 8004ada:	e7b8      	b.n	8004a4e <RCM_RegisterRegConv+0x1a6>
 8004adc:	20001f38 	.word	0x20001f38
 8004ae0:	20001f18 	.word	0x20001f18
 8004ae4:	7fffffc0 	.word	0x7fffffc0
 8004ae8:	20001f00 	.word	0x20001f00

08004aec <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8004aec:	b530      	push	{r4, r5, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8004aee:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8004af0:	4a5e      	ldr	r2, [pc, #376]	@ (8004c6c <RCM_ExecRegularConv+0x180>)
 8004af2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004af6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004afa:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d138      	bne.n	8004b74 <RCM_ExecRegularConv+0x88>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8004b02:	7811      	ldrb	r1, [r2, #0]
 8004b04:	b991      	cbnz	r1, 8004b2c <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8004b06:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8004b08:	7991      	ldrb	r1, [r2, #6]
 8004b0a:	2900      	cmp	r1, #0
 8004b0c:	d175      	bne.n	8004bfa <RCM_ExecRegularConv+0x10e>
 8004b0e:	7b11      	ldrb	r1, [r2, #12]
 8004b10:	2900      	cmp	r1, #0
 8004b12:	d177      	bne.n	8004c04 <RCM_ExecRegularConv+0x118>
 8004b14:	7c91      	ldrb	r1, [r2, #18]
 8004b16:	2900      	cmp	r1, #0
 8004b18:	f000 809a 	beq.w	8004c50 <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 8004b1c:	7dd1      	ldrb	r1, [r2, #23]
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	f240 80a0 	bls.w	8004c64 <RCM_ExecRegularConv+0x178>
 8004b24:	f04f 0e03 	mov.w	lr, #3
 8004b28:	4670      	mov	r0, lr
 8004b2a:	e003      	b.n	8004b34 <RCM_ExecRegularConv+0x48>
 8004b2c:	7951      	ldrb	r1, [r2, #5]
 8004b2e:	428b      	cmp	r3, r1
 8004b30:	d2ea      	bcs.n	8004b08 <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8004b32:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8004b34:	eb0c 0403 	add.w	r4, ip, r3
 8004b38:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8004b3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8004b40:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8004b42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8004b46:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8004b4a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004b4e:	4c48      	ldr	r4, [pc, #288]	@ (8004c70 <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8004b50:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8004b52:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004b56:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8004b58:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 8004b5a:	eb0c 0003 	add.w	r0, ip, r3
 8004b5e:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004b60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8004b64:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004b68:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004b6c:	7849      	ldrb	r1, [r1, #1]
 8004b6e:	42a9      	cmp	r1, r5
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8004b70:	bf18      	it	ne
 8004b72:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8004b74:	493f      	ldr	r1, [pc, #252]	@ (8004c74 <RCM_ExecRegularConv+0x188>)
 8004b76:	f891 10a0 	ldrb.w	r1, [r1, #160]	@ 0xa0
 8004b7a:	2900      	cmp	r1, #0
 8004b7c:	d138      	bne.n	8004bf0 <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004b7e:	493e      	ldr	r1, [pc, #248]	@ (8004c78 <RCM_ExecRegularConv+0x18c>)
 8004b80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004b84:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004b86:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004b88:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004b8a:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004b8c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004b90:	fa01 f104 	lsl.w	r1, r1, r4
 8004b94:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8004b98:	bf84      	itt	hi
 8004b9a:	3d1e      	subhi	r5, #30
 8004b9c:	ea41 5105 	orrhi.w	r1, r1, r5, lsl #20
  MODIFY_REG(*preg,
 8004ba0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004ba2:	bf94      	ite	ls
 8004ba4:	ea41 5105 	orrls.w	r1, r1, r5, lsl #20
 8004ba8:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8004bac:	0d09      	lsrs	r1, r1, #20
 8004bae:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8004bb2:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8004bb6:	4321      	orrs	r1, r4
 8004bb8:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8004bba:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8004bbc:	6881      	ldr	r1, [r0, #8]
 8004bbe:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004bc2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004bc6:	f041 0104 	orr.w	r1, r1, #4
 8004bca:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004bcc:	6801      	ldr	r1, [r0, #0]
 8004bce:	0749      	lsls	r1, r1, #29
 8004bd0:	d5fc      	bpl.n	8004bcc <RCM_ExecRegularConv+0xe0>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004bd2:	eb0c 0103 	add.w	r1, ip, r3
 8004bd6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004bda:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8004bdc:	4d24      	ldr	r5, [pc, #144]	@ (8004c70 <RCM_ExecRegularConv+0x184>)
 8004bde:	f891 e005 	ldrb.w	lr, [r1, #5]
 8004be2:	f885 e000 	strb.w	lr, [r5]
 8004be6:	f020 000f 	bic.w	r0, r0, #15
    RCM_NoInj_array[handle].status = valid;
 8004bea:	2402      	movs	r4, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004bec:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 8004bee:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8004bf0:	449c      	add	ip, r3
 8004bf2:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8004bf6:	8850      	ldrh	r0, [r2, #2]
 8004bf8:	bd30      	pop	{r4, r5, pc}
        if (RCM_NoInj_array[i].next > handle)
 8004bfa:	7ad1      	ldrb	r1, [r2, #11]
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	d31d      	bcc.n	8004c3c <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 8004c00:	7b11      	ldrb	r1, [r2, #12]
 8004c02:	b1f9      	cbz	r1, 8004c44 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 8004c04:	7c51      	ldrb	r1, [r2, #17]
 8004c06:	4299      	cmp	r1, r3
 8004c08:	d828      	bhi.n	8004c5c <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 8004c0a:	7c91      	ldrb	r1, [r2, #18]
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	d185      	bne.n	8004b1c <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8004c10:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004c12:	4608      	mov	r0, r1
 8004c14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8004c18:	eb0c 0403 	add.w	r4, ip, r3
 8004c1c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004c20:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8004c24:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004c26:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8004c28:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8004c2a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004c2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004c32:	4c0f      	ldr	r4, [pc, #60]	@ (8004c70 <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8004c34:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8004c36:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004c38:	7821      	ldrb	r1, [r4, #0]
 8004c3a:	e78e      	b.n	8004b5a <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004c3c:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8004c40:	4670      	mov	r0, lr
 8004c42:	e777      	b.n	8004b34 <RCM_ExecRegularConv+0x48>
 8004c44:	7c91      	ldrb	r1, [r2, #18]
 8004c46:	2900      	cmp	r1, #0
 8004c48:	f47f af68 	bne.w	8004b1c <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	e7e0      	b.n	8004c12 <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d0de      	beq.n	8004c12 <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8004c54:	4c06      	ldr	r4, [pc, #24]	@ (8004c70 <RCM_ExecRegularConv+0x184>)
 8004c56:	4619      	mov	r1, r3
 8004c58:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8004c5a:	e77e      	b.n	8004b5a <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004c5c:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8004c60:	4670      	mov	r0, lr
 8004c62:	e767      	b.n	8004b34 <RCM_ExecRegularConv+0x48>
 8004c64:	2003      	movs	r0, #3
          LastEnable = i;
 8004c66:	4601      	mov	r1, r0
 8004c68:	e7d4      	b.n	8004c14 <RCM_ExecRegularConv+0x128>
 8004c6a:	bf00      	nop
 8004c6c:	20001f00 	.word	0x20001f00
 8004c70:	20001efc 	.word	0x20001efc
 8004c74:	200001a4 	.word	0x200001a4
 8004c78:	20001f38 	.word	0x20001f38

08004c7c <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8004c7c:	4b14      	ldr	r3, [pc, #80]	@ (8004cd0 <RCM_ExecUserConv+0x54>)
{
 8004c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8004c82:	681c      	ldr	r4, [r3, #0]
 8004c84:	b124      	cbz	r4, 8004c90 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004c86:	4d13      	ldr	r5, [pc, #76]	@ (8004cd4 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8004c88:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004c8a:	782b      	ldrb	r3, [r5, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d001      	beq.n	8004c94 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8004c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7ff ff29 	bl	8004aec <RCM_ExecRegularConv>
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <RCM_ExecUserConv+0x5c>)
 8004c9c:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004cdc <RCM_ExecUserConv+0x60>)
 8004ca0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004ca4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004ca8:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	b10b      	cbz	r3, 8004cb2 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <RCM_ExecUserConv+0x64>)
 8004cb4:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8004cb8:	2f00      	cmp	r7, #0
 8004cba:	d0e9      	beq.n	8004c90 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004cbc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004cc8:	463b      	mov	r3, r7
}
 8004cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004cce:	4718      	bx	r3
 8004cd0:	20001ef4 	.word	0x20001ef4
 8004cd4:	20001ef8 	.word	0x20001ef8
 8004cd8:	20001efa 	.word	0x20001efa
 8004cdc:	20001f00 	.word	0x20001f00
 8004ce0:	20001f18 	.word	0x20001f18

08004ce4 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d60 <RCM_ExecNextConv+0x7c>)
 8004ce6:	491f      	ldr	r1, [pc, #124]	@ (8004d64 <RCM_ExecNextConv+0x80>)
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004cee:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8004cf2:	b3a3      	cbz	r3, 8004d5e <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d68 <RCM_ExecNextConv+0x84>)
{
 8004cf6:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfc:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004cfe:	2404      	movs	r4, #4
 8004d00:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004d02:	f893 c004 	ldrb.w	ip, [r3, #4]
 8004d06:	2301      	movs	r3, #1
 8004d08:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004d0c:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004d10:	fa03 f30c 	lsl.w	r3, r3, ip
 8004d14:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8004d18:	bf84      	itt	hi
 8004d1a:	3c1e      	subhi	r4, #30
 8004d1c:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8004d20:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004d24:	bf98      	it	ls
 8004d26:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004d2a:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004d2c:	bf88      	it	hi
 8004d2e:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8004d32:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004d34:	0d1b      	lsrs	r3, r3, #20
 8004d36:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004d3a:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	6303      	str	r3, [r0, #48]	@ 0x30
 8004d42:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8004d44:	6883      	ldr	r3, [r0, #8]
 8004d46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004d4a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8004d4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d52:	2401      	movs	r4, #1
 8004d54:	f043 0304 	orr.w	r3, r3, #4
 8004d58:	6083      	str	r3, [r0, #8]
 8004d5a:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8004d5c:	bd10      	pop	{r4, pc}
 8004d5e:	4770      	bx	lr
 8004d60:	20001efc 	.word	0x20001efc
 8004d64:	20001f00 	.word	0x20001f00
 8004d68:	20001f38 	.word	0x20001f38

08004d6c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8004d6c:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004d6e:	4812      	ldr	r0, [pc, #72]	@ (8004db8 <RCM_ReadOngoingConv+0x4c>)
 8004d70:	4a12      	ldr	r2, [pc, #72]	@ (8004dbc <RCM_ReadOngoingConv+0x50>)
 8004d72:	7803      	ldrb	r3, [r0, #0]
 8004d74:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004d78:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 8004d7c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004d80:	b16c      	cbz	r4, 8004d9e <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004d82:	4c0f      	ldr	r4, [pc, #60]	@ (8004dc0 <RCM_ReadOngoingConv+0x54>)
 8004d84:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8004d88:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	076d      	lsls	r5, r5, #29
 8004d8e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004d92:	d406      	bmi.n	8004da2 <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8004d94:	449c      	add	ip, r3
 8004d96:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8004d9a:	7953      	ldrb	r3, [r2, #5]
 8004d9c:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8004d9e:	bc30      	pop	{r4, r5}
 8004da0:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8004da2:	784d      	ldrb	r5, [r1, #1]
 8004da4:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 8004da8:	d0f4      	beq.n	8004d94 <RCM_ReadOngoingConv+0x28>
 8004daa:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8004dac:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8004db0:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 8004db2:	2402      	movs	r4, #2
 8004db4:	704c      	strb	r4, [r1, #1]
 8004db6:	e7ed      	b.n	8004d94 <RCM_ReadOngoingConv+0x28>
 8004db8:	20001efc 	.word	0x20001efc
 8004dbc:	20001f00 	.word	0x20001f00
 8004dc0:	20001f38 	.word	0x20001f38

08004dc4 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004dc4:	4b44      	ldr	r3, [pc, #272]	@ (8004ed8 <USART2_IRQHandler+0x114>)
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8004dca:	b510      	push	{r4, lr}
 8004dcc:	d509      	bpl.n	8004de2 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004dce:	4943      	ldr	r1, [pc, #268]	@ (8004edc <USART2_IRQHandler+0x118>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8004dd0:	4843      	ldr	r0, [pc, #268]	@ (8004ee0 <USART2_IRQHandler+0x11c>)
 8004dd2:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004dd4:	2440      	movs	r4, #64	@ 0x40
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	61ca      	str	r2, [r1, #28]
 8004ddc:	621c      	str	r4, [r3, #32]
 8004dde:	f7fc facd 	bl	800137c <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004de2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed8 <USART2_IRQHandler+0x114>)
 8004de4:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004de6:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004de8:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004dea:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004dec:	074c      	lsls	r4, r1, #29
 8004dee:	d56a      	bpl.n	8004ec6 <USART2_IRQHandler+0x102>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004df0:	07d8      	lsls	r0, r3, #31
 8004df2:	d51e      	bpl.n	8004e32 <USART2_IRQHandler+0x6e>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 8004df4:	4b38      	ldr	r3, [pc, #224]	@ (8004ed8 <USART2_IRQHandler+0x114>)
 8004df6:	220e      	movs	r2, #14
 8004df8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004dfe:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004e02:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004e0e:	e840 3100 	strex	r1, r3, [r0]
 8004e12:	2900      	cmp	r1, #0
 8004e14:	d1f3      	bne.n	8004dfe <USART2_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e1a:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004e22:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004e2a:	e840 3100 	strex	r1, r3, [r0]
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	d1f3      	bne.n	8004e1a <USART2_IRQHandler+0x56>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004e32:	4b29      	ldr	r3, [pc, #164]	@ (8004ed8 <USART2_IRQHandler+0x114>)
 8004e34:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004e36:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004e38:	06d2      	lsls	r2, r2, #27
 8004e3a:	d543      	bpl.n	8004ec4 <USART2_IRQHandler+0x100>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004e3c:	06db      	lsls	r3, r3, #27
 8004e3e:	d541      	bpl.n	8004ec4 <USART2_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e44:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004e48:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004e4c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004e54:	e840 3100 	strex	r1, r3, [r0]
 8004e58:	2900      	cmp	r1, #0
 8004e5a:	d1f3      	bne.n	8004e44 <USART2_IRQHandler+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e60:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004e64:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004e68:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004e70:	e840 3100 	strex	r1, r3, [r0]
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d1f3      	bne.n	8004e60 <USART2_IRQHandler+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e7c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004e80:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004e8c:	e840 3100 	strex	r1, r3, [r0]
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d1f3      	bne.n	8004e7c <USART2_IRQHandler+0xb8>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004e94:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <USART2_IRQHandler+0x114>)
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e9c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004eac:	e840 3100 	strex	r1, r3, [r0]
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	d1f3      	bne.n	8004e9c <USART2_IRQHandler+0xd8>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <USART2_IRQHandler+0x118>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 8004eb6:	480a      	ldr	r0, [pc, #40]	@ (8004ee0 <USART2_IRQHandler+0x11c>)
 8004eb8:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8004eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ebe:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 8004ec0:	f7fc bc52 	b.w	8001768 <ASPEP_HWReset>
}
 8004ec4:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004ec6:	07d9      	lsls	r1, r3, #31
 8004ec8:	d5b3      	bpl.n	8004e32 <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004eca:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004ece:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 8004ed2:	4302      	orrs	r2, r0
 8004ed4:	d18e      	bne.n	8004df4 <USART2_IRQHandler+0x30>
 8004ed6:	e7ac      	b.n	8004e32 <USART2_IRQHandler+0x6e>
 8004ed8:	40004400 	.word	0x40004400
 8004edc:	40020000 	.word	0x40020000
 8004ee0:	20000474 	.word	0x20000474

08004ee4 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8004ee4:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8004ee6:	f7fd fc1b 	bl	8002720 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8004eea:	e7fe      	b.n	8004eea <HardFault_Handler+0x6>

08004eec <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8004eec:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004eee:	4c0d      	ldr	r4, [pc, #52]	@ (8004f24 <SysTick_Handler+0x38>)
 8004ef0:	7823      	ldrb	r3, [r4, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d00f      	beq.n	8004f16 <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8004efa:	4a0b      	ldr	r2, [pc, #44]	@ (8004f28 <SysTick_Handler+0x3c>)
 8004efc:	7023      	strb	r3, [r4, #0]
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	079b      	lsls	r3, r3, #30
 8004f02:	d504      	bpl.n	8004f0e <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004f04:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8004f06:	4809      	ldr	r0, [pc, #36]	@ (8004f2c <SysTick_Handler+0x40>)
 8004f08:	6053      	str	r3, [r2, #4]
 8004f0a:	f7fc fbdd 	bl	80016c8 <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8004f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004f12:	f7fd bbbd 	b.w	8002690 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004f16:	f000 fc9d 	bl	8005854 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004f1a:	f001 fcc9 	bl	80068b0 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e7eb      	b.n	8004efa <SysTick_Handler+0xe>
 8004f22:	bf00      	nop
 8004f24:	200004fc 	.word	0x200004fc
 8004f28:	40020000 	.word	0x40020000
 8004f2c:	20000474 	.word	0x20000474

08004f30 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004f30:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <EXTI15_10_IRQHandler+0x14>)
 8004f32:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8004f34:	0552      	lsls	r2, r2, #21
 8004f36:	d400      	bmi.n	8004f3a <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8004f38:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004f3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f3e:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8004f40:	f7fd bbfc 	b.w	800273c <UI_HandleStartStopButton_cb>
 8004f44:	40010400 	.word	0x40010400

08004f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f48:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f84 <HAL_MspInit+0x3c>)
 8004f4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
{
 8004f52:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f54:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f58:	f002 0201 	and.w	r2, r2, #1
 8004f5c:	9200      	str	r2, [sp, #0]
 8004f5e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004f66:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004f70:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004f74:	f001 fc12 	bl	800679c <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f78:	b003      	add	sp, #12
 8004f7a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8004f7e:	f002 b9b9 	b.w	80072f4 <HAL_PWREx_DisableUCPDDeadBattery>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f8e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f90:	2244      	movs	r2, #68	@ 0x44
 8004f92:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f94:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004f98:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8004f9c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f9e:	f007 fc46 	bl	800c82e <memset>
  if(hadc->Instance==ADC1)
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fa8:	d004      	beq.n	8004fb4 <HAL_ADC_MspInit+0x2c>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8004faa:	4a43      	ldr	r2, [pc, #268]	@ (80050b8 <HAL_ADC_MspInit+0x130>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d046      	beq.n	800503e <HAL_ADC_MspInit+0xb6>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004fb0:	b01c      	add	sp, #112	@ 0x70
 8004fb2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004fb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fbc:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fbe:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004fc0:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fc2:	f002 fd53 	bl	8007a6c <HAL_RCCEx_PeriphCLKConfig>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d16a      	bne.n	80050a0 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004fca:	4a3c      	ldr	r2, [pc, #240]	@ (80050bc <HAL_ADC_MspInit+0x134>)
 8004fcc:	6813      	ldr	r3, [r2, #0]
 8004fce:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004fd0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004fd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004fd4:	d109      	bne.n	8004fea <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80050c0 <HAL_ADC_MspInit+0x138>)
 8004fd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fde:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fea:	4b35      	ldr	r3, [pc, #212]	@ (80050c0 <HAL_ADC_MspInit+0x138>)
 8004fec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004ff4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ff6:	f002 0201 	and.w	r2, r2, #1
 8004ffa:	9202      	str	r2, [sp, #8]
 8004ffc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005000:	f042 0202 	orr.w	r2, r2, #2
 8005004:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8005008:	2005      	movs	r0, #5
 800500a:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8005010:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005014:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005016:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005018:	a906      	add	r1, sp, #24
 800501a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005020:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005022:	f001 febf 	bl	8006da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8005026:	f244 0202 	movw	r2, #16386	@ 0x4002
 800502a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800502c:	4825      	ldr	r0, [pc, #148]	@ (80050c4 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005030:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8005032:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005036:	f001 feb5 	bl	8006da4 <HAL_GPIO_Init>
}
 800503a:	b01c      	add	sp, #112	@ 0x70
 800503c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800503e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8005042:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005046:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005048:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800504a:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800504c:	f002 fd0e 	bl	8007a6c <HAL_RCCEx_PeriphCLKConfig>
 8005050:	bb48      	cbnz	r0, 80050a6 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005052:	4a1a      	ldr	r2, [pc, #104]	@ (80050bc <HAL_ADC_MspInit+0x134>)
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005058:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800505a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800505c:	d109      	bne.n	8005072 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800505e:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <HAL_ADC_MspInit+0x138>)
 8005060:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005062:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005066:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005072:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <HAL_ADC_MspInit+0x138>)
 8005074:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800507c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 800507e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80050b0 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8005088:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508a:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 800508c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8005090:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005094:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005096:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8005098:	f001 fe84 	bl	8006da4 <HAL_GPIO_Init>
}
 800509c:	b01c      	add	sp, #112	@ 0x70
 800509e:	bd10      	pop	{r4, pc}
      Error_Handler();
 80050a0:	f7fc ffce 	bl	8002040 <Error_Handler>
 80050a4:	e791      	b.n	8004fca <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80050a6:	f7fc ffcb 	bl	8002040 <Error_Handler>
 80050aa:	e7d2      	b.n	8005052 <HAL_ADC_MspInit+0xca>
 80050ac:	f3af 8000 	nop.w
 80050b0:	00000040 	.word	0x00000040
 80050b4:	00000003 	.word	0x00000003
 80050b8:	50000100 	.word	0x50000100
 80050bc:	20001f48 	.word	0x20001f48
 80050c0:	40021000 	.word	0x40021000
 80050c4:	48000400 	.word	0x48000400

080050c8 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80050c8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80050ca:	6802      	ldr	r2, [r0, #0]
 80050cc:	4934      	ldr	r1, [pc, #208]	@ (80051a0 <HAL_COMP_MspInit+0xd8>)
{
 80050ce:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d0:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 80050d2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80050d8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80050dc:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 80050de:	d008      	beq.n	80050f2 <HAL_COMP_MspInit+0x2a>

    /* USER CODE BEGIN COMP1_MspInit 1 */

    /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 80050e0:	4b30      	ldr	r3, [pc, #192]	@ (80051a4 <HAL_COMP_MspInit+0xdc>)
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d01e      	beq.n	8005124 <HAL_COMP_MspInit+0x5c>

    /* USER CODE BEGIN COMP2_MspInit 1 */

    /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 80050e6:	4b30      	ldr	r3, [pc, #192]	@ (80051a8 <HAL_COMP_MspInit+0xe0>)
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d034      	beq.n	8005156 <HAL_COMP_MspInit+0x8e>
    /* USER CODE BEGIN COMP4_MspInit 1 */

    /* USER CODE END COMP4_MspInit 1 */
  }

}
 80050ec:	b00b      	add	sp, #44	@ 0x2c
 80050ee:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050f6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80050fa:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8005188 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800510e:	a904      	add	r1, sp, #16
 8005110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8005114:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005118:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800511a:	f001 fe43 	bl	8006da4 <HAL_GPIO_Init>
}
 800511e:	b00b      	add	sp, #44	@ 0x2c
 8005120:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005124:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8005128:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800512c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8005136:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8005190 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8005140:	a904      	add	r1, sp, #16
 8005142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8005146:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800514a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800514c:	f001 fe2a 	bl	8006da4 <HAL_GPIO_Init>
}
 8005150:	b00b      	add	sp, #44	@ 0x2c
 8005152:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005156:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800515a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800515e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8005160:	4812      	ldr	r0, [pc, #72]	@ (80051ac <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005162:	f042 0202 	orr.w	r2, r2, #2
 8005166:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800516a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8005198 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8005174:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8005176:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800517a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800517c:	f001 fe12 	bl	8006da4 <HAL_GPIO_Init>
}
 8005180:	b00b      	add	sp, #44	@ 0x2c
 8005182:	f85d fb04 	ldr.w	pc, [sp], #4
 8005186:	bf00      	nop
 8005188:	00000002 	.word	0x00000002
 800518c:	00000003 	.word	0x00000003
 8005190:	00000080 	.word	0x00000080
 8005194:	00000003 	.word	0x00000003
 8005198:	00000001 	.word	0x00000001
 800519c:	00000003 	.word	0x00000003
 80051a0:	40010200 	.word	0x40010200
 80051a4:	40010204 	.word	0x40010204
 80051a8:	4001020c 	.word	0x4001020c
 80051ac:	48000400 	.word	0x48000400

080051b0 <HAL_CORDIC_MspInit>:
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80051b0:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <HAL_CORDIC_MspInit+0x28>)
 80051b2:	6802      	ldr	r2, [r0, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d000      	beq.n	80051ba <HAL_CORDIC_MspInit+0xa>
 80051b8:	4770      	bx	lr
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80051ba:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 80051be:	f042 0208 	orr.w	r2, r2, #8
{
 80051c2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80051c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051c8:	649a      	str	r2, [r3, #72]	@ 0x48
 80051ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80051d4:	b002      	add	sp, #8
 80051d6:	4770      	bx	lr
 80051d8:	40020c00 	.word	0x40020c00

080051dc <HAL_DAC_MspInit>:
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <HAL_DAC_MspInit+0x2c>)
 80051de:	6802      	ldr	r2, [r0, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d000      	beq.n	80051e6 <HAL_DAC_MspInit+0xa>
 80051e4:	4770      	bx	lr
  {
    /* USER CODE BEGIN DAC3_MspInit 0 */

    /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80051e6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 80051ea:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 80051ee:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 80051f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051f2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80051f6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80051f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END DAC3_MspInit 1 */

  }

}
 8005202:	b002      	add	sp, #8
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	50001000 	.word	0x50001000
 800520c:	00000000 	.word	0x00000000

08005210 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005210:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8005212:	6802      	ldr	r2, [r0, #0]
 8005214:	4934      	ldr	r1, [pc, #208]	@ (80052e8 <HAL_OPAMP_MspInit+0xd8>)
{
 8005216:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005218:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800521a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005220:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005224:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8005226:	d008      	beq.n	800523a <HAL_OPAMP_MspInit+0x2a>

    /* USER CODE BEGIN OPAMP1_MspInit 1 */

    /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8005228:	4b30      	ldr	r3, [pc, #192]	@ (80052ec <HAL_OPAMP_MspInit+0xdc>)
 800522a:	429a      	cmp	r2, r3
 800522c:	d01e      	beq.n	800526c <HAL_OPAMP_MspInit+0x5c>

    /* USER CODE BEGIN OPAMP2_MspInit 1 */

    /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800522e:	4b30      	ldr	r3, [pc, #192]	@ (80052f0 <HAL_OPAMP_MspInit+0xe0>)
 8005230:	429a      	cmp	r2, r3
 8005232:	d033      	beq.n	800529c <HAL_OPAMP_MspInit+0x8c>
    /* USER CODE BEGIN OPAMP3_MspInit 1 */

    /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8005234:	b00b      	add	sp, #44	@ 0x2c
 8005236:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800523a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800523e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8005242:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80052d0 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005246:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800524e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005256:	a904      	add	r1, sp, #16
 8005258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800525c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005260:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005262:	f001 fd9f 	bl	8006da4 <HAL_GPIO_Init>
}
 8005266:	b00b      	add	sp, #44	@ 0x2c
 8005268:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800526c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8005270:	33fc      	adds	r3, #252	@ 0xfc
 8005272:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	64da      	str	r2, [r3, #76]	@ 0x4c
 800527a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800527c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80052d8 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005286:	a904      	add	r1, sp, #16
 8005288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800528c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005290:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005292:	f001 fd87 	bl	8006da4 <HAL_GPIO_Init>
}
 8005296:	b00b      	add	sp, #44	@ 0x2c
 8005298:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800529c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80052a0:	33f8      	adds	r3, #248	@ 0xf8
 80052a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a4:	4813      	ldr	r0, [pc, #76]	@ (80052f4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a6:	f042 0202 	orr.w	r2, r2, #2
 80052aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80052ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80052ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80052e0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80052ba:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052be:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c0:	f001 fd70 	bl	8006da4 <HAL_GPIO_Init>
}
 80052c4:	b00b      	add	sp, #44	@ 0x2c
 80052c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w
 80052d0:	0000000e 	.word	0x0000000e
 80052d4:	00000003 	.word	0x00000003
 80052d8:	000000e0 	.word	0x000000e0
 80052dc:	00000003 	.word	0x00000003
 80052e0:	00000007 	.word	0x00000007
 80052e4:	00000003 	.word	0x00000003
 80052e8:	40010300 	.word	0x40010300
 80052ec:	40010304 	.word	0x40010304
 80052f0:	40010308 	.word	0x40010308
 80052f4:	48000400 	.word	0x48000400

080052f8 <HAL_TIM_PWM_MspInit>:
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80052f8:	4b09      	ldr	r3, [pc, #36]	@ (8005320 <HAL_TIM_PWM_MspInit+0x28>)
 80052fa:	6802      	ldr	r2, [r0, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d000      	beq.n	8005302 <HAL_TIM_PWM_MspInit+0xa>
 8005300:	4770      	bx	lr
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005302:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 8005306:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005308:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800530a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800530e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800531a:	b002      	add	sp, #8
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00

08005324 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005324:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
 8005326:	6803      	ldr	r3, [r0, #0]
{
 8005328:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800532a:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM2)
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005330:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005334:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005338:	9406      	str	r4, [sp, #24]
  if(htim_base->Instance==TIM2)
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Base_MspInit+0x1c>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800533c:	b008      	add	sp, #32
 800533e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005340:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8005344:	4605      	mov	r5, r0
 8005346:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_tim2_ch1.Instance = DMA1_Channel3;
 8005348:	4e1c      	ldr	r6, [pc, #112]	@ (80053bc <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005350:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005352:	f002 0201 	and.w	r2, r2, #1
 8005356:	9200      	str	r2, [sp, #0]
 8005358:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800535a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = dshot_rx_Pin;
 800536a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800536e:	2302      	movs	r3, #2
 8005370:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(dshot_rx_GPIO_Port, &GPIO_InitStruct);
 8005374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005378:	2301      	movs	r3, #1
    HAL_GPIO_Init(dshot_rx_GPIO_Port, &GPIO_InitStruct);
 800537a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800537c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800537e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(dshot_rx_GPIO_Port, &GPIO_InitStruct);
 8005380:	f001 fd10 	bl	8006da4 <HAL_GPIO_Init>
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8005384:	4a0e      	ldr	r2, [pc, #56]	@ (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005386:	6234      	str	r4, [r6, #32]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8005388:	2338      	movs	r3, #56	@ 0x38
 800538a:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800538e:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005392:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005394:	e9c6 2304 	strd	r2, r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8005398:	4630      	mov	r0, r6
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800539a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800539e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80053a2:	e9c6 3406 	strd	r3, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80053a6:	f001 fb89 	bl	8006abc <HAL_DMA_Init>
 80053aa:	b918      	cbnz	r0, 80053b4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80053ac:	626e      	str	r6, [r5, #36]	@ 0x24
 80053ae:	62b5      	str	r5, [r6, #40]	@ 0x28
}
 80053b0:	b008      	add	sp, #32
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80053b4:	f7fc fe44 	bl	8002040 <Error_Handler>
 80053b8:	e7f8      	b.n	80053ac <HAL_TIM_Base_MspInit+0x88>
 80053ba:	bf00      	nop
 80053bc:	200008ec 	.word	0x200008ec
 80053c0:	40020030 	.word	0x40020030

080053c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80053c4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80053c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005474 <HAL_TIM_MspPostInit+0xb0>)
 80053c8:	6801      	ldr	r1, [r0, #0]
{
 80053ca:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053cc:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80053ce:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80053d4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80053d8:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 80053da:	d001      	beq.n	80053e0 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80053dc:	b00a      	add	sp, #40	@ 0x28
 80053de:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053e4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80053e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053ee:	f042 0204 	orr.w	r2, r2, #4
 80053f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80053f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053f6:	f002 0204 	and.w	r2, r2, #4
 80053fa:	9201      	str	r2, [sp, #4]
 80053fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005400:	f042 0202 	orr.w	r2, r2, #2
 8005404:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005408:	f002 0202 	and.w	r2, r2, #2
 800540c:	9202      	str	r2, [sp, #8]
 800540e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005410:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800541a:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800541c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8005420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005424:	2402      	movs	r4, #2
 8005426:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005428:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800542a:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800542c:	a904      	add	r1, sp, #16
 800542e:	4812      	ldr	r0, [pc, #72]	@ (8005478 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005430:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005432:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8005434:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8005438:	f001 fcb4 	bl	8006da4 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800543c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 800543e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005442:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8005444:	480d      	ldr	r0, [pc, #52]	@ (800547c <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005446:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8005448:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800544c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8005450:	f001 fca8 	bl	8006da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8005454:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005458:	2302      	movs	r3, #2
 800545a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005460:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8005466:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800546a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800546c:	f001 fc9a 	bl	8006da4 <HAL_GPIO_Init>
}
 8005470:	b00a      	add	sp, #40	@ 0x28
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	40012c00 	.word	0x40012c00
 8005478:	48000800 	.word	0x48000800
 800547c:	48000400 	.word	0x48000400

08005480 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4604      	mov	r4, r0
 8005484:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005486:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005488:	2244      	movs	r2, #68	@ 0x44
 800548a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800548c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005490:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005494:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005496:	f007 f9ca 	bl	800c82e <memset>
  if(huart->Instance==USART2)
 800549a:	4b35      	ldr	r3, [pc, #212]	@ (8005570 <HAL_UART_MspInit+0xf0>)
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d001      	beq.n	80054a6 <HAL_UART_MspInit+0x26>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80054a2:	b018      	add	sp, #96	@ 0x60
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80054a6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054a8:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80054aa:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054ac:	f002 fade 	bl	8007a6c <HAL_RCCEx_PeriphCLKConfig>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d14c      	bne.n	800554e <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005574 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b6:	4830      	ldr	r0, [pc, #192]	@ (8005578 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80054b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80054ba:	4e30      	ldr	r6, [pc, #192]	@ (800557c <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80054bc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80054c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80054c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80054c4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80054c8:	9200      	str	r2, [sp, #0]
 80054ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80054ce:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8005560 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d2:	f042 0202 	orr.w	r2, r2, #2
 80054d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80054d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80054da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80054de:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005568 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054ea:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ec:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80054f0:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f4:	f001 fc56 	bl	8006da4 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80054f8:	4921      	ldr	r1, [pc, #132]	@ (8005580 <HAL_UART_MspInit+0x100>)
 80054fa:	221a      	movs	r2, #26
 80054fc:	2300      	movs	r3, #0
 80054fe:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005502:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005504:	2280      	movs	r2, #128	@ 0x80
 8005506:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800550a:	e9c6 2304 	strd	r2, r3, [r6, #16]
 800550e:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8005512:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005514:	f001 fad2 	bl	8006abc <HAL_DMA_Init>
 8005518:	b9f8      	cbnz	r0, 800555a <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800551a:	4d1a      	ldr	r5, [pc, #104]	@ (8005584 <HAL_UART_MspInit+0x104>)
 800551c:	491a      	ldr	r1, [pc, #104]	@ (8005588 <HAL_UART_MspInit+0x108>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800551e:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005522:	221b      	movs	r2, #27
 8005524:	2300      	movs	r3, #0
 8005526:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800552a:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800552c:	2110      	movs	r1, #16
 800552e:	2280      	movs	r2, #128	@ 0x80
 8005530:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8005534:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8005538:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800553c:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800553e:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005540:	f001 fabc 	bl	8006abc <HAL_DMA_Init>
 8005544:	b930      	cbnz	r0, 8005554 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005546:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8005548:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800554a:	b018      	add	sp, #96	@ 0x60
 800554c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800554e:	f7fc fd77 	bl	8002040 <Error_Handler>
 8005552:	e7af      	b.n	80054b4 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8005554:	f7fc fd74 	bl	8002040 <Error_Handler>
 8005558:	e7f5      	b.n	8005546 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800555a:	f7fc fd71 	bl	8002040 <Error_Handler>
 800555e:	e7dc      	b.n	800551a <HAL_UART_MspInit+0x9a>
 8005560:	00000018 	.word	0x00000018
 8005564:	00000002 	.word	0x00000002
	...
 8005570:	40004400 	.word	0x40004400
 8005574:	40021000 	.word	0x40021000
 8005578:	48000400 	.word	0x48000400
 800557c:	200007f8 	.word	0x200007f8
 8005580:	40020008 	.word	0x40020008
 8005584:	20000798 	.word	0x20000798
 8005588:	4002001c 	.word	0x4002001c

0800558c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800558c:	4801      	ldr	r0, [pc, #4]	@ (8005594 <DMA1_Channel3_IRQHandler+0x8>)
 800558e:	f001 bbbb 	b.w	8006d08 <HAL_DMA_IRQHandler>
 8005592:	bf00      	nop
 8005594:	200008ec 	.word	0x200008ec

08005598 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8005598:	4b02      	ldr	r3, [pc, #8]	@ (80055a4 <ADC1_2_IRQHandler+0xc>)
 800559a:	2240      	movs	r2, #64	@ 0x40
 800559c:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 800559e:	f7fc bffb 	b.w	8002598 <TSK_HighFrequencyTask>
 80055a2:	bf00      	nop
 80055a4:	50000100 	.word	0x50000100

080055a8 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80055a8:	4b03      	ldr	r3, [pc, #12]	@ (80055b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80055aa:	4804      	ldr	r0, [pc, #16]	@ (80055bc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80055ac:	f06f 0201 	mvn.w	r2, #1
 80055b0:	611a      	str	r2, [r3, #16]
 80055b2:	f005 b953 	b.w	800a85c <R3_2_TIMx_UP_IRQHandler>
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	200001a4 	.word	0x200001a4

080055c0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80055c0:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80055c2:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	0612      	lsls	r2, r2, #24
 80055c8:	d505      	bpl.n	80055d6 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80055ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 80055ce:	480a      	ldr	r0, [pc, #40]	@ (80055f8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80055d0:	611a      	str	r2, [r3, #16]
 80055d2:	f7fe f861 	bl	8003698 <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80055d6:	4907      	ldr	r1, [pc, #28]	@ (80055f4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80055d8:	690b      	ldr	r3, [r1, #16]
 80055da:	05db      	lsls	r3, r3, #23
 80055dc:	d505      	bpl.n	80055ea <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80055de:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80055e2:	4805      	ldr	r0, [pc, #20]	@ (80055f8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80055e4:	610b      	str	r3, [r1, #16]
 80055e6:	f7fe f877 	bl	80036d8 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80055ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 80055ee:	f7fd b84f 	b.w	8002690 <MC_RunMotorControlTasks>
 80055f2:	bf00      	nop
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	200001a4 	.word	0x200001a4

080055fc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80055fc:	2001      	movs	r0, #1
 80055fe:	4770      	bx	lr

08005600 <_kill>:

int _kill(int pid, int sig)
{
 8005600:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005602:	f007 f967 	bl	800c8d4 <__errno>
 8005606:	2316      	movs	r3, #22
 8005608:	6003      	str	r3, [r0, #0]
  return -1;
}
 800560a:	f04f 30ff 	mov.w	r0, #4294967295
 800560e:	bd08      	pop	{r3, pc}

08005610 <_exit>:

void _exit (int status)
{
 8005610:	b508      	push	{r3, lr}
  errno = EINVAL;
 8005612:	f007 f95f 	bl	800c8d4 <__errno>
 8005616:	2316      	movs	r3, #22
 8005618:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800561a:	e7fe      	b.n	800561a <_exit+0xa>

0800561c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800561c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800561e:	1e16      	subs	r6, r2, #0
 8005620:	dd07      	ble.n	8005632 <_read+0x16>
 8005622:	460c      	mov	r4, r1
 8005624:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8005626:	f3af 8000 	nop.w
 800562a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800562e:	42a5      	cmp	r5, r4
 8005630:	d1f9      	bne.n	8005626 <_read+0xa>
  }

  return len;
}
 8005632:	4630      	mov	r0, r6
 8005634:	bd70      	pop	{r4, r5, r6, pc}
 8005636:	bf00      	nop

08005638 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005638:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800563a:	1e16      	subs	r6, r2, #0
 800563c:	dd07      	ble.n	800564e <_write+0x16>
 800563e:	460c      	mov	r4, r1
 8005640:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8005642:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005646:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800564a:	42a5      	cmp	r5, r4
 800564c:	d1f9      	bne.n	8005642 <_write+0xa>
  }
  return len;
}
 800564e:	4630      	mov	r0, r6
 8005650:	bd70      	pop	{r4, r5, r6, pc}
 8005652:	bf00      	nop

08005654 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop

0800565c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800565c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005660:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005662:	2000      	movs	r0, #0
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop

08005668 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005668:	2001      	movs	r0, #1
 800566a:	4770      	bx	lr

0800566c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800566c:	2000      	movs	r0, #0
 800566e:	4770      	bx	lr

08005670 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005670:	490c      	ldr	r1, [pc, #48]	@ (80056a4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005672:	4a0d      	ldr	r2, [pc, #52]	@ (80056a8 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8005674:	680b      	ldr	r3, [r1, #0]
{
 8005676:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005678:	4c0c      	ldr	r4, [pc, #48]	@ (80056ac <_sbrk+0x3c>)
 800567a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800567c:	b12b      	cbz	r3, 800568a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800567e:	4418      	add	r0, r3
 8005680:	4290      	cmp	r0, r2
 8005682:	d807      	bhi.n	8005694 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005684:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8005686:	4618      	mov	r0, r3
 8005688:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800568a:	4b09      	ldr	r3, [pc, #36]	@ (80056b0 <_sbrk+0x40>)
 800568c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800568e:	4418      	add	r0, r3
 8005690:	4290      	cmp	r0, r2
 8005692:	d9f7      	bls.n	8005684 <_sbrk+0x14>
    errno = ENOMEM;
 8005694:	f007 f91e 	bl	800c8d4 <__errno>
 8005698:	230c      	movs	r3, #12
 800569a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	20001f4c 	.word	0x20001f4c
 80056a8:	20008000 	.word	0x20008000
 80056ac:	00000400 	.word	0x00000400
 80056b0:	200020a8 	.word	0x200020a8

080056b4 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 80056b4:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 80056b6:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 80056b8:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80056c0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	e841 3400 	strex	r4, r3, [r1]
 80056c8:	2c00      	cmp	r4, #0
 80056ca:	d1f7      	bne.n	80056bc <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80056cc:	68c1      	ldr	r1, [r0, #12]
 80056ce:	4d19      	ldr	r5, [pc, #100]	@ (8005734 <UASPEP_INIT+0x80>)
 80056d0:	6843      	ldr	r3, [r0, #4]
 80056d2:	5c6c      	ldrb	r4, [r5, r1]
 80056d4:	4423      	add	r3, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80056d6:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 80056da:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80056dc:	2340      	movs	r3, #64	@ 0x40
 80056de:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 80056e0:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80056e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	e841 3400 	strex	r4, r3, [r1]
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	d1f7      	bne.n	80056e4 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80056f4:	2340      	movs	r3, #64	@ 0x40
 80056f6:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80056fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	e842 3100 	strex	r1, r3, [r2]
 8005704:	2900      	cmp	r1, #0
 8005706:	d1f7      	bne.n	80056f8 <UASPEP_INIT+0x44>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 8005708:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	e841 3400 	strex	r4, r3, [r1]
 8005718:	2c00      	cmp	r4, #0
 800571a:	d1f7      	bne.n	800570c <UASPEP_INIT+0x58>
 800571c:	6901      	ldr	r1, [r0, #16]
 800571e:	6883      	ldr	r3, [r0, #8]
 8005720:	5c69      	ldrb	r1, [r5, r1]
 8005722:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8005724:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005728:	2140      	movs	r1, #64	@ 0x40
 800572a:	6098      	str	r0, [r3, #8]
}
 800572c:	bc30      	pop	{r4, r5}
 800572e:	6211      	str	r1, [r2, #32]
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	080102f0 	.word	0x080102f0

08005738 <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005738:	6903      	ldr	r3, [r0, #16]
 800573a:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 800573c:	b410      	push	{r4}
 800573e:	4c0b      	ldr	r4, [pc, #44]	@ (800576c <UASPEP_CFG_TRANSMISSION+0x34>)
 8005740:	5ce3      	ldrb	r3, [r4, r3]
 8005742:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005744:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005746:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 800574a:	d40c      	bmi.n	8005766 <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800574c:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8005750:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005754:	f36f 010f 	bfc	r1, #0, #16
 8005758:	430a      	orrs	r2, r1
 800575a:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800575e:	58c2      	ldr	r2, [r0, r3]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 8005766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	080102f0 	.word	0x080102f0

08005770 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 8005770:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8005772:	68c3      	ldr	r3, [r0, #12]
 8005774:	4c0c      	ldr	r4, [pc, #48]	@ (80057a8 <UASPEP_CFG_RECEPTION+0x38>)
 8005776:	6840      	ldr	r0, [r0, #4]
 8005778:	5ce3      	ldrb	r3, [r4, r3]
 800577a:	58c4      	ldr	r4, [r0, r3]
 800577c:	eb00 0c03 	add.w	ip, r0, r3
 8005780:	f024 0401 	bic.w	r4, r4, #1
 8005784:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8005786:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800578a:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800578e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005792:	f36f 010f 	bfc	r1, #0, #16
 8005796:	4311      	orrs	r1, r2
 8005798:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800579c:	58c2      	ldr	r2, [r0, r3]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	50c2      	str	r2, [r0, r3]
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	080102f0 	.word	0x080102f0

080057ac <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 80057ac:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80057ae:	2310      	movs	r3, #16
 80057b0:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80057b6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	e842 3100 	strex	r1, r3, [r2]
 80057be:	2900      	cmp	r1, #0
 80057c0:	d1f7      	bne.n	80057b2 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 80057c2:	4770      	bx	lr

080057c4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80057c4:	4a03      	ldr	r2, [pc, #12]	@ (80057d4 <SystemInit+0x10>)
 80057c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80057ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057d2:	4770      	bx	lr
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80057da:	4b0f      	ldr	r3, [pc, #60]	@ (8005818 <HAL_InitTick+0x40>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	b90b      	cbnz	r3, 80057e4 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80057e0:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80057e4:	490d      	ldr	r1, [pc, #52]	@ (800581c <HAL_InitTick+0x44>)
 80057e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057ea:	4605      	mov	r5, r0
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	6808      	ldr	r0, [r1, #0]
 80057f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80057f6:	f001 f83f 	bl	8006878 <HAL_SYSTICK_Config>
 80057fa:	4604      	mov	r4, r0
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1ef      	bne.n	80057e0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005800:	2d0f      	cmp	r5, #15
 8005802:	d8ed      	bhi.n	80057e0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005804:	4602      	mov	r2, r0
 8005806:	4629      	mov	r1, r5
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	f000 ffd8 	bl	80067c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <HAL_InitTick+0x48>)
 8005812:	4620      	mov	r0, r4
 8005814:	601d      	str	r5, [r3, #0]
}
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	20000504 	.word	0x20000504
 800581c:	20000500 	.word	0x20000500
 8005820:	20000508 	.word	0x20000508

08005824 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005824:	4a0a      	ldr	r2, [pc, #40]	@ (8005850 <HAL_Init+0x2c>)
 8005826:	6813      	ldr	r3, [r2, #0]
 8005828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 800582c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800582e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005830:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005832:	f000 ffb3 	bl	800679c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005836:	2004      	movs	r0, #4
 8005838:	f7ff ffce 	bl	80057d8 <HAL_InitTick>
 800583c:	b110      	cbz	r0, 8005844 <HAL_Init+0x20>
    status = HAL_ERROR;
 800583e:	2401      	movs	r4, #1
}
 8005840:	4620      	mov	r0, r4
 8005842:	bd10      	pop	{r4, pc}
 8005844:	4604      	mov	r4, r0
    HAL_MspInit();
 8005846:	f7ff fb7f 	bl	8004f48 <HAL_MspInit>
}
 800584a:	4620      	mov	r0, r4
 800584c:	bd10      	pop	{r4, pc}
 800584e:	bf00      	nop
 8005850:	40022000 	.word	0x40022000

08005854 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005854:	4a03      	ldr	r2, [pc, #12]	@ (8005864 <HAL_IncTick+0x10>)
 8005856:	4904      	ldr	r1, [pc, #16]	@ (8005868 <HAL_IncTick+0x14>)
 8005858:	6813      	ldr	r3, [r2, #0]
 800585a:	6809      	ldr	r1, [r1, #0]
 800585c:	440b      	add	r3, r1
 800585e:	6013      	str	r3, [r2, #0]
}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20001f50 	.word	0x20001f50
 8005868:	20000504 	.word	0x20000504

0800586c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800586c:	4b01      	ldr	r3, [pc, #4]	@ (8005874 <HAL_GetTick+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
}
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20001f50 	.word	0x20001f50

08005878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800587c:	f7ff fff6 	bl	800586c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005880:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005882:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005884:	d002      	beq.n	800588c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005886:	4b04      	ldr	r3, [pc, #16]	@ (8005898 <HAL_Delay+0x20>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800588c:	f7ff ffee 	bl	800586c <HAL_GetTick>
 8005890:	1b40      	subs	r0, r0, r5
 8005892:	42a0      	cmp	r0, r4
 8005894:	d3fa      	bcc.n	800588c <HAL_Delay+0x14>
  {
  }
}
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20000504 	.word	0x20000504

0800589c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800589c:	b530      	push	{r4, r5, lr}
 800589e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f000 80aa 	beq.w	80059fe <HAL_ADC_Init+0x162>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80058aa:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80058ac:	4604      	mov	r4, r0
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	f000 80aa 	beq.w	8005a08 <HAL_ADC_Init+0x16c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80058b4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80058b6:	6893      	ldr	r3, [r2, #8]
 80058b8:	009d      	lsls	r5, r3, #2
 80058ba:	d505      	bpl.n	80058c8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80058bc:	6893      	ldr	r3, [r2, #8]
 80058be:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80058c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058c6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80058c8:	6893      	ldr	r3, [r2, #8]
 80058ca:	00d8      	lsls	r0, r3, #3
 80058cc:	d419      	bmi.n	8005902 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058ce:	4b68      	ldr	r3, [pc, #416]	@ (8005a70 <HAL_ADC_Init+0x1d4>)
 80058d0:	4868      	ldr	r0, [pc, #416]	@ (8005a74 <HAL_ADC_Init+0x1d8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80058d4:	6891      	ldr	r1, [r2, #8]
 80058d6:	099b      	lsrs	r3, r3, #6
 80058d8:	fba0 0303 	umull	r0, r3, r0, r3
 80058dc:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80058e0:	099b      	lsrs	r3, r3, #6
 80058e2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80058e6:	3301      	adds	r3, #1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80058ee:	6091      	str	r1, [r2, #8]
 80058f0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	b12b      	cbz	r3, 8005902 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80058f6:	9b01      	ldr	r3, [sp, #4]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80058fc:	9b01      	ldr	r3, [sp, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f9      	bne.n	80058f6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005902:	6893      	ldr	r3, [r2, #8]
 8005904:	00d9      	lsls	r1, r3, #3
 8005906:	d47d      	bmi.n	8005a04 <HAL_ADC_Init+0x168>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005908:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800590a:	f043 0310 	orr.w	r3, r3, #16
 800590e:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005910:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005912:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005914:	4303      	orrs	r3, r0
 8005916:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005918:	6893      	ldr	r3, [r2, #8]
 800591a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800591e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005920:	d169      	bne.n	80059f6 <HAL_ADC_Init+0x15a>
 8005922:	06db      	lsls	r3, r3, #27
 8005924:	d467      	bmi.n	80059f6 <HAL_ADC_Init+0x15a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005926:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005928:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800592c:	f043 0302 	orr.w	r3, r3, #2
 8005930:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005932:	6893      	ldr	r3, [r2, #8]
 8005934:	07dd      	lsls	r5, r3, #31
 8005936:	d409      	bmi.n	800594c <HAL_ADC_Init+0xb0>
 8005938:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f013 0f01 	tst.w	r3, #1
 8005942:	4b4d      	ldr	r3, [pc, #308]	@ (8005a78 <HAL_ADC_Init+0x1dc>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	d101      	bne.n	800594c <HAL_ADC_Init+0xb0>
 8005948:	07d9      	lsls	r1, r3, #31
 800594a:	d57a      	bpl.n	8005a42 <HAL_ADC_Init+0x1a6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 800594c:	68e5      	ldr	r5, [r4, #12]
 800594e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005950:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8005954:	432b      	orrs	r3, r5
 8005956:	68a5      	ldr	r5, [r4, #8]
 8005958:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800595a:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800595c:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 800595e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005962:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005966:	d055      	beq.n	8005a14 <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005968:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800596a:	b121      	cbz	r1, 8005976 <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 800596c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800596e:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005972:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005974:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005976:	68d5      	ldr	r5, [r2, #12]
 8005978:	4940      	ldr	r1, [pc, #256]	@ (8005a7c <HAL_ADC_Init+0x1e0>)
 800597a:	4029      	ands	r1, r5
 800597c:	4319      	orrs	r1, r3
 800597e:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005980:	6913      	ldr	r3, [r2, #16]
 8005982:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005984:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005988:	430b      	orrs	r3, r1
 800598a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800598c:	6893      	ldr	r3, [r2, #8]
 800598e:	071b      	lsls	r3, r3, #28
 8005990:	d422      	bmi.n	80059d8 <HAL_ADC_Init+0x13c>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005992:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005994:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005998:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800599a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800599e:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80059a0:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80059a4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80059a8:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 80059aa:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80059ac:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80059ae:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d03c      	beq.n	8005a2e <HAL_ADC_Init+0x192>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80059ba:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80059be:	f36f 030d 	bfc	r3, #0, #14
 80059c2:	430b      	orrs	r3, r1
 80059c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80059c8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d040      	beq.n	8005a52 <HAL_ADC_Init+0x1b6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059d0:	6913      	ldr	r3, [r2, #16]
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059d8:	6963      	ldr	r3, [r4, #20]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d01f      	beq.n	8005a1e <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059de:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80059e0:	f023 030f 	bic.w	r3, r3, #15
 80059e4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059e6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80059f2:	b003      	add	sp, #12
 80059f4:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059f6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80059f8:	f043 0310 	orr.w	r3, r3, #16
 80059fc:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80059fe:	2001      	movs	r0, #1
}
 8005a00:	b003      	add	sp, #12
 8005a02:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a04:	2000      	movs	r0, #0
 8005a06:	e787      	b.n	8005918 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8005a08:	f7ff fabe 	bl	8004f88 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005a0c:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8005a0e:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8005a12:	e74f      	b.n	80058b4 <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005a14:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005a16:	3901      	subs	r1, #1
 8005a18:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005a1c:	e7a4      	b.n	8005968 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a1e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005a20:	6a23      	ldr	r3, [r4, #32]
 8005a22:	f021 010f 	bic.w	r1, r1, #15
 8005a26:	3b01      	subs	r3, #1
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a2c:	e7db      	b.n	80059e6 <HAL_ADC_Init+0x14a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a32:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005a34:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005a38:	f36f 030d 	bfc	r3, #0, #14
 8005a3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005a40:	e7c2      	b.n	80059c8 <HAL_ADC_Init+0x12c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a42:	490f      	ldr	r1, [pc, #60]	@ (8005a80 <HAL_ADC_Init+0x1e4>)
 8005a44:	6865      	ldr	r5, [r4, #4]
 8005a46:	688b      	ldr	r3, [r1, #8]
 8005a48:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005a4c:	432b      	orrs	r3, r5
 8005a4e:	608b      	str	r3, [r1, #8]
}
 8005a50:	e77c      	b.n	800594c <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a52:	6911      	ldr	r1, [r2, #16]
 8005a54:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005a56:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8005a58:	f36f 018a 	bfc	r1, #2, #9
 8005a5c:	432b      	orrs	r3, r5
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005a62:	430b      	orrs	r3, r1
 8005a64:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005a66:	430b      	orrs	r3, r1
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	6113      	str	r3, [r2, #16]
 8005a6e:	e7b3      	b.n	80059d8 <HAL_ADC_Init+0x13c>
 8005a70:	20000500 	.word	0x20000500
 8005a74:	053e2d63 	.word	0x053e2d63
 8005a78:	50000100 	.word	0x50000100
 8005a7c:	fff04007 	.word	0xfff04007
 8005a80:	50000300 	.word	0x50000300

08005a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a88:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005a90:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005a98:	f000 812d 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x272>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a9c:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005aa4:	6894      	ldr	r4, [r2, #8]
 8005aa6:	0764      	lsls	r4, r4, #29
 8005aa8:	d455      	bmi.n	8005b56 <HAL_ADC_ConfigChannel+0xd2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005aaa:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005aac:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005ab0:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005ab4:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8005ab8:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005aba:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8005abe:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005ac2:	f854 500e 	ldr.w	r5, [r4, lr]
 8005ac6:	261f      	movs	r6, #31
 8005ac8:	fa00 f00c 	lsl.w	r0, r0, ip
 8005acc:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005ad0:	ea25 0c0c 	bic.w	ip, r5, ip
 8005ad4:	ea40 000c 	orr.w	r0, r0, ip
 8005ad8:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005adc:	6890      	ldr	r0, [r2, #8]
 8005ade:	0747      	lsls	r7, r0, #29
 8005ae0:	d543      	bpl.n	8005b6a <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ae2:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005ae4:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ae6:	6894      	ldr	r4, [r2, #8]
 8005ae8:	07e5      	lsls	r5, r4, #31
 8005aea:	d412      	bmi.n	8005b12 <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005aec:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005aee:	4cb0      	ldr	r4, [pc, #704]	@ (8005db0 <HAL_ADC_ConfigChannel+0x32c>)
 8005af0:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8005af4:	f006 0718 	and.w	r7, r6, #24
 8005af8:	40fc      	lsrs	r4, r7
 8005afa:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8005afe:	4004      	ands	r4, r0
 8005b00:	ea25 0507 	bic.w	r5, r5, r7
 8005b04:	432c      	orrs	r4, r5
 8005b06:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b0a:	4caa      	ldr	r4, [pc, #680]	@ (8005db4 <HAL_ADC_ConfigChannel+0x330>)
 8005b0c:	42a6      	cmp	r6, r4
 8005b0e:	f000 80a2 	beq.w	8005c56 <HAL_ADC_ConfigChannel+0x1d2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005b12:	49a9      	ldr	r1, [pc, #676]	@ (8005db8 <HAL_ADC_ConfigChannel+0x334>)
 8005b14:	4208      	tst	r0, r1
 8005b16:	d01c      	beq.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005b18:	4ca8      	ldr	r4, [pc, #672]	@ (8005dbc <HAL_ADC_ConfigChannel+0x338>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b1a:	4da9      	ldr	r5, [pc, #676]	@ (8005dc0 <HAL_ADC_ConfigChannel+0x33c>)
 8005b1c:	68a1      	ldr	r1, [r4, #8]
 8005b1e:	42a8      	cmp	r0, r5
 8005b20:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8005b24:	d074      	beq.n	8005c10 <HAL_ADC_ConfigChannel+0x18c>
 8005b26:	4da7      	ldr	r5, [pc, #668]	@ (8005dc4 <HAL_ADC_ConfigChannel+0x340>)
 8005b28:	42a8      	cmp	r0, r5
 8005b2a:	d071      	beq.n	8005c10 <HAL_ADC_ConfigChannel+0x18c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005b2c:	4da6      	ldr	r5, [pc, #664]	@ (8005dc8 <HAL_ADC_ConfigChannel+0x344>)
 8005b2e:	42a8      	cmp	r0, r5
 8005b30:	f000 80e5 	beq.w	8005cfe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b34:	4da5      	ldr	r5, [pc, #660]	@ (8005dcc <HAL_ADC_ConfigChannel+0x348>)
 8005b36:	42a8      	cmp	r0, r5
 8005b38:	d10b      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b3a:	0249      	lsls	r1, r1, #9
 8005b3c:	d409      	bmi.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005b3e:	49a4      	ldr	r1, [pc, #656]	@ (8005dd0 <HAL_ADC_ConfigChannel+0x34c>)
 8005b40:	428a      	cmp	r2, r1
 8005b42:	d006      	beq.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b44:	68a2      	ldr	r2, [r4, #8]
 8005b46:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005b4a:	4332      	orrs	r2, r6
 8005b4c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8005b50:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b52:	2000      	movs	r0, #0
 8005b54:	e003      	b.n	8005b5e <HAL_ADC_ConfigChannel+0xda>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b58:	f042 0220 	orr.w	r2, r2, #32
 8005b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005b64:	b002      	add	sp, #8
 8005b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b6a:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005b6c:	6808      	ldr	r0, [r1, #0]
 8005b6e:	0726      	lsls	r6, r4, #28
 8005b70:	d4b9      	bmi.n	8005ae6 <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b72:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8005b74:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8005b78:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005b7a:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8005b7c:	40b4      	lsls	r4, r6
 8005b7e:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005b82:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8005b86:	ea6f 0404 	mvn.w	r4, r4
 8005b8a:	f000 8107 	beq.w	8005d9c <HAL_ADC_ConfigChannel+0x318>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005b8e:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8005b92:	40b5      	lsls	r5, r6
 8005b94:	583e      	ldr	r6, [r7, r0]
 8005b96:	4034      	ands	r4, r6
 8005b98:	432c      	orrs	r4, r5
 8005b9a:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005b9c:	6950      	ldr	r0, [r2, #20]
 8005b9e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005ba2:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005ba4:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005ba8:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005baa:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005bac:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005bae:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005bb0:	f000 80c8 	beq.w	8005d44 <HAL_ADC_ConfigChannel+0x2c0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005bb4:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8005bb8:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8005bba:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 8005bbe:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bc2:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8005bc6:	4d83      	ldr	r5, [pc, #524]	@ (8005dd4 <HAL_ADC_ConfigChannel+0x350>)
 8005bc8:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 8005bcc:	ea0c 0505 	and.w	r5, ip, r5
 8005bd0:	433d      	orrs	r5, r7
 8005bd2:	4328      	orrs	r0, r5
 8005bd4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005bd8:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bdc:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8005bde:	698e      	ldr	r6, [r1, #24]
 8005be0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8005be4:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8005be8:	4330      	orrs	r0, r6
 8005bea:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bee:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005bf0:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8005bf2:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005bf6:	f1a5 0501 	sub.w	r5, r5, #1
 8005bfa:	fab5 f585 	clz	r5, r5
 8005bfe:	096d      	lsrs	r5, r5, #5
 8005c00:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8005c04:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8005c08:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005c0c:	6808      	ldr	r0, [r1, #0]
}
 8005c0e:	e76a      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c10:	020c      	lsls	r4, r1, #8
 8005c12:	d49e      	bmi.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c14:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005c18:	d19b      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c1a:	4968      	ldr	r1, [pc, #416]	@ (8005dbc <HAL_ADC_ConfigChannel+0x338>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c1c:	486e      	ldr	r0, [pc, #440]	@ (8005dd8 <HAL_ADC_ConfigChannel+0x354>)
 8005c1e:	688a      	ldr	r2, [r1, #8]
 8005c20:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005c24:	4332      	orrs	r2, r6
 8005c26:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005c2a:	608a      	str	r2, [r1, #8]
 8005c2c:	6802      	ldr	r2, [r0, #0]
 8005c2e:	496b      	ldr	r1, [pc, #428]	@ (8005ddc <HAL_ADC_ConfigChannel+0x358>)
 8005c30:	0992      	lsrs	r2, r2, #6
 8005c32:	fba1 1202 	umull	r1, r2, r1, r2
 8005c36:	0992      	lsrs	r2, r2, #6
 8005c38:	3201      	adds	r2, #1
 8005c3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005c3e:	0092      	lsls	r2, r2, #2
 8005c40:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005c42:	9a01      	ldr	r2, [sp, #4]
 8005c44:	2a00      	cmp	r2, #0
 8005c46:	d084      	beq.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8005c48:	9a01      	ldr	r2, [sp, #4]
 8005c4a:	3a01      	subs	r2, #1
 8005c4c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005c4e:	9a01      	ldr	r2, [sp, #4]
 8005c50:	2a00      	cmp	r2, #0
 8005c52:	d1f9      	bne.n	8005c48 <HAL_ADC_ConfigChannel+0x1c4>
 8005c54:	e77d      	b.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005c56:	2f00      	cmp	r7, #0
 8005c58:	d060      	beq.n	8005d1c <HAL_ADC_ConfigChannel+0x298>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	f000 80be 	beq.w	8005de0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005c64:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c68:	3401      	adds	r4, #1
 8005c6a:	f004 041f 	and.w	r4, r4, #31
 8005c6e:	2c09      	cmp	r4, #9
 8005c70:	f240 80b6 	bls.w	8005de0 <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c74:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005c78:	2c00      	cmp	r4, #0
 8005c7a:	f000 8157 	beq.w	8005f2c <HAL_ADC_ConfigChannel+0x4a8>
  return __builtin_clz(value);
 8005c7e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005c82:	3401      	adds	r4, #1
 8005c84:	06a4      	lsls	r4, r4, #26
 8005c86:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	f000 8156 	beq.w	8005f40 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8005c94:	fab5 f585 	clz	r5, r5
 8005c98:	3501      	adds	r5, #1
 8005c9a:	f005 051f 	and.w	r5, r5, #31
 8005c9e:	2601      	movs	r6, #1
 8005ca0:	fa06 f505 	lsl.w	r5, r6, r5
 8005ca4:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f000 8146 	beq.w	8005f3c <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 8005cb0:	fab0 f080 	clz	r0, r0
 8005cb4:	1c45      	adds	r5, r0, #1
 8005cb6:	f005 051f 	and.w	r5, r5, #31
 8005cba:	2003      	movs	r0, #3
 8005cbc:	f06f 061d 	mvn.w	r6, #29
 8005cc0:	fb10 6005 	smlabb	r0, r0, r5, r6
 8005cc4:	0500      	lsls	r0, r0, #20
 8005cc6:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cca:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005ccc:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8005cce:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005cd0:	f005 0504 	and.w	r5, r5, #4
 8005cd4:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005cd8:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005cdc:	fa04 f700 	lsl.w	r7, r4, r0
 8005ce0:	f04f 0c07 	mov.w	ip, #7
 8005ce4:	5974      	ldr	r4, [r6, r5]
 8005ce6:	fa0c f000 	lsl.w	r0, ip, r0
 8005cea:	ea24 0000 	bic.w	r0, r4, r0
 8005cee:	4338      	orrs	r0, r7
 8005cf0:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005cf2:	6808      	ldr	r0, [r1, #0]
}
 8005cf4:	e70d      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8005cf6:	2002      	movs	r0, #2
}
 8005cf8:	b002      	add	sp, #8
 8005cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cfe:	01c8      	lsls	r0, r1, #7
 8005d00:	f53f af27 	bmi.w	8005b52 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d04:	4932      	ldr	r1, [pc, #200]	@ (8005dd0 <HAL_ADC_ConfigChannel+0x34c>)
 8005d06:	428a      	cmp	r2, r1
 8005d08:	f43f af23 	beq.w	8005b52 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d0c:	68a2      	ldr	r2, [r4, #8]
 8005d0e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005d12:	4332      	orrs	r2, r6
 8005d14:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005d18:	60a2      	str	r2, [r4, #8]
}
 8005d1a:	e71a      	b.n	8005b52 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d1c:	0e80      	lsrs	r0, r0, #26
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f000 051f 	and.w	r5, r0, #31
 8005d24:	2401      	movs	r4, #1
 8005d26:	0680      	lsls	r0, r0, #26
 8005d28:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8005d2c:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d2e:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d30:	ea44 0400 	orr.w	r4, r4, r0
 8005d34:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d38:	d977      	bls.n	8005e2a <HAL_ADC_ConfigChannel+0x3a6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d3a:	381e      	subs	r0, #30
 8005d3c:	0500      	lsls	r0, r0, #20
 8005d3e:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8005d42:	e7c2      	b.n	8005cca <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d44:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 8005d46:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d48:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d4c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	d16c      	bne.n	8005e2e <HAL_ADC_ConfigChannel+0x3aa>
 8005d54:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d58:	4284      	cmp	r4, r0
 8005d5a:	f000 80a0 	beq.w	8005e9e <HAL_ADC_ConfigChannel+0x41a>
 8005d5e:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8005d60:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d62:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d66:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005d6a:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 8005d6e:	4285      	cmp	r5, r0
 8005d70:	f000 80c0 	beq.w	8005ef4 <HAL_ADC_ConfigChannel+0x470>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d74:	68a5      	ldr	r5, [r4, #8]
 8005d76:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d78:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d7c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005d80:	4285      	cmp	r5, r0
 8005d82:	f000 80a1 	beq.w	8005ec8 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d86:	68e5      	ldr	r5, [r4, #12]
 8005d88:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d8a:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d8e:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8005d92:	42a0      	cmp	r0, r4
 8005d94:	f000 80c4 	beq.w	8005f20 <HAL_ADC_ConfigChannel+0x49c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005d98:	4638      	mov	r0, r7
 8005d9a:	e6a4      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005d9c:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005da0:	5835      	ldr	r5, [r6, r0]
 8005da2:	402c      	ands	r4, r5
 8005da4:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005da6:	6950      	ldr	r0, [r2, #20]
 8005da8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005dac:	6150      	str	r0, [r2, #20]
}
 8005dae:	e6f9      	b.n	8005ba4 <HAL_ADC_ConfigChannel+0x120>
 8005db0:	0007ffff 	.word	0x0007ffff
 8005db4:	407f0000 	.word	0x407f0000
 8005db8:	80080000 	.word	0x80080000
 8005dbc:	50000300 	.word	0x50000300
 8005dc0:	c3210000 	.word	0xc3210000
 8005dc4:	90c00010 	.word	0x90c00010
 8005dc8:	c7520000 	.word	0xc7520000
 8005dcc:	cb840000 	.word	0xcb840000
 8005dd0:	50000100 	.word	0x50000100
 8005dd4:	03fff000 	.word	0x03fff000
 8005dd8:	20000500 	.word	0x20000500
 8005ddc:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de0:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005de4:	2c00      	cmp	r4, #0
 8005de6:	f000 80b7 	beq.w	8005f58 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8005dea:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005dee:	3401      	adds	r4, #1
 8005df0:	06a4      	lsls	r4, r4, #26
 8005df2:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	f000 80aa 	beq.w	8005f54 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8005e00:	fab5 f585 	clz	r5, r5
 8005e04:	3501      	adds	r5, #1
 8005e06:	f005 051f 	and.w	r5, r5, #31
 8005e0a:	2601      	movs	r6, #1
 8005e0c:	fa06 f505 	lsl.w	r5, r6, r5
 8005e10:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f000 8099 	beq.w	8005f4e <HAL_ADC_ConfigChannel+0x4ca>
  return __builtin_clz(value);
 8005e1c:	fab0 f080 	clz	r0, r0
 8005e20:	3001      	adds	r0, #1
 8005e22:	f000 001f 	and.w	r0, r0, #31
 8005e26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005e2a:	0500      	lsls	r0, r0, #20
 8005e2c:	e74d      	b.n	8005cca <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e32:	b11d      	cbz	r5, 8005e3c <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 8005e34:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e38:	42ac      	cmp	r4, r5
 8005e3a:	d030      	beq.n	8005e9e <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e3c:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8005e3e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e40:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e44:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005e48:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4c:	fa97 f6a7 	rbit	r6, r7
 8005e50:	f104 0c08 	add.w	ip, r4, #8
 8005e54:	46e0      	mov	r8, ip
  if (value == 0U)
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	d074      	beq.n	8005f44 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8005e5a:	fab6 f686 	clz	r6, r6
 8005e5e:	42ae      	cmp	r6, r5
 8005e60:	d04a      	beq.n	8005ef8 <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e62:	f8dc 5000 	ldr.w	r5, [ip]
 8005e66:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e6a:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6e:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e72:	f104 060c 	add.w	r6, r4, #12
 8005e76:	46b0      	mov	r8, r6
  if (value == 0U)
 8005e78:	f1be 0f00 	cmp.w	lr, #0
 8005e7c:	d059      	beq.n	8005f32 <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8005e7e:	fabe fe8e 	clz	lr, lr
 8005e82:	45ae      	cmp	lr, r5
 8005e84:	d022      	beq.n	8005ecc <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e86:	6834      	ldr	r4, [r6, #0]
 8005e88:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e8a:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8e:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	f43f ae27 	beq.w	8005ae6 <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8005e98:	fab5 f085 	clz	r0, r5
 8005e9c:	e779      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x30e>
  MODIFY_REG(*preg,
 8005e9e:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005ea6:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005eaa:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005eac:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8005eae:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8005eb0:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eb4:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005eb8:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	d1c4      	bne.n	8005e4c <HAL_ADC_ConfigChannel+0x3c8>
 8005ec2:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8005ec6:	e752      	b.n	8005d6e <HAL_ADC_ConfigChannel+0x2ea>
 8005ec8:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8005ecc:	f8dc 0000 	ldr.w	r0, [ip]
 8005ed0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005ed4:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ed8:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005eda:	68e0      	ldr	r0, [r4, #12]
 8005edc:	68e4      	ldr	r4, [r4, #12]
 8005ede:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ee2:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ee4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ee8:	4638      	mov	r0, r7
 8005eea:	2d00      	cmp	r5, #0
 8005eec:	d1cf      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x40a>
 8005eee:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8005ef2:	e74e      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x30e>
 8005ef4:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 8005ef8:	f8de 0000 	ldr.w	r0, [lr]
 8005efc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005f00:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f04:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f06:	68a0      	ldr	r0, [r4, #8]
 8005f08:	68a5      	ldr	r5, [r4, #8]
 8005f0a:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f0e:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f10:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f14:	4638      	mov	r0, r7
 8005f16:	2e00      	cmp	r6, #0
 8005f18:	d1a9      	bne.n	8005e6e <HAL_ADC_ConfigChannel+0x3ea>
 8005f1a:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8005f1e:	e72f      	b.n	8005d80 <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 8005f20:	6830      	ldr	r0, [r6, #0]
 8005f22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005f26:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005f28:	6808      	ldr	r0, [r1, #0]
}
 8005f2a:	e5dc      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x62>
 8005f2c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8005f30:	e6ab      	b.n	8005c8a <HAL_ADC_ConfigChannel+0x206>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f32:	68e5      	ldr	r5, [r4, #12]
 8005f34:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f36:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005f3a:	e7a8      	b.n	8005e8e <HAL_ADC_ConfigChannel+0x40a>
 8005f3c:	4808      	ldr	r0, [pc, #32]	@ (8005f60 <HAL_ADC_ConfigChannel+0x4dc>)
 8005f3e:	e6c4      	b.n	8005cca <HAL_ADC_ConfigChannel+0x246>
 8005f40:	2502      	movs	r5, #2
 8005f42:	e6af      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x220>
 8005f44:	68a5      	ldr	r5, [r4, #8]
 8005f46:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f48:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005f4c:	e78f      	b.n	8005e6e <HAL_ADC_ConfigChannel+0x3ea>
 8005f4e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8005f52:	e6ba      	b.n	8005cca <HAL_ADC_ConfigChannel+0x246>
 8005f54:	2502      	movs	r5, #2
 8005f56:	e75b      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x38c>
 8005f58:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8005f5c:	e74b      	b.n	8005df6 <HAL_ADC_ConfigChannel+0x372>
 8005f5e:	bf00      	nop
 8005f60:	fe500000 	.word	0xfe500000

08005f64 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8005f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f68:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8005f70:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005f78:	f000 8175 	beq.w	8006266 <HAL_ADCEx_InjectedConfigChannel+0x302>
 8005f7c:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005f7e:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 8005f80:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8005f84:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005f88:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005f8a:	2d00      	cmp	r5, #0
 8005f8c:	d072      	beq.n	8006074 <HAL_ADCEx_InjectedConfigChannel+0x110>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8005f8e:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005f90:	2d01      	cmp	r5, #1
 8005f92:	d06f      	beq.n	8006074 <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005f94:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8005f96:	f000 001f 	and.w	r0, r0, #31
 8005f9a:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8005f9e:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005fa0:	2f00      	cmp	r7, #0
 8005fa2:	f040 811a 	bne.w	80061da <HAL_ADCEx_InjectedConfigChannel+0x276>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005fa6:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8005fa8:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f000 821e 	beq.w	80063ec <HAL_ADCEx_InjectedConfigChannel+0x488>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8005fb0:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005fb2:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8005fb6:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8005fb8:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8005fba:	4330      	orrs	r0, r6
 8005fbc:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005fc0:	6898      	ldr	r0, [r3, #8]
 8005fc2:	0700      	lsls	r0, r0, #28
 8005fc4:	d410      	bmi.n	8005fe8 <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005fc6:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8005fca:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8005fce:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	f040 80f7 	bne.w	80061c4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->CFGR,
 8005fd6:	68dd      	ldr	r5, [r3, #12]
 8005fd8:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8005fdc:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8005fe0:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8005fe4:	4328      	orrs	r0, r5
 8005fe6:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fe8:	6898      	ldr	r0, [r3, #8]
 8005fea:	f010 0004 	ands.w	r0, r0, #4
 8005fee:	d057      	beq.n	80060a0 <HAL_ADCEx_InjectedConfigChannel+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ff0:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ff2:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ff4:	689d      	ldr	r5, [r3, #8]
 8005ff6:	07ee      	lsls	r6, r5, #31
 8005ff8:	d414      	bmi.n	8006024 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005ffa:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005ffc:	4da3      	ldr	r5, [pc, #652]	@ (800628c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005ffe:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8006002:	f007 0c18 	and.w	ip, r7, #24
 8006006:	fa25 f50c 	lsr.w	r5, r5, ip
 800600a:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 800600e:	4025      	ands	r5, r4
 8006010:	ea26 0c0e 	bic.w	ip, r6, lr
 8006014:	ea45 050c 	orr.w	r5, r5, ip
 8006018:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800601c:	4d9c      	ldr	r5, [pc, #624]	@ (8006290 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800601e:	42af      	cmp	r7, r5
 8006020:	f000 80f6 	beq.w	8006210 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8006024:	499b      	ldr	r1, [pc, #620]	@ (8006294 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8006026:	420c      	tst	r4, r1
 8006028:	d01e      	beq.n	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800602a:	4e9b      	ldr	r6, [pc, #620]	@ (8006298 <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800602c:	4d9b      	ldr	r5, [pc, #620]	@ (800629c <HAL_ADCEx_InjectedConfigChannel+0x338>)
 800602e:	68b1      	ldr	r1, [r6, #8]
 8006030:	42ac      	cmp	r4, r5
 8006032:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8006036:	f000 809f 	beq.w	8006178 <HAL_ADCEx_InjectedConfigChannel+0x214>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800603a:	4d99      	ldr	r5, [pc, #612]	@ (80062a0 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 800603c:	42ac      	cmp	r4, r5
 800603e:	f000 809b 	beq.w	8006178 <HAL_ADCEx_InjectedConfigChannel+0x214>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006042:	4d98      	ldr	r5, [pc, #608]	@ (80062a4 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8006044:	42ac      	cmp	r4, r5
 8006046:	f000 8112 	beq.w	800626e <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800604a:	4d97      	ldr	r5, [pc, #604]	@ (80062a8 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 800604c:	42ac      	cmp	r4, r5
 800604e:	d10b      	bne.n	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006050:	0249      	lsls	r1, r1, #9
 8006052:	d409      	bmi.n	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006054:	4995      	ldr	r1, [pc, #596]	@ (80062ac <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8006056:	428b      	cmp	r3, r1
 8006058:	d006      	beq.n	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800605a:	68b3      	ldr	r3, [r6, #8]
 800605c:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006060:	433b      	orrs	r3, r7
 8006062:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006066:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006068:	2300      	movs	r3, #0
 800606a:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800606e:	b003      	add	sp, #12
 8006070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006074:	2809      	cmp	r0, #9
 8006076:	d1a3      	bne.n	8005fc0 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006078:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800607a:	0c65      	lsrs	r5, r4, #17
 800607c:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006080:	b120      	cbz	r0, 800608c <HAL_ADCEx_InjectedConfigChannel+0x128>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006082:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006084:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006088:	4330      	orrs	r0, r6
 800608a:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 800608c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800608e:	4e88      	ldr	r6, [pc, #544]	@ (80062b0 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8006090:	4030      	ands	r0, r6
 8006092:	4328      	orrs	r0, r5
 8006094:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006096:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8006098:	6655      	str	r5, [r2, #100]	@ 0x64
 800609a:	0700      	lsls	r0, r0, #28
 800609c:	d4a4      	bmi.n	8005fe8 <HAL_ADCEx_InjectedConfigChannel+0x84>
 800609e:	e792      	b.n	8005fc6 <HAL_ADCEx_InjectedConfigChannel+0x62>
 80060a0:	689d      	ldr	r5, [r3, #8]
 80060a2:	072f      	lsls	r7, r5, #28
 80060a4:	d4a6      	bmi.n	8005ff4 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80060a6:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80060a8:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80060ac:	2d00      	cmp	r5, #0
 80060ae:	f040 80a6 	bne.w	80061fe <HAL_ADCEx_InjectedConfigChannel+0x29a>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80060b2:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80060b4:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80060b6:	f000 819b 	beq.w	80063f0 <HAL_ADCEx_InjectedConfigChannel+0x48c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80060ba:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80060be:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060c0:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80060c2:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80060c6:	2d01      	cmp	r5, #1
 80060c8:	f000 8185 	beq.w	80063d6 <HAL_ADCEx_InjectedConfigChannel+0x472>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80060cc:	691d      	ldr	r5, [r3, #16]
 80060ce:	f025 0502 	bic.w	r5, r5, #2
 80060d2:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80060d4:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 80060d6:	f3c4 5704 	ubfx	r7, r4, #20, #5
 80060da:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80060dc:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 80060de:	40bd      	lsls	r5, r7
 80060e0:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80060e4:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80060e8:	ea6f 0505 	mvn.w	r5, r5
 80060ec:	f000 8169 	beq.w	80063c2 <HAL_ADCEx_InjectedConfigChannel+0x45e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80060f0:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 80060f4:	40be      	lsls	r6, r7
 80060f6:	f85c 7004 	ldr.w	r7, [ip, r4]
 80060fa:	403d      	ands	r5, r7
 80060fc:	4335      	orrs	r5, r6
 80060fe:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006102:	695c      	ldr	r4, [r3, #20]
 8006104:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006108:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800610a:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800610c:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800610e:	694d      	ldr	r5, [r1, #20]
 8006110:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006112:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006114:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006116:	f000 810c 	beq.w	8006332 <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800611a:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 800611e:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8006120:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 8006124:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006128:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 800612c:	4e61      	ldr	r6, [pc, #388]	@ (80062b4 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 800612e:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8006132:	ea0e 0606 	and.w	r6, lr, r6
 8006136:	ea46 060c 	orr.w	r6, r6, ip
 800613a:	4334      	orrs	r4, r6
 800613c:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006140:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006144:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8006146:	698e      	ldr	r6, [r1, #24]
 8006148:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 800614c:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8006150:	4334      	orrs	r4, r6
 8006152:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006156:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8006158:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 800615a:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 800615e:	f1a6 0601 	sub.w	r6, r6, #1
 8006162:	fab6 f686 	clz	r6, r6
 8006166:	0976      	lsrs	r6, r6, #5
 8006168:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 800616c:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8006170:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006174:	680c      	ldr	r4, [r1, #0]
}
 8006176:	e73d      	b.n	8005ff4 <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006178:	020d      	lsls	r5, r1, #8
 800617a:	f53f af75 	bmi.w	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800617e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006182:	f47f af71 	bne.w	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006186:	4944      	ldr	r1, [pc, #272]	@ (8006298 <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8006188:	4c4b      	ldr	r4, [pc, #300]	@ (80062b8 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 800618a:	688b      	ldr	r3, [r1, #8]
 800618c:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006190:	433b      	orrs	r3, r7
 8006192:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006196:	608b      	str	r3, [r1, #8]
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	4948      	ldr	r1, [pc, #288]	@ (80062bc <HAL_ADCEx_InjectedConfigChannel+0x358>)
 800619c:	099b      	lsrs	r3, r3, #6
 800619e:	fba1 1303 	umull	r1, r3, r1, r3
 80061a2:	099b      	lsrs	r3, r3, #6
 80061a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80061ac:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f43f af59 	beq.w	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
          wait_loop_index--;
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f9      	bne.n	80061b6 <HAL_ADCEx_InjectedConfigChannel+0x252>
 80061c2:	e751      	b.n	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->CFGR,
 80061c4:	68dd      	ldr	r5, [r3, #12]
 80061c6:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80061ca:	4328      	orrs	r0, r5
 80061cc:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061ce:	6898      	ldr	r0, [r3, #8]
 80061d0:	f010 0004 	ands.w	r0, r0, #4
 80061d4:	f43f af64 	beq.w	80060a0 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 80061d8:	e70a      	b.n	8005ff0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80061da:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 80061dc:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80061de:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 80061e0:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80061e2:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80061e4:	2f00      	cmp	r7, #0
 80061e6:	f47f aeeb 	bne.w	8005fc0 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80061ea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80061ec:	4e30      	ldr	r6, [pc, #192]	@ (80062b0 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80061ee:	4030      	ands	r0, r6
 80061f0:	4328      	orrs	r0, r5
 80061f2:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061f4:	6898      	ldr	r0, [r3, #8]
 80061f6:	0700      	lsls	r0, r0, #28
 80061f8:	f53f aef6 	bmi.w	8005fe8 <HAL_ADCEx_InjectedConfigChannel+0x84>
 80061fc:	e6e3      	b.n	8005fc6 <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80061fe:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8006200:	2d00      	cmp	r5, #0
 8006202:	f43f af56 	beq.w	80060b2 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006206:	2801      	cmp	r0, #1
 8006208:	f000 8118 	beq.w	800643c <HAL_ADCEx_InjectedConfigChannel+0x4d8>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800620c:	68d8      	ldr	r0, [r3, #12]
 800620e:	e754      	b.n	80060ba <HAL_ADCEx_InjectedConfigChannel+0x156>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006210:	f1be 0f00 	cmp.w	lr, #0
 8006214:	d154      	bne.n	80062c0 <HAL_ADCEx_InjectedConfigChannel+0x35c>
 8006216:	0ea4      	lsrs	r4, r4, #26
 8006218:	3401      	adds	r4, #1
 800621a:	f004 061f 	and.w	r6, r4, #31
 800621e:	2501      	movs	r5, #1
 8006220:	06a4      	lsls	r4, r4, #26
 8006222:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8006226:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006228:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800622a:	ea45 0504 	orr.w	r5, r5, r4
 800622e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006232:	f200 80fe 	bhi.w	8006432 <HAL_ADCEx_InjectedConfigChannel+0x4ce>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006236:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006238:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800623a:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 800623c:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800623e:	f006 0604 	and.w	r6, r6, #4
 8006242:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8006246:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800624a:	fa05 fc04 	lsl.w	ip, r5, r4
 800624e:	f04f 0e07 	mov.w	lr, #7
 8006252:	59bd      	ldr	r5, [r7, r6]
 8006254:	fa0e f404 	lsl.w	r4, lr, r4
 8006258:	ea25 0404 	bic.w	r4, r5, r4
 800625c:	ea44 040c 	orr.w	r4, r4, ip
 8006260:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8006262:	680c      	ldr	r4, [r1, #0]
}
 8006264:	e6de      	b.n	8006024 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 8006266:	2002      	movs	r0, #2
}
 8006268:	b003      	add	sp, #12
 800626a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800626e:	01cc      	lsls	r4, r1, #7
 8006270:	f53f aefa 	bmi.w	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006274:	490d      	ldr	r1, [pc, #52]	@ (80062ac <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8006276:	428b      	cmp	r3, r1
 8006278:	f43f aef6 	beq.w	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800627c:	68b3      	ldr	r3, [r6, #8]
 800627e:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006282:	433b      	orrs	r3, r7
 8006284:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006288:	60b3      	str	r3, [r6, #8]
}
 800628a:	e6ed      	b.n	8006068 <HAL_ADCEx_InjectedConfigChannel+0x104>
 800628c:	0007ffff 	.word	0x0007ffff
 8006290:	407f0000 	.word	0x407f0000
 8006294:	80080000 	.word	0x80080000
 8006298:	50000300 	.word	0x50000300
 800629c:	c3210000 	.word	0xc3210000
 80062a0:	90c00010 	.word	0x90c00010
 80062a4:	c7520000 	.word	0xc7520000
 80062a8:	cb840000 	.word	0xcb840000
 80062ac:	50000100 	.word	0x50000100
 80062b0:	04104000 	.word	0x04104000
 80062b4:	03fff000 	.word	0x03fff000
 80062b8:	20000500 	.word	0x20000500
 80062bc:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c0:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80062c4:	2d00      	cmp	r5, #0
 80062c6:	f000 80be 	beq.w	8006446 <HAL_ADCEx_InjectedConfigChannel+0x4e2>
  return __builtin_clz(value);
 80062ca:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062ce:	3501      	adds	r5, #1
 80062d0:	f005 051f 	and.w	r5, r5, #31
 80062d4:	2d09      	cmp	r5, #9
 80062d6:	f240 80b6 	bls.w	8006446 <HAL_ADCEx_InjectedConfigChannel+0x4e2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062da:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80062de:	2d00      	cmp	r5, #0
 80062e0:	f000 812b 	beq.w	800653a <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 80062e4:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80062e8:	3501      	adds	r5, #1
 80062ea:	06ad      	lsls	r5, r5, #26
 80062ec:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f0:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80062f4:	2e00      	cmp	r6, #0
 80062f6:	f000 811e 	beq.w	8006536 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 80062fa:	fab6 f686 	clz	r6, r6
 80062fe:	3601      	adds	r6, #1
 8006300:	f006 061f 	and.w	r6, r6, #31
 8006304:	2701      	movs	r7, #1
 8006306:	fa07 f606 	lsl.w	r6, r7, r6
 800630a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006310:	2c00      	cmp	r4, #0
 8006312:	f000 8109 	beq.w	8006528 <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 8006316:	fab4 f484 	clz	r4, r4
 800631a:	1c66      	adds	r6, r4, #1
 800631c:	f006 061f 	and.w	r6, r6, #31
 8006320:	2403      	movs	r4, #3
 8006322:	f06f 071d 	mvn.w	r7, #29
 8006326:	fb14 7406 	smlabb	r4, r4, r6, r7
 800632a:	0524      	lsls	r4, r4, #20
 800632c:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8006330:	e782      	b.n	8006238 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006332:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8006334:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006336:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800633a:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800633e:	2e00      	cmp	r6, #0
 8006340:	d05a      	beq.n	80063f8 <HAL_ADCEx_InjectedConfigChannel+0x494>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006342:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8006346:	b126      	cbz	r6, 8006352 <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 8006348:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800634c:	42b5      	cmp	r5, r6
 800634e:	f000 80ce 	beq.w	80064ee <HAL_ADCEx_InjectedConfigChannel+0x58a>
 8006352:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8006354:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006356:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800635a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800635e:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006362:	fa9c f7ac 	rbit	r7, ip
 8006366:	f105 0e08 	add.w	lr, r5, #8
 800636a:	46f1      	mov	r9, lr
  if (value == 0U)
 800636c:	2f00      	cmp	r7, #0
 800636e:	f000 80dd 	beq.w	800652c <HAL_ADCEx_InjectedConfigChannel+0x5c8>
  return __builtin_clz(value);
 8006372:	fab7 f787 	clz	r7, r7
 8006376:	42b7      	cmp	r7, r6
 8006378:	f000 80a3 	beq.w	80064c2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800637c:	f8de 6000 	ldr.w	r6, [lr]
 8006380:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006384:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006388:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800638c:	f105 070c 	add.w	r7, r5, #12
 8006390:	46b9      	mov	r9, r7
  if (value == 0U)
 8006392:	f1b8 0f00 	cmp.w	r8, #0
 8006396:	f000 80d3 	beq.w	8006540 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 800639a:	fab8 f888 	clz	r8, r8
 800639e:	45b0      	cmp	r8, r6
 80063a0:	d077      	beq.n	8006492 <HAL_ADCEx_InjectedConfigChannel+0x52e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80063a2:	683d      	ldr	r5, [r7, #0]
 80063a4:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063a6:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063aa:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	f43f ae20 	beq.w	8005ff4 <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 80063b4:	fab6 f486 	clz	r4, r6
 80063b8:	42ac      	cmp	r4, r5
 80063ba:	f000 80af 	beq.w	800651c <HAL_ADCEx_InjectedConfigChannel+0x5b8>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80063be:	4664      	mov	r4, ip
 80063c0:	e618      	b.n	8005ff4 <HAL_ADCEx_InjectedConfigChannel+0x90>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80063c2:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80063c6:	593e      	ldr	r6, [r7, r4]
 80063c8:	4035      	ands	r5, r6
 80063ca:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80063cc:	695c      	ldr	r4, [r3, #20]
 80063ce:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80063d2:	615c      	str	r4, [r3, #20]
}
 80063d4:	e699      	b.n	800610a <HAL_ADCEx_InjectedConfigChannel+0x1a6>
      MODIFY_REG(hadc->Instance->CFGR2,
 80063d6:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 80063da:	691e      	ldr	r6, [r3, #16]
 80063dc:	433d      	orrs	r5, r7
 80063de:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 80063e2:	4335      	orrs	r5, r6
 80063e4:	f045 0502 	orr.w	r5, r5, #2
 80063e8:	611d      	str	r5, [r3, #16]
 80063ea:	e673      	b.n	80060d4 <HAL_ADCEx_InjectedConfigChannel+0x170>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80063ec:	4628      	mov	r0, r5
 80063ee:	e5e4      	b.n	8005fba <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80063f0:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 80063f4:	60d8      	str	r0, [r3, #12]
 80063f6:	e663      	b.n	80060c0 <HAL_ADCEx_InjectedConfigChannel+0x15c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80063f8:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80063fc:	42a5      	cmp	r5, r4
 80063fe:	d076      	beq.n	80064ee <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006400:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8006402:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006404:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006408:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800640c:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8006410:	42a6      	cmp	r6, r4
 8006412:	d054      	beq.n	80064be <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006414:	68ae      	ldr	r6, [r5, #8]
 8006416:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006418:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800641c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006420:	42a6      	cmp	r6, r4
 8006422:	d034      	beq.n	800648e <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006424:	68ee      	ldr	r6, [r5, #12]
 8006426:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006428:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800642c:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8006430:	e7c2      	b.n	80063b8 <HAL_ADCEx_InjectedConfigChannel+0x454>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006432:	3c1e      	subs	r4, #30
 8006434:	0524      	lsls	r4, r4, #20
 8006436:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800643a:	e6fd      	b.n	8006238 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800643c:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 800643e:	f045 0520 	orr.w	r5, r5, #32
 8006442:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8006444:	e63d      	b.n	80060c2 <HAL_ADCEx_InjectedConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800644a:	2d00      	cmp	r5, #0
 800644c:	f000 8082 	beq.w	8006554 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 8006450:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006454:	3501      	adds	r5, #1
 8006456:	06ad      	lsls	r5, r5, #26
 8006458:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645c:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8006460:	2e00      	cmp	r6, #0
 8006462:	d075      	beq.n	8006550 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006464:	fab6 f686 	clz	r6, r6
 8006468:	3601      	adds	r6, #1
 800646a:	f006 061f 	and.w	r6, r6, #31
 800646e:	2701      	movs	r7, #1
 8006470:	fa07 f606 	lsl.w	r6, r7, r6
 8006474:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006476:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800647a:	2c00      	cmp	r4, #0
 800647c:	d065      	beq.n	800654a <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 800647e:	fab4 f484 	clz	r4, r4
 8006482:	3401      	adds	r4, #1
 8006484:	f004 041f 	and.w	r4, r4, #31
 8006488:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800648c:	e6d3      	b.n	8006236 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 800648e:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8006492:	f8de 4000 	ldr.w	r4, [lr]
 8006496:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800649a:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800649e:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064a2:	68ec      	ldr	r4, [r5, #12]
 80064a4:	68ed      	ldr	r5, [r5, #12]
 80064a6:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064aa:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064ac:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80064b0:	4664      	mov	r4, ip
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	f47f af79 	bne.w	80063aa <HAL_ADCEx_InjectedConfigChannel+0x446>
 80064b8:	f3cc 6484 	ubfx	r4, ip, #26, #5
 80064bc:	e77c      	b.n	80063b8 <HAL_ADCEx_InjectedConfigChannel+0x454>
 80064be:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 80064c2:	f8d8 4000 	ldr.w	r4, [r8]
 80064c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80064ca:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80064ce:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064d2:	68ac      	ldr	r4, [r5, #8]
 80064d4:	68ae      	ldr	r6, [r5, #8]
 80064d6:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064da:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064dc:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80064e0:	4664      	mov	r4, ip
 80064e2:	2f00      	cmp	r7, #0
 80064e4:	f47f af50 	bne.w	8006388 <HAL_ADCEx_InjectedConfigChannel+0x424>
 80064e8:	f3cc 6484 	ubfx	r4, ip, #26, #5
 80064ec:	e798      	b.n	8006420 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
  MODIFY_REG(*preg,
 80064ee:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80064f0:	461d      	mov	r5, r3
 80064f2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80064f6:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80064fa:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064fe:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8006500:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8006502:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006506:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800650a:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800650e:	4664      	mov	r4, ip
 8006510:	2f00      	cmp	r7, #0
 8006512:	f47f af26 	bne.w	8006362 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 8006516:	f3cc 6484 	ubfx	r4, ip, #26, #5
 800651a:	e779      	b.n	8006410 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
  MODIFY_REG(*preg,
 800651c:	683c      	ldr	r4, [r7, #0]
 800651e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006522:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006524:	680c      	ldr	r4, [r1, #0]
}
 8006526:	e565      	b.n	8005ff4 <HAL_ADCEx_InjectedConfigChannel+0x90>
 8006528:	4c0c      	ldr	r4, [pc, #48]	@ (800655c <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 800652a:	e685      	b.n	8006238 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800652c:	68ae      	ldr	r6, [r5, #8]
 800652e:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006530:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006534:	e728      	b.n	8006388 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8006536:	2602      	movs	r6, #2
 8006538:	e6e7      	b.n	800630a <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 800653a:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 800653e:	e6d7      	b.n	80062f0 <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8006540:	68ee      	ldr	r6, [r5, #12]
 8006542:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006544:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006548:	e72f      	b.n	80063aa <HAL_ADCEx_InjectedConfigChannel+0x446>
 800654a:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 800654e:	e673      	b.n	8006238 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 8006550:	2602      	movs	r6, #2
 8006552:	e78f      	b.n	8006474 <HAL_ADCEx_InjectedConfigChannel+0x510>
 8006554:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8006558:	e780      	b.n	800645c <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 800655a:	bf00      	nop
 800655c:	fe500000 	.word	0xfe500000

08006560 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006560:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8006564:	2a01      	cmp	r2, #1
 8006566:	d045      	beq.n	80065f4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 8006568:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800656a:	6804      	ldr	r4, [r0, #0]
{
 800656c:	b09c      	sub	sp, #112	@ 0x70
 800656e:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006570:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006572:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006574:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006578:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 800657a:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800657e:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006580:	d008      	beq.n	8006594 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006582:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006584:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006588:	f041 0120 	orr.w	r1, r1, #32
 800658c:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800658e:	b01c      	add	sp, #112	@ 0x70
 8006590:	bcf0      	pop	{r4, r5, r6, r7}
 8006592:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006594:	4a22      	ldr	r2, [pc, #136]	@ (8006620 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8006596:	6890      	ldr	r0, [r2, #8]
 8006598:	0740      	lsls	r0, r0, #29
 800659a:	d50b      	bpl.n	80065b4 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 800659c:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800659e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065a0:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80065a4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80065ae:	b01c      	add	sp, #112	@ 0x70
 80065b0:	bcf0      	pop	{r4, r5, r6, r7}
 80065b2:	4770      	bx	lr
 80065b4:	68a0      	ldr	r0, [r4, #8]
 80065b6:	0745      	lsls	r5, r0, #29
 80065b8:	d4f1      	bmi.n	800659e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065ba:	680d      	ldr	r5, [r1, #0]
 80065bc:	b1e5      	cbz	r5, 80065f8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80065be:	4e19      	ldr	r6, [pc, #100]	@ (8006624 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80065c0:	684f      	ldr	r7, [r1, #4]
 80065c2:	68b0      	ldr	r0, [r6, #8]
 80065c4:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 80065c8:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80065cc:	4338      	orrs	r0, r7
 80065ce:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80065d2:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80065d4:	68a0      	ldr	r0, [r4, #8]
 80065d6:	6892      	ldr	r2, [r2, #8]
 80065d8:	07c0      	lsls	r0, r0, #31
 80065da:	d41e      	bmi.n	800661a <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80065dc:	07d7      	lsls	r7, r2, #31
 80065de:	d41c      	bmi.n	800661a <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 80065e0:	68b2      	ldr	r2, [r6, #8]
 80065e2:	6889      	ldr	r1, [r1, #8]
 80065e4:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 80065e8:	430d      	orrs	r5, r1
 80065ea:	f022 020f 	bic.w	r2, r2, #15
 80065ee:	4315      	orrs	r5, r2
 80065f0:	60b5      	str	r5, [r6, #8]
 80065f2:	e012      	b.n	800661a <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 80065f4:	2002      	movs	r0, #2
}
 80065f6:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80065f8:	480a      	ldr	r0, [pc, #40]	@ (8006624 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80065fa:	6881      	ldr	r1, [r0, #8]
 80065fc:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8006600:	6081      	str	r1, [r0, #8]
 8006602:	68a1      	ldr	r1, [r4, #8]
 8006604:	6892      	ldr	r2, [r2, #8]
 8006606:	07cd      	lsls	r5, r1, #31
 8006608:	d407      	bmi.n	800661a <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800660a:	07d4      	lsls	r4, r2, #31
 800660c:	d405      	bmi.n	800661a <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800660e:	6882      	ldr	r2, [r0, #8]
 8006610:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8006614:	f022 020f 	bic.w	r2, r2, #15
 8006618:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800661a:	2000      	movs	r0, #0
 800661c:	e7c4      	b.n	80065a8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 800661e:	bf00      	nop
 8006620:	50000100 	.word	0x50000100
 8006624:	50000300 	.word	0x50000300

08006628 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006628:	b530      	push	{r4, r5, lr}
 800662a:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800662c:	2300      	movs	r3, #0
 800662e:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006630:	2800      	cmp	r0, #0
 8006632:	d051      	beq.n	80066d8 <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006634:	6802      	ldr	r2, [r0, #0]
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	4604      	mov	r4, r0
 800663c:	db4c      	blt.n	80066d8 <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800663e:	7f43      	ldrb	r3, [r0, #29]
 8006640:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006644:	2b00      	cmp	r3, #0
 8006646:	d073      	beq.n	8006730 <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8006648:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 800664c:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800664e:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 8006650:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8006652:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8006654:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006656:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 8006658:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 800665a:	6921      	ldr	r1, [r4, #16]
 800665c:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 800665e:	493c      	ldr	r1, [pc, #240]	@ (8006750 <HAL_COMP_Init+0x128>)
 8006660:	4001      	ands	r1, r0
 8006662:	430b      	orrs	r3, r1
 8006664:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006666:	6813      	ldr	r3, [r2, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	d501      	bpl.n	8006670 <HAL_COMP_Init+0x48>
 800666c:	022d      	lsls	r5, r5, #8
 800666e:	d549      	bpl.n	8006704 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006670:	4b38      	ldr	r3, [pc, #224]	@ (8006754 <HAL_COMP_Init+0x12c>)
 8006672:	429a      	cmp	r2, r3
 8006674:	d062      	beq.n	800673c <HAL_COMP_Init+0x114>
 8006676:	4b38      	ldr	r3, [pc, #224]	@ (8006758 <HAL_COMP_Init+0x130>)
 8006678:	429a      	cmp	r2, r3
 800667a:	d064      	beq.n	8006746 <HAL_COMP_Init+0x11e>
 800667c:	3304      	adds	r3, #4
 800667e:	429a      	cmp	r2, r3
 8006680:	bf15      	itete	ne
 8006682:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 8006686:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 800668a:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 800668e:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006692:	69a3      	ldr	r3, [r4, #24]
 8006694:	0798      	lsls	r0, r3, #30
 8006696:	d022      	beq.n	80066de <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006698:	4d30      	ldr	r5, [pc, #192]	@ (800675c <HAL_COMP_Init+0x134>)
 800669a:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800669c:	f013 0f10 	tst.w	r3, #16
 80066a0:	bf14      	ite	ne
 80066a2:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80066a4:	4010      	andeq	r0, r2
 80066a6:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80066a8:	4d2c      	ldr	r5, [pc, #176]	@ (800675c <HAL_COMP_Init+0x134>)
 80066aa:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80066ac:	f013 0f20 	tst.w	r3, #32
 80066b0:	bf14      	ite	ne
 80066b2:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80066b4:	4010      	andeq	r0, r2
 80066b6:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80066b8:	4828      	ldr	r0, [pc, #160]	@ (800675c <HAL_COMP_Init+0x134>)
 80066ba:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80066bc:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80066be:	f013 0f02 	tst.w	r3, #2
 80066c2:	bf14      	ite	ne
 80066c4:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80066c6:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80066c8:	07db      	lsls	r3, r3, #31
 80066ca:	6045      	str	r5, [r0, #4]
 80066cc:	d515      	bpl.n	80066fa <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80066ce:	4b23      	ldr	r3, [pc, #140]	@ (800675c <HAL_COMP_Init+0x134>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4311      	orrs	r1, r2
 80066d4:	6019      	str	r1, [r3, #0]
}
 80066d6:	e009      	b.n	80066ec <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 80066d8:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 80066da:	b003      	add	sp, #12
 80066dc:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80066de:	4b1f      	ldr	r3, [pc, #124]	@ (800675c <HAL_COMP_Init+0x134>)
 80066e0:	6859      	ldr	r1, [r3, #4]
 80066e2:	4011      	ands	r1, r2
 80066e4:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80066e6:	6819      	ldr	r1, [r3, #0]
 80066e8:	400a      	ands	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80066ec:	7f63      	ldrb	r3, [r4, #29]
 80066ee:	b90b      	cbnz	r3, 80066f4 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 80066f0:	2301      	movs	r3, #1
 80066f2:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 80066f4:	2000      	movs	r0, #0
}
 80066f6:	b003      	add	sp, #12
 80066f8:	bd30      	pop	{r4, r5, pc}
 80066fa:	4918      	ldr	r1, [pc, #96]	@ (800675c <HAL_COMP_Init+0x134>)
 80066fc:	680b      	ldr	r3, [r1, #0]
 80066fe:	4013      	ands	r3, r2
 8006700:	600b      	str	r3, [r1, #0]
}
 8006702:	e7f3      	b.n	80066ec <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006704:	4b16      	ldr	r3, [pc, #88]	@ (8006760 <HAL_COMP_Init+0x138>)
 8006706:	4917      	ldr	r1, [pc, #92]	@ (8006764 <HAL_COMP_Init+0x13c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	099b      	lsrs	r3, r3, #6
 800670c:	fba1 1303 	umull	r1, r3, r1, r3
 8006710:	099b      	lsrs	r3, r3, #6
 8006712:	3301      	adds	r3, #1
 8006714:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0a6      	beq.n	8006670 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	3b01      	subs	r3, #1
 8006726:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f9      	bne.n	8006722 <HAL_COMP_Init+0xfa>
 800672e:	e79f      	b.n	8006670 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8006730:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8006732:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8006734:	f7fe fcc8 	bl	80050c8 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	e785      	b.n	8006648 <HAL_COMP_Init+0x20>
 800673c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006740:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006744:	e7a5      	b.n	8006692 <HAL_COMP_Init+0x6a>
 8006746:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800674a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800674e:	e7a0      	b.n	8006692 <HAL_COMP_Init+0x6a>
 8006750:	ff007e0f 	.word	0xff007e0f
 8006754:	40010200 	.word	0x40010200
 8006758:	40010204 	.word	0x40010204
 800675c:	40010400 	.word	0x40010400
 8006760:	20000500 	.word	0x20000500
 8006764:	053e2d63 	.word	0x053e2d63

08006768 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006768:	b1b0      	cbz	r0, 8006798 <HAL_CORDIC_Init+0x30>
{
 800676a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800676c:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8006770:	4604      	mov	r4, r0
 8006772:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006776:	b153      	cbz	r3, 800678e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006778:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800677a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800677c:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800677e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8006782:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8006786:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800678a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800678c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800678e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8006792:	f7fe fd0d 	bl	80051b0 <HAL_CORDIC_MspInit>
 8006796:	e7ef      	b.n	8006778 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8006798:	2001      	movs	r0, #1
}
 800679a:	4770      	bx	lr

0800679c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800679c:	4907      	ldr	r1, [pc, #28]	@ (80067bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800679e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067a0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067a2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067aa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067ac:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067ae:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80067b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80067b6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	e000ed00 	.word	0xe000ed00

080067c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006830 <HAL_NVIC_SetPriority+0x70>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067c8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067ca:	f1c3 0e07 	rsb	lr, r3, #7
 80067ce:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067d2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067d6:	bf28      	it	cs
 80067d8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067dc:	f1bc 0f06 	cmp.w	ip, #6
 80067e0:	d91c      	bls.n	800681c <HAL_NVIC_SetPriority+0x5c>
 80067e2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ea:	fa03 f30c 	lsl.w	r3, r3, ip
 80067ee:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	fa03 f30e 	lsl.w	r3, r3, lr
 80067fa:	ea21 0303 	bic.w	r3, r1, r3
 80067fe:	fa03 f30c 	lsl.w	r3, r3, ip
 8006802:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006804:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8006806:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006808:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800680a:	db0a      	blt.n	8006822 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800680c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006810:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006814:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006818:	f85d fb04 	ldr.w	pc, [sp], #4
 800681c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800681e:	4694      	mov	ip, r2
 8006820:	e7e7      	b.n	80067f2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006822:	4a04      	ldr	r2, [pc, #16]	@ (8006834 <HAL_NVIC_SetPriority+0x74>)
 8006824:	f000 000f 	and.w	r0, r0, #15
 8006828:	4402      	add	r2, r0
 800682a:	7613      	strb	r3, [r2, #24]
 800682c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006830:	e000ed00 	.word	0xe000ed00
 8006834:	e000ecfc 	.word	0xe000ecfc

08006838 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006838:	2800      	cmp	r0, #0
 800683a:	db07      	blt.n	800684c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800683c:	4a04      	ldr	r2, [pc, #16]	@ (8006850 <HAL_NVIC_EnableIRQ+0x18>)
 800683e:	0941      	lsrs	r1, r0, #5
 8006840:	2301      	movs	r3, #1
 8006842:	f000 001f 	and.w	r0, r0, #31
 8006846:	4083      	lsls	r3, r0
 8006848:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e100 	.word	0xe000e100

08006854 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006854:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006858:	4905      	ldr	r1, [pc, #20]	@ (8006870 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800685a:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800685c:	68ca      	ldr	r2, [r1, #12]
 800685e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006862:	4313      	orrs	r3, r2
 8006864:	60cb      	str	r3, [r1, #12]
 8006866:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800686a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800686c:	e7fd      	b.n	800686a <HAL_NVIC_SystemReset+0x16>
 800686e:	bf00      	nop
 8006870:	e000ed00 	.word	0xe000ed00
 8006874:	05fa0004 	.word	0x05fa0004

08006878 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006878:	3801      	subs	r0, #1
 800687a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800687e:	d301      	bcc.n	8006884 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006880:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006882:	4770      	bx	lr
{
 8006884:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006886:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800688a:	4c07      	ldr	r4, [pc, #28]	@ (80068a8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800688c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800688e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8006892:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006896:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006898:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800689a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800689c:	619a      	str	r2, [r3, #24]
}
 800689e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068a2:	6119      	str	r1, [r3, #16]
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	e000ed00 	.word	0xe000ed00

080068ac <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop

080068b0 <HAL_SYSTICK_IRQHandler>:
{
 80068b0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80068b2:	f7ff fffb 	bl	80068ac <HAL_SYSTICK_Callback>
}
 80068b6:	bd08      	pop	{r3, pc}

080068b8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80068b8:	b188      	cbz	r0, 80068de <HAL_DAC_Init+0x26>
{
 80068ba:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80068bc:	7903      	ldrb	r3, [r0, #4]
 80068be:	4604      	mov	r4, r0
 80068c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80068c4:	b13b      	cbz	r3, 80068d6 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80068c6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80068c8:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80068ca:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80068cc:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80068ce:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80068d0:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80068d2:	4618      	mov	r0, r3
}
 80068d4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80068d6:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80068d8:	f7fe fc80 	bl	80051dc <HAL_DAC_MspInit>
 80068dc:	e7f3      	b.n	80068c6 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80068de:	2001      	movs	r0, #1
}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop

080068e4 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f000 80c2 	beq.w	8006a6e <HAL_DAC_ConfigChannel+0x18a>
{
 80068ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ee:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 80068f0:	2900      	cmp	r1, #0
 80068f2:	f000 80be 	beq.w	8006a72 <HAL_DAC_ConfigChannel+0x18e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80068f6:	7943      	ldrb	r3, [r0, #5]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80068fc:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 80068fe:	f000 80c7 	beq.w	8006a90 <HAL_DAC_ConfigChannel+0x1ac>
 8006902:	2301      	movs	r3, #1
 8006904:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006906:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8006908:	f04f 0302 	mov.w	r3, #2
 800690c:	4616      	mov	r6, r2
 800690e:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006910:	d06f      	beq.n	80069f2 <HAL_DAC_ConfigChannel+0x10e>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006912:	682b      	ldr	r3, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006914:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	2a01      	cmp	r2, #1
 800691c:	d108      	bne.n	8006930 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 800691e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006920:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006922:	241f      	movs	r4, #31
 8006924:	40b4      	lsls	r4, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006926:	40b2      	lsls	r2, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006928:	ea21 0104 	bic.w	r1, r1, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800692c:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800692e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006930:	69b9      	ldr	r1, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8006932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006934:	f8d7 e014 	ldr.w	lr, [r7, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006938:	2901      	cmp	r1, #1
 800693a:	f000 8095 	beq.w	8006a68 <HAL_DAC_ConfigChannel+0x184>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800693e:	2902      	cmp	r1, #2
 8006940:	f000 809a 	beq.w	8006a78 <HAL_DAC_ConfigChannel+0x194>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006944:	fabe fc8e 	clz	ip, lr
 8006948:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800694c:	793c      	ldrb	r4, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800694e:	7979      	ldrb	r1, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006950:	f1a4 0401 	sub.w	r4, r4, #1
 8006954:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006958:	f1a1 0101 	sub.w	r1, r1, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800695c:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800695e:	fab1 f181 	clz	r1, r1
 8006962:	0949      	lsrs	r1, r1, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006964:	0224      	lsls	r4, r4, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006966:	ea44 2441 	orr.w	r4, r4, r1, lsl #9
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800696a:	f240 3107 	movw	r1, #775	@ 0x307
 800696e:	40b1      	lsls	r1, r6
 8006970:	ea22 0801 	bic.w	r8, r2, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006974:	683a      	ldr	r2, [r7, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006976:	ea44 040e 	orr.w	r4, r4, lr
 800697a:	4304      	orrs	r4, r0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800697c:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800697e:	ea44 040c 	orr.w	r4, r4, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006982:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006986:	d07a      	beq.n	8006a7e <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006988:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800698c:	40b4      	lsls	r4, r6
 800698e:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006992:	63dc      	str	r4, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800699a:	40b1      	lsls	r1, r6
 800699c:	ea22 0201 	bic.w	r2, r2, r1
 80069a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80069a2:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 80069a6:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80069a8:	f640 70fe 	movw	r0, #4094	@ 0xffe
 80069ac:	40b0      	lsls	r0, r6
 80069ae:	ea24 0400 	bic.w	r4, r4, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80069b2:	fa01 f006 	lsl.w	r0, r1, r6
 80069b6:	4320      	orrs	r0, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80069b8:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 80069ba:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80069bc:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80069c0:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80069c4:	430a      	orrs	r2, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80069c6:	24c0      	movs	r4, #192	@ 0xc0
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	40b4      	lsls	r4, r6
 80069cc:	ea21 0104 	bic.w	r1, r1, r4
 80069d0:	6019      	str	r1, [r3, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80069d2:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80069d4:	f640 700f 	movw	r0, #3855	@ 0xf0f
 80069d8:	40b0      	lsls	r0, r6
 80069da:	ea21 0100 	bic.w	r1, r1, r0
 80069de:	40b2      	lsls	r2, r6
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80069e0:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80069e2:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 80069e4:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80069e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 80069e8:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 80069ea:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 80069ec:	716c      	strb	r4, [r5, #5]
}
 80069ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 80069f2:	f7fe ff3b 	bl	800586c <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80069f6:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80069f8:	4604      	mov	r4, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80069fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 80069fc:	b156      	cbz	r6, 8006a14 <HAL_DAC_ConfigChannel+0x130>
 80069fe:	e018      	b.n	8006a32 <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006a00:	f7fe ff34 	bl	800586c <HAL_GetTick>
 8006a04:	1b00      	subs	r0, r0, r4
 8006a06:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006a08:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006a0a:	d902      	bls.n	8006a12 <HAL_DAC_ConfigChannel+0x12e>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a0e:	0411      	lsls	r1, r2, #16
 8006a10:	d448      	bmi.n	8006aa4 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a14:	0412      	lsls	r2, r2, #16
 8006a16:	d4f3      	bmi.n	8006a00 <HAL_DAC_ConfigChannel+0x11c>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8006a1c:	e00d      	b.n	8006a3a <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006a1e:	f7fe ff25 	bl	800586c <HAL_GetTick>
 8006a22:	1b00      	subs	r0, r0, r4
 8006a24:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006a26:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006a28:	d902      	bls.n	8006a30 <HAL_DAC_ConfigChannel+0x14c>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	db39      	blt.n	8006aa4 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a32:	2a00      	cmp	r2, #0
 8006a34:	dbf3      	blt.n	8006a1e <HAL_DAC_ConfigChannel+0x13a>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a38:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006a3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a3e:	f006 0610 	and.w	r6, r6, #16
 8006a42:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8006a46:	40b0      	lsls	r0, r6
 8006a48:	40b1      	lsls	r1, r6
 8006a4a:	ea22 0200 	bic.w	r2, r2, r0
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a56:	20ff      	movs	r0, #255	@ 0xff
 8006a58:	40b0      	lsls	r0, r6
 8006a5a:	ea22 0200 	bic.w	r2, r2, r0
 8006a5e:	40b1      	lsls	r1, r6
 8006a60:	430a      	orrs	r2, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006a62:	68b8      	ldr	r0, [r7, #8]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006a64:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006a66:	e757      	b.n	8006918 <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8006a68:	f04f 0c00 	mov.w	ip, #0
 8006a6c:	e76e      	b.n	800694c <HAL_DAC_ConfigChannel+0x68>
    return HAL_ERROR;
 8006a6e:	2001      	movs	r0, #1
}
 8006a70:	4770      	bx	lr
    return HAL_ERROR;
 8006a72:	2001      	movs	r0, #1
}
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8006a78:	f04f 0c01 	mov.w	ip, #1
 8006a7c:	e766      	b.n	800694c <HAL_DAC_ConfigChannel+0x68>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006a7e:	f000 ffc3 	bl	8007a08 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006a82:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab4 <HAL_DAC_ConfigChannel+0x1d0>)
 8006a84:	4298      	cmp	r0, r3
 8006a86:	d905      	bls.n	8006a94 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 8006a88:	682b      	ldr	r3, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006a8a:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 8006a8e:	e77d      	b.n	800698c <HAL_DAC_ConfigChannel+0xa8>
  __HAL_LOCK(hdac);
 8006a90:	2002      	movs	r0, #2
 8006a92:	e7ac      	b.n	80069ee <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006a94:	4a08      	ldr	r2, [pc, #32]	@ (8006ab8 <HAL_DAC_ConfigChannel+0x1d4>)
  hdac->Instance->MCR = tmpreg1;
 8006a96:	682b      	ldr	r3, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006a98:	4290      	cmp	r0, r2
 8006a9a:	f67f af77 	bls.w	800698c <HAL_DAC_ConfigChannel+0xa8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006a9e:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8006aa2:	e773      	b.n	800698c <HAL_DAC_ConfigChannel+0xa8>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006aa4:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006aa6:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006aa8:	f043 0308 	orr.w	r3, r3, #8
 8006aac:	612b      	str	r3, [r5, #16]
            return HAL_TIMEOUT;
 8006aae:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006ab0:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8006ab2:	e79c      	b.n	80069ee <HAL_DAC_ConfigChannel+0x10a>
 8006ab4:	09896800 	.word	0x09896800
 8006ab8:	04c4b400 	.word	0x04c4b400

08006abc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d076      	beq.n	8006bae <HAL_DMA_Init+0xf2>
{
 8006ac0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ac2:	4a3c      	ldr	r2, [pc, #240]	@ (8006bb4 <HAL_DMA_Init+0xf8>)
 8006ac4:	6804      	ldr	r4, [r0, #0]
 8006ac6:	4294      	cmp	r4, r2
 8006ac8:	4603      	mov	r3, r0
 8006aca:	d95c      	bls.n	8006b86 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006acc:	493a      	ldr	r1, [pc, #232]	@ (8006bb8 <HAL_DMA_Init+0xfc>)
 8006ace:	4a3b      	ldr	r2, [pc, #236]	@ (8006bbc <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8006ad0:	483b      	ldr	r0, [pc, #236]	@ (8006bc0 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006ad2:	4421      	add	r1, r4
 8006ad4:	fba2 2101 	umull	r2, r1, r2, r1
 8006ad8:	0909      	lsrs	r1, r1, #4
 8006ada:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006adc:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ade:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ae0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8006ae4:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ae6:	4e35      	ldr	r6, [pc, #212]	@ (8006bbc <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006ae8:	4f36      	ldr	r7, [pc, #216]	@ (8006bc4 <HAL_DMA_Init+0x108>)
 8006aea:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aee:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8006af0:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006af2:	4302      	orrs	r2, r0
 8006af4:	6958      	ldr	r0, [r3, #20]
 8006af6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af8:	6998      	ldr	r0, [r3, #24]
 8006afa:	4302      	orrs	r2, r0
 8006afc:	69d8      	ldr	r0, [r3, #28]
 8006afe:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b00:	b2e0      	uxtb	r0, r4
 8006b02:	3808      	subs	r0, #8
 8006b04:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 8006b08:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b0a:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b0e:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b10:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b14:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8006b16:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8006b1a:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b1c:	4e25      	ldr	r6, [pc, #148]	@ (8006bb4 <HAL_DMA_Init+0xf8>)
 8006b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc8 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b20:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b24:	42b4      	cmp	r4, r6
 8006b26:	bf98      	it	ls
 8006b28:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b2a:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b2e:	2401      	movs	r4, #1
 8006b30:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b34:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b36:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b3a:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b3e:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b40:	649e      	str	r6, [r3, #72]	@ 0x48
 8006b42:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b46:	d027      	beq.n	8006b98 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b48:	685e      	ldr	r6, [r3, #4]
 8006b4a:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b4c:	3e01      	subs	r6, #1
 8006b4e:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b50:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b54:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b58:	d824      	bhi.n	8006ba4 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bcc <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b5c:	481c      	ldr	r0, [pc, #112]	@ (8006bd0 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b5e:	442a      	add	r2, r5
 8006b60:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006b62:	3d01      	subs	r5, #1
 8006b64:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b66:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b68:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006b6c:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b6e:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b70:	4a18      	ldr	r2, [pc, #96]	@ (8006bd4 <HAL_DMA_Init+0x118>)
 8006b72:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b74:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006b76:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b78:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006b7a:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006b7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006b82:	bcf0      	pop	{r4, r5, r6, r7}
 8006b84:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b86:	4914      	ldr	r1, [pc, #80]	@ (8006bd8 <HAL_DMA_Init+0x11c>)
 8006b88:	4a0c      	ldr	r2, [pc, #48]	@ (8006bbc <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8006b8a:	4814      	ldr	r0, [pc, #80]	@ (8006bdc <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b8c:	4421      	add	r1, r4
 8006b8e:	fba2 2101 	umull	r2, r1, r2, r1
 8006b92:	0909      	lsrs	r1, r1, #4
 8006b94:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8006b96:	e7a1      	b.n	8006adc <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b98:	2400      	movs	r4, #0
 8006b9a:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b9c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ba0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006baa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006bac:	e7e2      	b.n	8006b74 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8006bae:	2001      	movs	r0, #1
}
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40020407 	.word	0x40020407
 8006bb8:	bffdfbf8 	.word	0xbffdfbf8
 8006bbc:	cccccccd 	.word	0xcccccccd
 8006bc0:	40020400 	.word	0x40020400
 8006bc4:	40020800 	.word	0x40020800
 8006bc8:	40020820 	.word	0x40020820
 8006bcc:	1000823f 	.word	0x1000823f
 8006bd0:	40020940 	.word	0x40020940
 8006bd4:	40020900 	.word	0x40020900
 8006bd8:	bffdfff8 	.word	0xbffdfff8
 8006bdc:	40020000 	.word	0x40020000

08006be0 <HAL_DMA_Start_IT>:
{
 8006be0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8006be2:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8006be6:	2c01      	cmp	r4, #1
 8006be8:	d009      	beq.n	8006bfe <HAL_DMA_Start_IT+0x1e>
 8006bea:	2401      	movs	r4, #1
 8006bec:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006bf0:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8006bf4:	2c01      	cmp	r4, #1
 8006bf6:	d005      	beq.n	8006c04 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8006bfe:	2002      	movs	r0, #2
}
 8006c00:	bcf0      	pop	{r4, r5, r6, r7}
 8006c02:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c04:	2402      	movs	r4, #2
 8006c06:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c0a:	2400      	movs	r4, #0
 8006c0c:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006c0e:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c10:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8006c12:	6825      	ldr	r5, [r4, #0]
 8006c14:	f025 0501 	bic.w	r5, r5, #1
 8006c18:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c1a:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	@ 0x50
 8006c1e:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8006c20:	b115      	cbz	r5, 8006c28 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c22:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	@ 0x58
 8006c26:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c28:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8006c2a:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8006c2c:	f006 0c1f 	and.w	ip, r6, #31
 8006c30:	2601      	movs	r6, #1
 8006c32:	fa06 f60c 	lsl.w	r6, r6, ip
 8006c36:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8006c38:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c3a:	6883      	ldr	r3, [r0, #8]
 8006c3c:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8006c3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8006c40:	bf0b      	itete	eq
 8006c42:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006c44:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006c46:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006c48:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8006c4a:	b1bb      	cbz	r3, 8006c7c <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	f043 030e 	orr.w	r3, r3, #14
 8006c52:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c54:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	03d2      	lsls	r2, r2, #15
 8006c5a:	d503      	bpl.n	8006c64 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c62:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006c64:	b11d      	cbz	r5, 8006c6e <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c6c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8006c74:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006c76:	6023      	str	r3, [r4, #0]
}
 8006c78:	bcf0      	pop	{r4, r5, r6, r7}
 8006c7a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	f023 0304 	bic.w	r3, r3, #4
 8006c82:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	f043 030a 	orr.w	r3, r3, #10
 8006c8a:	6023      	str	r3, [r4, #0]
 8006c8c:	e7e2      	b.n	8006c54 <HAL_DMA_Start_IT+0x74>
 8006c8e:	bf00      	nop

08006c90 <HAL_DMA_Abort_IT>:
{
 8006c90:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006c92:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d009      	beq.n	8006cae <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8006c9a:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c9c:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8006c9e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ca0:	63c1      	str	r1, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8006ca2:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006ca6:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    status = HAL_ERROR;
 8006caa:	4618      	mov	r0, r3
}
 8006cac:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cae:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cb0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb2:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cb4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006cb6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb8:	f021 010e 	bic.w	r1, r1, #14
 8006cbc:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	f021 0101 	bic.w	r1, r1, #1
 8006cc4:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cc6:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cc8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cce:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cd0:	f002 021f 	and.w	r2, r2, #31
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cd8:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cdc:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cde:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006ce0:	b132      	cbz	r2, 8006cf0 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ce2:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ce4:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cec:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cee:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8006cf0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006cf2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8006cf4:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006cf6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8006cfa:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8006cfe:	b103      	cbz	r3, 8006d02 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8006d00:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2000      	movs	r0, #0
}
 8006d04:	bd38      	pop	{r3, r4, r5, pc}
 8006d06:	bf00      	nop

08006d08 <HAL_DMA_IRQHandler>:
{
 8006d08:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d0a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d0c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8006d0e:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d10:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006d12:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	2204      	movs	r2, #4
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	420a      	tst	r2, r1
 8006d1e:	d00e      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x36>
 8006d20:	f014 0f04 	tst.w	r4, #4
 8006d24:	d00b      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d26:	682b      	ldr	r3, [r5, #0]
 8006d28:	069b      	lsls	r3, r3, #26
 8006d2a:	d403      	bmi.n	8006d34 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	f023 0304 	bic.w	r3, r3, #4
 8006d32:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8006d34:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d36:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006d38:	b1cb      	cbz	r3, 8006d6e <HAL_DMA_IRQHandler+0x66>
}
 8006d3a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006d3c:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d3e:	2202      	movs	r2, #2
 8006d40:	409a      	lsls	r2, r3
 8006d42:	420a      	tst	r2, r1
 8006d44:	d015      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8006d46:	f014 0f02 	tst.w	r4, #2
 8006d4a:	d012      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	0699      	lsls	r1, r3, #26
 8006d50:	d406      	bmi.n	8006d60 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	f023 030a 	bic.w	r3, r3, #10
 8006d58:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8006d60:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d62:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006d64:	2100      	movs	r1, #0
 8006d66:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e5      	bne.n	8006d3a <HAL_DMA_IRQHandler+0x32>
}
 8006d6e:	bc70      	pop	{r4, r5, r6}
 8006d70:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006d72:	2208      	movs	r2, #8
 8006d74:	409a      	lsls	r2, r3
 8006d76:	420a      	tst	r2, r1
 8006d78:	d0f9      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8006d7a:	0722      	lsls	r2, r4, #28
 8006d7c:	d5f7      	bpl.n	8006d6e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d7e:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006d80:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d82:	f022 020e 	bic.w	r2, r2, #14
 8006d86:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d88:	2201      	movs	r2, #1
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8006d8e:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d90:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d92:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8006d94:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006d98:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	d0e6      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x66>
}
 8006da0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006da2:	4708      	bx	r1

08006da4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006da4:	680b      	ldr	r3, [r1, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8198 	beq.w	80070dc <HAL_GPIO_Init+0x338>
{
 8006dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8006db4:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 8006db6:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dba:	f04f 0b01 	mov.w	fp, #1
 8006dbe:	f000 810d 	beq.w	8006fdc <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006dc2:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8007110 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006dc6:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8006dc8:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dca:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8006dce:	ea1c 0a03 	ands.w	sl, ip, r3
 8006dd2:	d077      	beq.n	8006ec4 <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006dd4:	684d      	ldr	r5, [r1, #4]
 8006dd6:	f005 0703 	and.w	r7, r5, #3
 8006dda:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ddc:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006dde:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006de2:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006de6:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006dea:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006dee:	f240 8119 	bls.w	8007024 <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006df2:	2f03      	cmp	r7, #3
 8006df4:	f040 8179 	bne.w	80070ea <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006df8:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8006dfc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dfe:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e00:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e02:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8006e06:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e08:	d05c      	beq.n	8006ec4 <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e0a:	4ebe      	ldr	r6, [pc, #760]	@ (8007104 <HAL_GPIO_Init+0x360>)
 8006e0c:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8006e0e:	f044 0401 	orr.w	r4, r4, #1
 8006e12:	6634      	str	r4, [r6, #96]	@ 0x60
 8006e14:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8006e16:	f004 0401 	and.w	r4, r4, #1
 8006e1a:	9403      	str	r4, [sp, #12]
 8006e1c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006e1e:	f022 0403 	bic.w	r4, r2, #3
 8006e22:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e26:	f002 0703 	and.w	r7, r2, #3
 8006e2a:	230f      	movs	r3, #15
 8006e2c:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8006e30:	00bf      	lsls	r7, r7, #2
 8006e32:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e36:	4bb4      	ldr	r3, [pc, #720]	@ (8007108 <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8006e38:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e3a:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e3c:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e40:	f000 8140 	beq.w	80070c4 <HAL_GPIO_Init+0x320>
 8006e44:	4bb1      	ldr	r3, [pc, #708]	@ (800710c <HAL_GPIO_Init+0x368>)
 8006e46:	4298      	cmp	r0, r3
 8006e48:	f000 812d 	beq.w	80070a6 <HAL_GPIO_Init+0x302>
 8006e4c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8007114 <HAL_GPIO_Init+0x370>
 8006e50:	4560      	cmp	r0, ip
 8006e52:	f000 813d 	beq.w	80070d0 <HAL_GPIO_Init+0x32c>
 8006e56:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8007118 <HAL_GPIO_Init+0x374>
 8006e5a:	4560      	cmp	r0, ip
 8006e5c:	f000 813f 	beq.w	80070de <HAL_GPIO_Init+0x33a>
 8006e60:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 800711c <HAL_GPIO_Init+0x378>
 8006e64:	4560      	cmp	r0, ip
 8006e66:	bf0c      	ite	eq
 8006e68:	f04f 0c05 	moveq.w	ip, #5
 8006e6c:	f04f 0c06 	movne.w	ip, #6
 8006e70:	fa0c f707 	lsl.w	r7, ip, r7
 8006e74:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e76:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 8006e78:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 8006e7c:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e80:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8006e82:	bf54      	ite	pl
 8006e84:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006e86:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 8006e8a:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8006e8e:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e92:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 8006e94:	bf54      	ite	pl
 8006e96:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006e98:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 8006e9c:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 8006ea0:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ea4:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8006ea6:	bf54      	ite	pl
 8006ea8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006eaa:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 8006eae:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006eb2:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006eb6:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 8006eb8:	bf54      	ite	pl
 8006eba:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006ebc:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8006ec0:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ec4:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 8006ec6:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ec8:	fa33 f402 	lsrs.w	r4, r3, r2
 8006ecc:	f47f af7c 	bne.w	8006dc8 <HAL_GPIO_Init+0x24>
  }
}
 8006ed0:	b005      	add	sp, #20
 8006ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006ed6:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006eda:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006edc:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ee0:	fa06 f807 	lsl.w	r8, r6, r7
 8006ee4:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8006ee8:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8006eec:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ef0:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ef4:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8006ef8:	fa0e fe02 	lsl.w	lr, lr, r2
 8006efc:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8006f00:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8006f04:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f08:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f0a:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f0e:	fa06 fe07 	lsl.w	lr, r6, r7
 8006f12:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f16:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8006f18:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f1c:	d119      	bne.n	8006f52 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 8006f1e:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f22:	690e      	ldr	r6, [r1, #16]
 8006f24:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f28:	f002 0807 	and.w	r8, r2, #7
 8006f2c:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8006f30:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f34:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 8006f38:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f3c:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f3e:	260f      	movs	r6, #15
 8006f40:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f44:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f46:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f4a:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8006f4e:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f52:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8006f54:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f56:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f5a:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f5c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8006f60:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f62:	d036      	beq.n	8006fd2 <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f64:	4f67      	ldr	r7, [pc, #412]	@ (8007104 <HAL_GPIO_Init+0x360>)
 8006f66:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8006f68:	f044 0401 	orr.w	r4, r4, #1
 8006f6c:	663c      	str	r4, [r7, #96]	@ 0x60
 8006f6e:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8006f70:	f004 0401 	and.w	r4, r4, #1
 8006f74:	9403      	str	r4, [sp, #12]
 8006f76:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f78:	f022 0403 	bic.w	r4, r2, #3
 8006f7c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8006f80:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f84:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f88:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f8c:	260f      	movs	r6, #15
 8006f8e:	00bf      	lsls	r7, r7, #2
 8006f90:	fa06 f707 	lsl.w	r7, r6, r7
 8006f94:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f98:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 8006f9a:	4c5d      	ldr	r4, [pc, #372]	@ (8007110 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f9c:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8006f9e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8006fa0:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fa4:	d47c      	bmi.n	80070a0 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 8006fa6:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 8006fa8:	4e59      	ldr	r6, [pc, #356]	@ (8007110 <HAL_GPIO_Init+0x36c>)
 8006faa:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 8006fac:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fae:	02ae      	lsls	r6, r5, #10
 8006fb0:	f100 8085 	bmi.w	80070be <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 8006fb4:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 8006fb6:	4e56      	ldr	r6, [pc, #344]	@ (8007110 <HAL_GPIO_Init+0x36c>)
 8006fb8:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 8006fba:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fbc:	03ae      	lsls	r6, r5, #14
 8006fbe:	d47b      	bmi.n	80070b8 <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8006fc0:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 8006fc2:	4e53      	ldr	r6, [pc, #332]	@ (8007110 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fc4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 8006fc6:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 8006fc8:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fca:	d472      	bmi.n	80070b2 <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8006fcc:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8006fce:	4d50      	ldr	r5, [pc, #320]	@ (8007110 <HAL_GPIO_Init+0x36c>)
 8006fd0:	602c      	str	r4, [r5, #0]
    position++;
 8006fd2:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006fd4:	fa33 f402 	lsrs.w	r4, r3, r2
 8006fd8:	f43f af7a 	beq.w	8006ed0 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006fdc:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8006fe0:	ea13 0c0e 	ands.w	ip, r3, lr
 8006fe4:	d0f5      	beq.n	8006fd2 <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006fe6:	684d      	ldr	r5, [r1, #4]
 8006fe8:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fea:	2603      	movs	r6, #3
 8006fec:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ff0:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ff4:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ff8:	f104 38ff 	add.w	r8, r4, #4294967295
 8006ffc:	f1b8 0f01 	cmp.w	r8, #1
 8007000:	f67f af69 	bls.w	8006ed6 <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007004:	2c03      	cmp	r4, #3
 8007006:	d0a4      	beq.n	8006f52 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 8007008:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800700c:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 800700e:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007012:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007016:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800701a:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 800701e:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007022:	e796      	b.n	8006f52 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 8007024:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007028:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800702a:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800702e:	fa03 f804 	lsl.w	r8, r3, r4
 8007032:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8007036:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800703a:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800703e:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007040:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007044:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8007048:	fa0c fc02 	lsl.w	ip, ip, r2
 800704c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8007050:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8007054:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007058:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800705c:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007060:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007064:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 8007066:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800706a:	f47f aec5 	bne.w	8006df8 <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800706e:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8007070:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007074:	f002 0c07 	and.w	ip, r2, #7
 8007078:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800707c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007080:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8007084:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007088:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800708a:	230f      	movs	r3, #15
 800708c:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007090:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007092:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007096:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800709a:	f8c8 c020 	str.w	ip, [r8, #32]
 800709e:	e6ab      	b.n	8006df8 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 80070a0:	ea44 040c 	orr.w	r4, r4, ip
 80070a4:	e780      	b.n	8006fa8 <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070a6:	f04f 0c02 	mov.w	ip, #2
 80070aa:	fa0c f707 	lsl.w	r7, ip, r7
 80070ae:	433e      	orrs	r6, r7
 80070b0:	e6e1      	b.n	8006e76 <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 80070b2:	ea4c 0404 	orr.w	r4, ip, r4
 80070b6:	e78a      	b.n	8006fce <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 80070b8:	ea44 040c 	orr.w	r4, r4, ip
 80070bc:	e781      	b.n	8006fc2 <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 80070be:	ea4c 0404 	orr.w	r4, ip, r4
 80070c2:	e778      	b.n	8006fb6 <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070c4:	f04f 0c01 	mov.w	ip, #1
 80070c8:	fa0c f707 	lsl.w	r7, ip, r7
 80070cc:	433e      	orrs	r6, r7
 80070ce:	e6d2      	b.n	8006e76 <HAL_GPIO_Init+0xd2>
 80070d0:	f04f 0c03 	mov.w	ip, #3
 80070d4:	fa0c f707 	lsl.w	r7, ip, r7
 80070d8:	433e      	orrs	r6, r7
 80070da:	e6cc      	b.n	8006e76 <HAL_GPIO_Init+0xd2>
 80070dc:	4770      	bx	lr
 80070de:	f04f 0c04 	mov.w	ip, #4
 80070e2:	fa0c f707 	lsl.w	r7, ip, r7
 80070e6:	433e      	orrs	r6, r7
 80070e8:	e6c5      	b.n	8006e76 <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 80070ea:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070ee:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070f0:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070f4:	fa03 fc04 	lsl.w	ip, r3, r4
 80070f8:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 80070fc:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007100:	e67a      	b.n	8006df8 <HAL_GPIO_Init+0x54>
 8007102:	bf00      	nop
 8007104:	40021000 	.word	0x40021000
 8007108:	48000400 	.word	0x48000400
 800710c:	48000800 	.word	0x48000800
 8007110:	40010400 	.word	0x40010400
 8007114:	48000c00 	.word	0x48000c00
 8007118:	48001000 	.word	0x48001000
 800711c:	48001400 	.word	0x48001400

08007120 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8007120:	2800      	cmp	r0, #0
 8007122:	d06f      	beq.n	8007204 <HAL_OPAMP_Init+0xe4>
{
 8007124:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007126:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800712a:	2b05      	cmp	r3, #5
{
 800712c:	b083      	sub	sp, #12
 800712e:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007130:	d056      	beq.n	80071e0 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007132:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007136:	2b02      	cmp	r3, #2
 8007138:	d052      	beq.n	80071e0 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800713a:	4b33      	ldr	r3, [pc, #204]	@ (8007208 <HAL_OPAMP_Init+0xe8>)
 800713c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	661a      	str	r2, [r3, #96]	@ 0x60
 8007144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800714e:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007152:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007156:	b90b      	cbnz	r3, 800715c <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007158:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800715c:	4620      	mov	r0, r4
 800715e:	f7fe f857 	bl	8005210 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007162:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007164:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007166:	f023 0220 	bic.w	r2, r3, #32
 800716a:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007170:	d039      	beq.n	80071e6 <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007172:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8007174:	f021 0110 	bic.w	r1, r1, #16
 8007178:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 800717a:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 800717c:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 800717e:	432b      	orrs	r3, r5
 8007180:	4303      	orrs	r3, r0
 8007182:	6920      	ldr	r0, [r4, #16]
 8007184:	6811      	ldr	r1, [r2, #0]
 8007186:	4303      	orrs	r3, r0
 8007188:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800718a:	4303      	orrs	r3, r0
 800718c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800718e:	4303      	orrs	r3, r0
 8007190:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007192:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8007196:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007198:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800719c:	481b      	ldr	r0, [pc, #108]	@ (800720c <HAL_OPAMP_Init+0xec>)
 800719e:	4008      	ands	r0, r1
 80071a0:	7d21      	ldrb	r1, [r4, #20]
 80071a2:	f1a1 0101 	sub.w	r1, r1, #1
 80071a6:	fab1 f181 	clz	r1, r1
 80071aa:	4303      	orrs	r3, r0
 80071ac:	0949      	lsrs	r1, r1, #5
 80071ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80071b2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80071b4:	6993      	ldr	r3, [r2, #24]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	db09      	blt.n	80071ce <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80071ba:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80071be:	6991      	ldr	r1, [r2, #24]
 80071c0:	4303      	orrs	r3, r0
 80071c2:	6a20      	ldr	r0, [r4, #32]
 80071c4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80071c8:	4303      	orrs	r3, r0
 80071ca:	430b      	orrs	r3, r1
 80071cc:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80071ce:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80071d2:	b913      	cbnz	r3, 80071da <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80071da:	2000      	movs	r0, #0
  }
}
 80071dc:	b003      	add	sp, #12
 80071de:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80071e0:	2001      	movs	r0, #1
}
 80071e2:	b003      	add	sp, #12
 80071e4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 80071e6:	f021 0110 	bic.w	r1, r1, #16
 80071ea:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 80071ec:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 80071ee:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80071f0:	4303      	orrs	r3, r0
 80071f2:	6920      	ldr	r0, [r4, #16]
 80071f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80071f6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80071f8:	4303      	orrs	r3, r0
 80071fa:	430b      	orrs	r3, r1
 80071fc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80071fe:	6811      	ldr	r1, [r2, #0]
 8007200:	432b      	orrs	r3, r5
 8007202:	e7c6      	b.n	8007192 <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8007204:	2001      	movs	r0, #1
}
 8007206:	4770      	bx	lr
 8007208:	40021000 	.word	0x40021000
 800720c:	e0003e11 	.word	0xe0003e11

08007210 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007210:	4a35      	ldr	r2, [pc, #212]	@ (80072e8 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007212:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007214:	b960      	cbnz	r0, 8007230 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007216:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800721a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800721e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007222:	d01b      	beq.n	800725c <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800722c:	2000      	movs	r0, #0
}
 800722e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007230:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007234:	d006      	beq.n	8007244 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007236:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800723a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800723e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007240:	2000      	movs	r0, #0
}
 8007242:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800724c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007250:	d029      	beq.n	80072a6 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007256:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800725a:	e7f1      	b.n	8007240 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800725c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007264:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007266:	4821      	ldr	r0, [pc, #132]	@ (80072ec <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007268:	4921      	ldr	r1, [pc, #132]	@ (80072f0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800726a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800726e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007272:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007274:	6803      	ldr	r3, [r0, #0]
 8007276:	2032      	movs	r0, #50	@ 0x32
 8007278:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800727c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800727e:	fba1 1303 	umull	r1, r3, r1, r3
 8007282:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007284:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007286:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800728a:	d506      	bpl.n	800729a <HAL_PWREx_ControlVoltageScaling+0x8a>
 800728c:	e000      	b.n	8007290 <HAL_PWREx_ControlVoltageScaling+0x80>
 800728e:	b123      	cbz	r3, 800729a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007290:	6951      	ldr	r1, [r2, #20]
 8007292:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007294:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007298:	d4f9      	bmi.n	800728e <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800729a:	4b13      	ldr	r3, [pc, #76]	@ (80072e8 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	055b      	lsls	r3, r3, #21
 80072a0:	d5ce      	bpl.n	8007240 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 80072a2:	2003      	movs	r0, #3
 80072a4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072ae:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072b0:	480e      	ldr	r0, [pc, #56]	@ (80072ec <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80072b2:	490f      	ldr	r1, [pc, #60]	@ (80072f0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072bc:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072be:	6803      	ldr	r3, [r0, #0]
 80072c0:	2032      	movs	r0, #50	@ 0x32
 80072c2:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072c6:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072c8:	fba1 1303 	umull	r1, r3, r1, r3
 80072cc:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072ce:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072d0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072d4:	d5e1      	bpl.n	800729a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80072d6:	e001      	b.n	80072dc <HAL_PWREx_ControlVoltageScaling+0xcc>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0de      	beq.n	800729a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80072dc:	6951      	ldr	r1, [r2, #20]
 80072de:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80072e0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072e4:	d5d9      	bpl.n	800729a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80072e6:	e7f7      	b.n	80072d8 <HAL_PWREx_ControlVoltageScaling+0xc8>
 80072e8:	40007000 	.word	0x40007000
 80072ec:	20000500 	.word	0x20000500
 80072f0:	431bde83 	.word	0x431bde83

080072f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80072f4:	4a02      	ldr	r2, [pc, #8]	@ (8007300 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80072f6:	6893      	ldr	r3, [r2, #8]
 80072f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072fc:	6093      	str	r3, [r2, #8]
}
 80072fe:	4770      	bx	lr
 8007300:	40007000 	.word	0x40007000

08007304 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007304:	2800      	cmp	r0, #0
 8007306:	f000 81bd 	beq.w	8007684 <HAL_RCC_OscConfig+0x380>
{
 800730a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800730e:	6803      	ldr	r3, [r0, #0]
 8007310:	07d9      	lsls	r1, r3, #31
{
 8007312:	b082      	sub	sp, #8
 8007314:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007316:	d512      	bpl.n	800733e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007318:	49a6      	ldr	r1, [pc, #664]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 800731a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800731c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800731e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007322:	2a0c      	cmp	r2, #12
 8007324:	f000 80d0 	beq.w	80074c8 <HAL_RCC_OscConfig+0x1c4>
 8007328:	2a08      	cmp	r2, #8
 800732a:	f040 80d2 	bne.w	80074d2 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800732e:	4aa1      	ldr	r2, [pc, #644]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	0392      	lsls	r2, r2, #14
 8007334:	d503      	bpl.n	800733e <HAL_RCC_OscConfig+0x3a>
 8007336:	6862      	ldr	r2, [r4, #4]
 8007338:	2a00      	cmp	r2, #0
 800733a:	f000 8137 	beq.w	80075ac <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800733e:	079a      	lsls	r2, r3, #30
 8007340:	d522      	bpl.n	8007388 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007342:	4a9c      	ldr	r2, [pc, #624]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 8007344:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007346:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007348:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800734c:	2b0c      	cmp	r3, #12
 800734e:	f000 80f8 	beq.w	8007542 <HAL_RCC_OscConfig+0x23e>
 8007352:	2b04      	cmp	r3, #4
 8007354:	f040 80fa 	bne.w	800754c <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007358:	4b96      	ldr	r3, [pc, #600]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	055b      	lsls	r3, r3, #21
 800735e:	d503      	bpl.n	8007368 <HAL_RCC_OscConfig+0x64>
 8007360:	68e3      	ldr	r3, [r4, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8122 	beq.w	80075ac <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007368:	4a92      	ldr	r2, [pc, #584]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 800736a:	6920      	ldr	r0, [r4, #16]
 800736c:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800736e:	4992      	ldr	r1, [pc, #584]	@ (80075b8 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007370:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007374:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007378:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800737a:	6808      	ldr	r0, [r1, #0]
 800737c:	f7fe fa2c 	bl	80057d8 <HAL_InitTick>
 8007380:	2800      	cmp	r0, #0
 8007382:	f040 8113 	bne.w	80075ac <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	071a      	lsls	r2, r3, #28
 800738a:	d519      	bpl.n	80073c0 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800738c:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800738e:	4d89      	ldr	r5, [pc, #548]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80c2 	beq.w	800751a <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8007396:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800739a:	f043 0301 	orr.w	r3, r3, #1
 800739e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a2:	f7fe fa63 	bl	800586c <HAL_GetTick>
 80073a6:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073a8:	e005      	b.n	80073b6 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073aa:	f7fe fa5f 	bl	800586c <HAL_GetTick>
 80073ae:	1b80      	subs	r0, r0, r6
 80073b0:	2802      	cmp	r0, #2
 80073b2:	f200 8117 	bhi.w	80075e4 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073b6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80073ba:	079b      	lsls	r3, r3, #30
 80073bc:	d5f5      	bpl.n	80073aa <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	075d      	lsls	r5, r3, #29
 80073c2:	d541      	bpl.n	8007448 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80073c4:	4b7b      	ldr	r3, [pc, #492]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 80073c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80073c8:	00d0      	lsls	r0, r2, #3
 80073ca:	f100 810f 	bmi.w	80075ec <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80073d0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80073d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80073d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80073e0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073e2:	4e76      	ldr	r6, [pc, #472]	@ (80075bc <HAL_RCC_OscConfig+0x2b8>)
 80073e4:	6833      	ldr	r3, [r6, #0]
 80073e6:	05d9      	lsls	r1, r3, #23
 80073e8:	f140 812e 	bpl.w	8007648 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073ec:	68a3      	ldr	r3, [r4, #8]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	f000 80fe 	beq.w	80075f0 <HAL_RCC_OscConfig+0x2ec>
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	f000 8184 	beq.w	8007702 <HAL_RCC_OscConfig+0x3fe>
 80073fa:	4e6e      	ldr	r6, [pc, #440]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 80073fc:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8007408:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 800740c:	f022 0204 	bic.w	r2, r2, #4
 8007410:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007414:	2b00      	cmp	r3, #0
 8007416:	f040 80f2 	bne.w	80075fe <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741a:	f7fe fa27 	bl	800586c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800741e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007422:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007424:	e005      	b.n	8007432 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007426:	f7fe fa21 	bl	800586c <HAL_GetTick>
 800742a:	1bc0      	subs	r0, r0, r7
 800742c:	4540      	cmp	r0, r8
 800742e:	f200 80d9 	bhi.w	80075e4 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007432:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8007436:	0799      	lsls	r1, r3, #30
 8007438:	d4f5      	bmi.n	8007426 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800743a:	b125      	cbz	r5, 8007446 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800743c:	4a5d      	ldr	r2, [pc, #372]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 800743e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007444:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	069a      	lsls	r2, r3, #26
 800744a:	d518      	bpl.n	800747e <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800744c:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800744e:	4d59      	ldr	r5, [pc, #356]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80e5 	beq.w	8007620 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8007456:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007462:	f7fe fa03 	bl	800586c <HAL_GetTick>
 8007466:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007468:	e005      	b.n	8007476 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800746a:	f7fe f9ff 	bl	800586c <HAL_GetTick>
 800746e:	1b80      	subs	r0, r0, r6
 8007470:	2802      	cmp	r0, #2
 8007472:	f200 80b7 	bhi.w	80075e4 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007476:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800747a:	079b      	lsls	r3, r3, #30
 800747c:	d5f5      	bpl.n	800746a <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	b1f3      	cbz	r3, 80074c0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007482:	4d4c      	ldr	r5, [pc, #304]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 8007484:	68aa      	ldr	r2, [r5, #8]
 8007486:	f002 020c 	and.w	r2, r2, #12
 800748a:	2a0c      	cmp	r2, #12
 800748c:	f000 8147 	beq.w	800771e <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007490:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007498:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800749a:	f000 80f5 	beq.w	8007688 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749e:	f7fe f9e5 	bl	800586c <HAL_GetTick>
 80074a2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a4:	e005      	b.n	80074b2 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a6:	f7fe f9e1 	bl	800586c <HAL_GetTick>
 80074aa:	1b00      	subs	r0, r0, r4
 80074ac:	2802      	cmp	r0, #2
 80074ae:	f200 8099 	bhi.w	80075e4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	019b      	lsls	r3, r3, #6
 80074b6:	d4f6      	bmi.n	80074a6 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074b8:	68ea      	ldr	r2, [r5, #12]
 80074ba:	4b41      	ldr	r3, [pc, #260]	@ (80075c0 <HAL_RCC_OscConfig+0x2bc>)
 80074bc:	4013      	ands	r3, r2
 80074be:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 80074c0:	2000      	movs	r0, #0
}
 80074c2:	b002      	add	sp, #8
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074c8:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80074cc:	2903      	cmp	r1, #3
 80074ce:	f43f af2e 	beq.w	800732e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d8:	d055      	beq.n	8007586 <HAL_RCC_OscConfig+0x282>
 80074da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074de:	f000 80c4 	beq.w	800766a <HAL_RCC_OscConfig+0x366>
 80074e2:	4d34      	ldr	r5, [pc, #208]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 80074e4:	682a      	ldr	r2, [r5, #0]
 80074e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80074ea:	602a      	str	r2, [r5, #0]
 80074ec:	682a      	ldr	r2, [r5, #0]
 80074ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80074f2:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d14b      	bne.n	8007590 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 80074f8:	f7fe f9b8 	bl	800586c <HAL_GetTick>
 80074fc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074fe:	e004      	b.n	800750a <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007500:	f7fe f9b4 	bl	800586c <HAL_GetTick>
 8007504:	1b80      	subs	r0, r0, r6
 8007506:	2864      	cmp	r0, #100	@ 0x64
 8007508:	d86c      	bhi.n	80075e4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	0399      	lsls	r1, r3, #14
 800750e:	d4f7      	bmi.n	8007500 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	079a      	lsls	r2, r3, #30
 8007514:	f57f af38 	bpl.w	8007388 <HAL_RCC_OscConfig+0x84>
 8007518:	e713      	b.n	8007342 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 800751a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800751e:	f023 0301 	bic.w	r3, r3, #1
 8007522:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8007526:	f7fe f9a1 	bl	800586c <HAL_GetTick>
 800752a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800752c:	e004      	b.n	8007538 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800752e:	f7fe f99d 	bl	800586c <HAL_GetTick>
 8007532:	1b80      	subs	r0, r0, r6
 8007534:	2802      	cmp	r0, #2
 8007536:	d855      	bhi.n	80075e4 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007538:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800753c:	079f      	lsls	r7, r3, #30
 800753e:	d4f6      	bmi.n	800752e <HAL_RCC_OscConfig+0x22a>
 8007540:	e73d      	b.n	80073be <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007542:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007546:	2a02      	cmp	r2, #2
 8007548:	f43f af06 	beq.w	8007358 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800754c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800754e:	4d19      	ldr	r5, [pc, #100]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007550:	2b00      	cmp	r3, #0
 8007552:	d037      	beq.n	80075c4 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800755a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800755c:	f7fe f986 	bl	800586c <HAL_GetTick>
 8007560:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007562:	e004      	b.n	800756e <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007564:	f7fe f982 	bl	800586c <HAL_GetTick>
 8007568:	1b80      	subs	r0, r0, r6
 800756a:	2802      	cmp	r0, #2
 800756c:	d83a      	bhi.n	80075e4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	055f      	lsls	r7, r3, #21
 8007572:	d5f7      	bpl.n	8007564 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007574:	686b      	ldr	r3, [r5, #4]
 8007576:	6922      	ldr	r2, [r4, #16]
 8007578:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800757c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007580:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	e700      	b.n	8007388 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007586:	4a0b      	ldr	r2, [pc, #44]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
 8007588:	6813      	ldr	r3, [r2, #0]
 800758a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800758e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007590:	f7fe f96c 	bl	800586c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007594:	4e07      	ldr	r6, [pc, #28]	@ (80075b4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8007596:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007598:	e004      	b.n	80075a4 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800759a:	f7fe f967 	bl	800586c <HAL_GetTick>
 800759e:	1b40      	subs	r0, r0, r5
 80075a0:	2864      	cmp	r0, #100	@ 0x64
 80075a2:	d81f      	bhi.n	80075e4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075a4:	6833      	ldr	r3, [r6, #0]
 80075a6:	039f      	lsls	r7, r3, #14
 80075a8:	d5f7      	bpl.n	800759a <HAL_RCC_OscConfig+0x296>
 80075aa:	e7b1      	b.n	8007510 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 80075ac:	2001      	movs	r0, #1
}
 80075ae:	b002      	add	sp, #8
 80075b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b4:	40021000 	.word	0x40021000
 80075b8:	20000508 	.word	0x20000508
 80075bc:	40007000 	.word	0x40007000
 80075c0:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80075cc:	f7fe f94e 	bl	800586c <HAL_GetTick>
 80075d0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	0559      	lsls	r1, r3, #21
 80075d6:	f57f aed6 	bpl.w	8007386 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075da:	f7fe f947 	bl	800586c <HAL_GetTick>
 80075de:	1b80      	subs	r0, r0, r6
 80075e0:	2802      	cmp	r0, #2
 80075e2:	d9f6      	bls.n	80075d2 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 80075e4:	2003      	movs	r0, #3
}
 80075e6:	b002      	add	sp, #8
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80075ec:	2500      	movs	r5, #0
 80075ee:	e6f8      	b.n	80073e2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075f0:	4a65      	ldr	r2, [pc, #404]	@ (8007788 <HAL_RCC_OscConfig+0x484>)
 80075f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80075fe:	f7fe f935 	bl	800586c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007602:	4f61      	ldr	r7, [pc, #388]	@ (8007788 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8007604:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007606:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800760a:	e004      	b.n	8007616 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800760c:	f7fe f92e 	bl	800586c <HAL_GetTick>
 8007610:	1b80      	subs	r0, r0, r6
 8007612:	4540      	cmp	r0, r8
 8007614:	d8e6      	bhi.n	80075e4 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007616:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800761a:	079b      	lsls	r3, r3, #30
 800761c:	d5f6      	bpl.n	800760c <HAL_RCC_OscConfig+0x308>
 800761e:	e70c      	b.n	800743a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8007620:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800762c:	f7fe f91e 	bl	800586c <HAL_GetTick>
 8007630:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007632:	e004      	b.n	800763e <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007634:	f7fe f91a 	bl	800586c <HAL_GetTick>
 8007638:	1b80      	subs	r0, r0, r6
 800763a:	2802      	cmp	r0, #2
 800763c:	d8d2      	bhi.n	80075e4 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800763e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007642:	079f      	lsls	r7, r3, #30
 8007644:	d4f6      	bmi.n	8007634 <HAL_RCC_OscConfig+0x330>
 8007646:	e71a      	b.n	800747e <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007648:	6833      	ldr	r3, [r6, #0]
 800764a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800764e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007650:	f7fe f90c 	bl	800586c <HAL_GetTick>
 8007654:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007656:	6833      	ldr	r3, [r6, #0]
 8007658:	05da      	lsls	r2, r3, #23
 800765a:	f53f aec7 	bmi.w	80073ec <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800765e:	f7fe f905 	bl	800586c <HAL_GetTick>
 8007662:	1bc0      	subs	r0, r0, r7
 8007664:	2802      	cmp	r0, #2
 8007666:	d9f6      	bls.n	8007656 <HAL_RCC_OscConfig+0x352>
 8007668:	e7bc      	b.n	80075e4 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800766a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800766e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007680:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007682:	e785      	b.n	8007590 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8007684:	2001      	movs	r0, #1
}
 8007686:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8007688:	f7fe f8f0 	bl	800586c <HAL_GetTick>
 800768c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800768e:	e004      	b.n	800769a <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007690:	f7fe f8ec 	bl	800586c <HAL_GetTick>
 8007694:	1b80      	subs	r0, r0, r6
 8007696:	2802      	cmp	r0, #2
 8007698:	d8a4      	bhi.n	80075e4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	0199      	lsls	r1, r3, #6
 800769e:	d4f7      	bmi.n	8007690 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076a0:	68e9      	ldr	r1, [r5, #12]
 80076a2:	4b3a      	ldr	r3, [pc, #232]	@ (800778c <HAL_RCC_OscConfig+0x488>)
 80076a4:	6a22      	ldr	r2, [r4, #32]
 80076a6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80076a8:	400b      	ands	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 80076b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076b4:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80076b8:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 80076bc:	3801      	subs	r0, #1
 80076be:	0849      	lsrs	r1, r1, #1
 80076c0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80076c4:	3901      	subs	r1, #1
 80076c6:	0852      	lsrs	r2, r2, #1
 80076c8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80076cc:	3a01      	subs	r2, #1
 80076ce:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80076d2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076da:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076dc:	68eb      	ldr	r3, [r5, #12]
 80076de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076e2:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80076e4:	f7fe f8c2 	bl	800586c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076e8:	4d27      	ldr	r5, [pc, #156]	@ (8007788 <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 80076ea:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076ec:	e005      	b.n	80076fa <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ee:	f7fe f8bd 	bl	800586c <HAL_GetTick>
 80076f2:	1b00      	subs	r0, r0, r4
 80076f4:	2802      	cmp	r0, #2
 80076f6:	f63f af75 	bhi.w	80075e4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076fa:	682b      	ldr	r3, [r5, #0]
 80076fc:	019a      	lsls	r2, r3, #6
 80076fe:	d5f6      	bpl.n	80076ee <HAL_RCC_OscConfig+0x3ea>
 8007700:	e6de      	b.n	80074c0 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007702:	4b21      	ldr	r3, [pc, #132]	@ (8007788 <HAL_RCC_OscConfig+0x484>)
 8007704:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007708:	f042 0204 	orr.w	r2, r2, #4
 800770c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8007710:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007714:	f042 0201 	orr.w	r2, r2, #1
 8007718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800771c:	e76f      	b.n	80075fe <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800771e:	2b01      	cmp	r3, #1
 8007720:	f43f af44 	beq.w	80075ac <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8007724:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007726:	6a22      	ldr	r2, [r4, #32]
 8007728:	f003 0103 	and.w	r1, r3, #3
 800772c:	4291      	cmp	r1, r2
 800772e:	f47f af3d 	bne.w	80075ac <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007732:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007734:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007738:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800773a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800773e:	f47f af35 	bne.w	80075ac <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007742:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007744:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007748:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800774c:	f47f af2e 	bne.w	80075ac <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007750:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007752:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007756:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800775a:	f47f af27 	bne.w	80075ac <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800775e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007760:	0852      	lsrs	r2, r2, #1
 8007762:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8007766:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007768:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800776c:	f47f af1e 	bne.w	80075ac <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007770:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8007772:	0852      	lsrs	r2, r2, #1
 8007774:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8007778:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800777a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800777e:	bf14      	ite	ne
 8007780:	2001      	movne	r0, #1
 8007782:	2000      	moveq	r0, #0
 8007784:	e69d      	b.n	80074c2 <HAL_RCC_OscConfig+0x1be>
 8007786:	bf00      	nop
 8007788:	40021000 	.word	0x40021000
 800778c:	019f800c 	.word	0x019f800c

08007790 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007790:	4b18      	ldr	r3, [pc, #96]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x64>)
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	f002 020c 	and.w	r2, r2, #12
 8007798:	2a04      	cmp	r2, #4
 800779a:	d026      	beq.n	80077ea <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	f002 020c 	and.w	r2, r2, #12
 80077a2:	2a08      	cmp	r2, #8
 80077a4:	d023      	beq.n	80077ee <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	f002 020c 	and.w	r2, r2, #12
 80077ac:	2a0c      	cmp	r2, #12
 80077ae:	d001      	beq.n	80077b4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80077b0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80077b2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077b4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077b6:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077b8:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077ba:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80077be:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077c0:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077c4:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077c8:	bf0c      	ite	eq
 80077ca:	4b0b      	ldreq	r3, [pc, #44]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077cc:	4b0b      	ldrne	r3, [pc, #44]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077ce:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077d4:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077d8:	4b06      	ldr	r3, [pc, #24]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80077e0:	3301      	adds	r3, #1
 80077e2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80077e4:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80077e8:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80077ea:	4804      	ldr	r0, [pc, #16]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x6c>)
 80077ec:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80077ee:	4802      	ldr	r0, [pc, #8]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x68>)
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40021000 	.word	0x40021000
 80077f8:	007a1200 	.word	0x007a1200
 80077fc:	00f42400 	.word	0x00f42400

08007800 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007800:	2800      	cmp	r0, #0
 8007802:	f000 80ee 	beq.w	80079e2 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007806:	4a78      	ldr	r2, [pc, #480]	@ (80079e8 <HAL_RCC_ClockConfig+0x1e8>)
{
 8007808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800780c:	6813      	ldr	r3, [r2, #0]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	428b      	cmp	r3, r1
 8007814:	460d      	mov	r5, r1
 8007816:	4604      	mov	r4, r0
 8007818:	d20c      	bcs.n	8007834 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	f023 030f 	bic.w	r3, r3, #15
 8007820:	430b      	orrs	r3, r1
 8007822:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007824:	6813      	ldr	r3, [r2, #0]
 8007826:	f003 030f 	and.w	r3, r3, #15
 800782a:	428b      	cmp	r3, r1
 800782c:	d002      	beq.n	8007834 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800782e:	2001      	movs	r0, #1
}
 8007830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	07df      	lsls	r7, r3, #31
 8007838:	d569      	bpl.n	800790e <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800783a:	6867      	ldr	r7, [r4, #4]
 800783c:	2f03      	cmp	r7, #3
 800783e:	f000 80a0 	beq.w	8007982 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007842:	4b6a      	ldr	r3, [pc, #424]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007844:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007846:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007848:	f000 8097 	beq.w	800797a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800784c:	055b      	lsls	r3, r3, #21
 800784e:	d5ee      	bpl.n	800782e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007850:	f7ff ff9e 	bl	8007790 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007854:	4b66      	ldr	r3, [pc, #408]	@ (80079f0 <HAL_RCC_ClockConfig+0x1f0>)
 8007856:	4298      	cmp	r0, r3
 8007858:	f240 80c0 	bls.w	80079dc <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800785c:	4a63      	ldr	r2, [pc, #396]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 800785e:	6893      	ldr	r3, [r2, #8]
 8007860:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007868:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800786a:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800786e:	4e5f      	ldr	r6, [pc, #380]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 8007870:	68b3      	ldr	r3, [r6, #8]
 8007872:	f023 0303 	bic.w	r3, r3, #3
 8007876:	433b      	orrs	r3, r7
 8007878:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800787a:	f7fd fff7 	bl	800586c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800787e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8007882:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007884:	e004      	b.n	8007890 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007886:	f7fd fff1 	bl	800586c <HAL_GetTick>
 800788a:	1bc0      	subs	r0, r0, r7
 800788c:	4540      	cmp	r0, r8
 800788e:	d871      	bhi.n	8007974 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007890:	68b3      	ldr	r3, [r6, #8]
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	f003 030c 	and.w	r3, r3, #12
 8007898:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800789c:	d1f3      	bne.n	8007886 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	079f      	lsls	r7, r3, #30
 80078a2:	d436      	bmi.n	8007912 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80078a4:	f1b9 0f00 	cmp.w	r9, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80078aa:	68b3      	ldr	r3, [r6, #8]
 80078ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078b0:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078b2:	4e4d      	ldr	r6, [pc, #308]	@ (80079e8 <HAL_RCC_ClockConfig+0x1e8>)
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	42ab      	cmp	r3, r5
 80078bc:	d846      	bhi.n	800794c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	075a      	lsls	r2, r3, #29
 80078c2:	d506      	bpl.n	80078d2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078c4:	4949      	ldr	r1, [pc, #292]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 80078c6:	68e0      	ldr	r0, [r4, #12]
 80078c8:	688a      	ldr	r2, [r1, #8]
 80078ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078ce:	4302      	orrs	r2, r0
 80078d0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d2:	071b      	lsls	r3, r3, #28
 80078d4:	d507      	bpl.n	80078e6 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078d6:	4a45      	ldr	r2, [pc, #276]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 80078d8:	6921      	ldr	r1, [r4, #16]
 80078da:	6893      	ldr	r3, [r2, #8]
 80078dc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80078e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80078e4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078e6:	f7ff ff53 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 80078ea:	4a40      	ldr	r2, [pc, #256]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 80078ec:	4c41      	ldr	r4, [pc, #260]	@ (80079f4 <HAL_RCC_ClockConfig+0x1f4>)
 80078ee:	6892      	ldr	r2, [r2, #8]
 80078f0:	4941      	ldr	r1, [pc, #260]	@ (80079f8 <HAL_RCC_ClockConfig+0x1f8>)
 80078f2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80078f6:	4603      	mov	r3, r0
 80078f8:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80078fa:	4840      	ldr	r0, [pc, #256]	@ (80079fc <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078fc:	f002 021f 	and.w	r2, r2, #31
 8007900:	40d3      	lsrs	r3, r2
 8007902:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007904:	6800      	ldr	r0, [r0, #0]
}
 8007906:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800790a:	f7fd bf65 	b.w	80057d8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800790e:	079e      	lsls	r6, r3, #30
 8007910:	d5cf      	bpl.n	80078b2 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007912:	0758      	lsls	r0, r3, #29
 8007914:	d504      	bpl.n	8007920 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007916:	4935      	ldr	r1, [pc, #212]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 8007918:	688a      	ldr	r2, [r1, #8]
 800791a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800791e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007920:	0719      	lsls	r1, r3, #28
 8007922:	d506      	bpl.n	8007932 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007924:	4a31      	ldr	r2, [pc, #196]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 8007926:	6893      	ldr	r3, [r2, #8]
 8007928:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800792c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007930:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007932:	4a2e      	ldr	r2, [pc, #184]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 8007934:	68a1      	ldr	r1, [r4, #8]
 8007936:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007938:	4e2b      	ldr	r6, [pc, #172]	@ (80079e8 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800793a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800793e:	430b      	orrs	r3, r1
 8007940:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007942:	6833      	ldr	r3, [r6, #0]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	42ab      	cmp	r3, r5
 800794a:	d9b8      	bls.n	80078be <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794c:	6833      	ldr	r3, [r6, #0]
 800794e:	f023 030f 	bic.w	r3, r3, #15
 8007952:	432b      	orrs	r3, r5
 8007954:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007956:	f7fd ff89 	bl	800586c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800795a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800795e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007960:	6833      	ldr	r3, [r6, #0]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	42ab      	cmp	r3, r5
 8007968:	d0a9      	beq.n	80078be <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800796a:	f7fd ff7f 	bl	800586c <HAL_GetTick>
 800796e:	1bc0      	subs	r0, r0, r7
 8007970:	4540      	cmp	r0, r8
 8007972:	d9f5      	bls.n	8007960 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007974:	2003      	movs	r0, #3
}
 8007976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800797a:	039a      	lsls	r2, r3, #14
 800797c:	f53f af68 	bmi.w	8007850 <HAL_RCC_ClockConfig+0x50>
 8007980:	e755      	b.n	800782e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007982:	4a1a      	ldr	r2, [pc, #104]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
 8007984:	6811      	ldr	r1, [r2, #0]
 8007986:	0188      	lsls	r0, r1, #6
 8007988:	f57f af51 	bpl.w	800782e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800798c:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800798e:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007990:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8007992:	4e17      	ldr	r6, [pc, #92]	@ (80079f0 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007994:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8007998:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800799a:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800799e:	bf0c      	ite	eq
 80079a0:	4817      	ldreq	r0, [pc, #92]	@ (8007a00 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079a2:	4818      	ldrne	r0, [pc, #96]	@ (8007a04 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079a4:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079a6:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079aa:	4810      	ldr	r0, [pc, #64]	@ (80079ec <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079ac:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80079b0:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079b4:	68c1      	ldr	r1, [r0, #12]
 80079b6:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80079ba:	3101      	adds	r1, #1
 80079bc:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80079be:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80079c2:	42b2      	cmp	r2, r6
 80079c4:	d90a      	bls.n	80079dc <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80079c6:	6882      	ldr	r2, [r0, #8]
 80079c8:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 80079cc:	f43f af46 	beq.w	800785c <HAL_RCC_ClockConfig+0x5c>
 80079d0:	0799      	lsls	r1, r3, #30
 80079d2:	d503      	bpl.n	80079dc <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80079d4:	68a3      	ldr	r3, [r4, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f43f af40 	beq.w	800785c <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80079dc:	f04f 0900 	mov.w	r9, #0
 80079e0:	e745      	b.n	800786e <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80079e2:	2001      	movs	r0, #1
}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40022000 	.word	0x40022000
 80079ec:	40021000 	.word	0x40021000
 80079f0:	04c4b400 	.word	0x04c4b400
 80079f4:	08010300 	.word	0x08010300
 80079f8:	20000500 	.word	0x20000500
 80079fc:	20000508 	.word	0x20000508
 8007a00:	007a1200 	.word	0x007a1200
 8007a04:	00f42400 	.word	0x00f42400

08007a08 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8007a08:	4b01      	ldr	r3, [pc, #4]	@ (8007a10 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20000500 	.word	0x20000500

08007a14 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007a16:	4a06      	ldr	r2, [pc, #24]	@ (8007a30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007a18:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007a1a:	4906      	ldr	r1, [pc, #24]	@ (8007a34 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	5cd3      	ldrb	r3, [r2, r3]
 8007a24:	f003 031f 	and.w	r3, r3, #31
}
 8007a28:	40d8      	lsrs	r0, r3
 8007a2a:	4770      	bx	lr
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	080102f8 	.word	0x080102f8
 8007a34:	20000500 	.word	0x20000500

08007a38 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a38:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007a3a:	4a06      	ldr	r2, [pc, #24]	@ (8007a54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007a3e:	4906      	ldr	r1, [pc, #24]	@ (8007a58 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a40:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	5cd3      	ldrb	r3, [r2, r3]
 8007a48:	f003 031f 	and.w	r3, r3, #31
}
 8007a4c:	40d8      	lsrs	r0, r3
 8007a4e:	4770      	bx	lr
 8007a50:	40021000 	.word	0x40021000
 8007a54:	080102f8 	.word	0x080102f8
 8007a58:	20000500 	.word	0x20000500

08007a5c <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007a5c:	4a02      	ldr	r2, [pc, #8]	@ (8007a68 <HAL_RCC_EnableCSS+0xc>)
 8007a5e:	6813      	ldr	r3, [r2, #0]
 8007a60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a64:	6013      	str	r3, [r2, #0]
}
 8007a66:	4770      	bx	lr
 8007a68:	40021000 	.word	0x40021000

08007a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a70:	6803      	ldr	r3, [r0, #0]
{
 8007a72:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a74:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8007a78:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a7a:	d041      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a7c:	4ba0      	ldr	r3, [pc, #640]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007a7e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a80:	00d5      	lsls	r5, r2, #3
 8007a82:	f140 80f7 	bpl.w	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 8007a86:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a88:	4d9e      	ldr	r5, [pc, #632]	@ (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8007a8a:	682b      	ldr	r3, [r5, #0]
 8007a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a90:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a92:	f7fd feeb 	bl	800586c <HAL_GetTick>
 8007a96:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a98:	e004      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a9a:	f7fd fee7 	bl	800586c <HAL_GetTick>
 8007a9e:	1b83      	subs	r3, r0, r6
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d828      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	05d8      	lsls	r0, r3, #23
 8007aa8:	d5f7      	bpl.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007aaa:	4d95      	ldr	r5, [pc, #596]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007aac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007aae:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ab2:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8007ab6:	f000 8119 	beq.w	8007cec <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007aba:	4293      	cmp	r3, r2
 8007abc:	f000 8116 	beq.w	8007cec <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ac0:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ac4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007acc:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ad0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ad8:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007adc:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ae0:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8007ae2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ae6:	f140 8101 	bpl.w	8007cec <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aea:	f7fd febf 	bl	800586c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aee:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8007af2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007af4:	e0f5      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007af6:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007af8:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8007afa:	2f00      	cmp	r7, #0
 8007afc:	f040 80c5 	bne.w	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b00:	07de      	lsls	r6, r3, #31
 8007b02:	d508      	bpl.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b04:	497e      	ldr	r1, [pc, #504]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007b06:	6865      	ldr	r5, [r4, #4]
 8007b08:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007b0c:	f022 0203 	bic.w	r2, r2, #3
 8007b10:	432a      	orrs	r2, r5
 8007b12:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b16:	079d      	lsls	r5, r3, #30
 8007b18:	d508      	bpl.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b1a:	4979      	ldr	r1, [pc, #484]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007b1c:	68a5      	ldr	r5, [r4, #8]
 8007b1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007b22:	f022 020c 	bic.w	r2, r2, #12
 8007b26:	432a      	orrs	r2, r5
 8007b28:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b2c:	0759      	lsls	r1, r3, #29
 8007b2e:	d508      	bpl.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b30:	4973      	ldr	r1, [pc, #460]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007b32:	68e5      	ldr	r5, [r4, #12]
 8007b34:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007b38:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8007b3c:	432a      	orrs	r2, r5
 8007b3e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b42:	071a      	lsls	r2, r3, #28
 8007b44:	d508      	bpl.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b46:	496e      	ldr	r1, [pc, #440]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007b48:	6925      	ldr	r5, [r4, #16]
 8007b4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007b4e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8007b52:	432a      	orrs	r2, r5
 8007b54:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b58:	069f      	lsls	r7, r3, #26
 8007b5a:	d508      	bpl.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b5c:	4968      	ldr	r1, [pc, #416]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007b5e:	6965      	ldr	r5, [r4, #20]
 8007b60:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007b64:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007b68:	432a      	orrs	r2, r5
 8007b6a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b6e:	065e      	lsls	r6, r3, #25
 8007b70:	d508      	bpl.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b72:	4963      	ldr	r1, [pc, #396]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007b74:	69a5      	ldr	r5, [r4, #24]
 8007b76:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007b7a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007b7e:	432a      	orrs	r2, r5
 8007b80:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b84:	061d      	lsls	r5, r3, #24
 8007b86:	d508      	bpl.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b88:	495d      	ldr	r1, [pc, #372]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007b8a:	69e5      	ldr	r5, [r4, #28]
 8007b8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007b90:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007b94:	432a      	orrs	r2, r5
 8007b96:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b9a:	05d9      	lsls	r1, r3, #23
 8007b9c:	d508      	bpl.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b9e:	4958      	ldr	r1, [pc, #352]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007ba0:	6a25      	ldr	r5, [r4, #32]
 8007ba2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007ba6:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8007baa:	432a      	orrs	r2, r5
 8007bac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bb0:	059a      	lsls	r2, r3, #22
 8007bb2:	d508      	bpl.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bb4:	4952      	ldr	r1, [pc, #328]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007bb6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007bb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007bbc:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8007bc0:	432a      	orrs	r2, r5
 8007bc2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bc6:	055f      	lsls	r7, r3, #21
 8007bc8:	d50b      	bpl.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bca:	494d      	ldr	r1, [pc, #308]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007bcc:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007bce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007bd2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8007bd6:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007bd8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bdc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007be0:	d059      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x22a>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007be2:	051e      	lsls	r6, r3, #20
 8007be4:	d50b      	bpl.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007be6:	4946      	ldr	r1, [pc, #280]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007be8:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8007bea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007bee:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8007bf2:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007bf4:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bf8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007bfc:	d050      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x234>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bfe:	04dd      	lsls	r5, r3, #19
 8007c00:	d50b      	bpl.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c02:	493f      	ldr	r1, [pc, #252]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007c04:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8007c06:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c0a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007c0e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c10:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c14:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c18:	d047      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c1a:	0499      	lsls	r1, r3, #18
 8007c1c:	d50b      	bpl.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c1e:	4938      	ldr	r1, [pc, #224]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007c20:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8007c22:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c26:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8007c2a:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c2c:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c30:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c34:	d03e      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c36:	045a      	lsls	r2, r3, #17
 8007c38:	d50b      	bpl.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c3a:	4931      	ldr	r1, [pc, #196]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007c3c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007c3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c42:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8007c46:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c48:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c4c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c50:	d035      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	d50b      	bpl.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c56:	4a2a      	ldr	r2, [pc, #168]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007c58:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007c5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007c5e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007c62:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c64:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c6c:	d02c      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 8007c6e:	b002      	add	sp, #8
 8007c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007c76:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007c7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007c86:	2701      	movs	r7, #1
 8007c88:	e6fe      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c8a:	491d      	ldr	r1, [pc, #116]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007c8c:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8007c8e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007c92:	658a      	str	r2, [r1, #88]	@ 0x58
 8007c94:	e734      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c96:	68ca      	ldr	r2, [r1, #12]
 8007c98:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007c9c:	60ca      	str	r2, [r1, #12]
 8007c9e:	e7a0      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ca0:	68ca      	ldr	r2, [r1, #12]
 8007ca2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007ca6:	60ca      	str	r2, [r1, #12]
 8007ca8:	e7a9      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007caa:	68ca      	ldr	r2, [r1, #12]
 8007cac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007cb0:	60ca      	str	r2, [r1, #12]
 8007cb2:	e7b2      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cb4:	68ca      	ldr	r2, [r1, #12]
 8007cb6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007cba:	60ca      	str	r2, [r1, #12]
 8007cbc:	e7bb      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbe:	68ca      	ldr	r2, [r1, #12]
 8007cc0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007cc4:	60ca      	str	r2, [r1, #12]
 8007cc6:	e7c4      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007cc8:	68d3      	ldr	r3, [r2, #12]
 8007cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cce:	60d3      	str	r3, [r2, #12]
}
 8007cd0:	b002      	add	sp, #8
 8007cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cd6:	f7fd fdc9 	bl	800586c <HAL_GetTick>
 8007cda:	1b80      	subs	r0, r0, r6
 8007cdc:	4540      	cmp	r0, r8
 8007cde:	f63f af0a 	bhi.w	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ce2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007ce6:	079b      	lsls	r3, r3, #30
 8007ce8:	d5f5      	bpl.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cea:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007cec:	4904      	ldr	r1, [pc, #16]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007cee:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8007cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e6fb      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8007d00:	40021000 	.word	0x40021000
 8007d04:	40007000 	.word	0x40007000

08007d08 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d08:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0a:	6a02      	ldr	r2, [r0, #32]
 8007d0c:	f022 0201 	bic.w	r2, r2, #1
{
 8007d10:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d12:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d16:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007d1e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007d22:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d24:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007d26:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007d2a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d2c:	4d13      	ldr	r5, [pc, #76]	@ (8007d7c <TIM_OC1_SetConfig+0x74>)
 8007d2e:	42a8      	cmp	r0, r5
 8007d30:	d00f      	beq.n	8007d52 <TIM_OC1_SetConfig+0x4a>
 8007d32:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007d36:	42a8      	cmp	r0, r5
 8007d38:	d00b      	beq.n	8007d52 <TIM_OC1_SetConfig+0x4a>
 8007d3a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8007d3e:	42a8      	cmp	r0, r5
 8007d40:	d007      	beq.n	8007d52 <TIM_OC1_SetConfig+0x4a>
 8007d42:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d46:	42a8      	cmp	r0, r5
 8007d48:	d003      	beq.n	8007d52 <TIM_OC1_SetConfig+0x4a>
 8007d4a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d4e:	42a8      	cmp	r0, r5
 8007d50:	d10d      	bne.n	8007d6e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d52:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d54:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007d58:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d5a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d5e:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d62:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d66:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d6a:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d6e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007d70:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007d72:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007d74:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8007d76:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8007d78:	6203      	str	r3, [r0, #32]
}
 8007d7a:	4770      	bx	lr
 8007d7c:	40012c00 	.word	0x40012c00

08007d80 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d80:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d82:	6a02      	ldr	r2, [r0, #32]
 8007d84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8007d88:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d8a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d8e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007d96:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007d9a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d9c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8007d9e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007da2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007da6:	4d14      	ldr	r5, [pc, #80]	@ (8007df8 <TIM_OC3_SetConfig+0x78>)
 8007da8:	42a8      	cmp	r0, r5
 8007daa:	d00f      	beq.n	8007dcc <TIM_OC3_SetConfig+0x4c>
 8007dac:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007db0:	42a8      	cmp	r0, r5
 8007db2:	d00b      	beq.n	8007dcc <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db4:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8007db8:	42a8      	cmp	r0, r5
 8007dba:	d00e      	beq.n	8007dda <TIM_OC3_SetConfig+0x5a>
 8007dbc:	4d0f      	ldr	r5, [pc, #60]	@ (8007dfc <TIM_OC3_SetConfig+0x7c>)
 8007dbe:	42a8      	cmp	r0, r5
 8007dc0:	d00b      	beq.n	8007dda <TIM_OC3_SetConfig+0x5a>
 8007dc2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007dc6:	42a8      	cmp	r0, r5
 8007dc8:	d10f      	bne.n	8007dea <TIM_OC3_SetConfig+0x6a>
 8007dca:	e006      	b.n	8007dda <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dcc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dda:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dde:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007de2:	ea46 0c05 	orr.w	ip, r6, r5
 8007de6:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dea:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007dec:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007dee:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007df0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007df2:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8007df4:	6203      	str	r3, [r0, #32]
}
 8007df6:	4770      	bx	lr
 8007df8:	40012c00 	.word	0x40012c00
 8007dfc:	40014400 	.word	0x40014400

08007e00 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e00:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e02:	6a02      	ldr	r2, [r0, #32]
 8007e04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 8007e08:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e0a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e0e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e12:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007e16:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e1e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007e20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007e28:	4d14      	ldr	r5, [pc, #80]	@ (8007e7c <TIM_OC4_SetConfig+0x7c>)
 8007e2a:	42a8      	cmp	r0, r5
 8007e2c:	d00f      	beq.n	8007e4e <TIM_OC4_SetConfig+0x4e>
 8007e2e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007e32:	42a8      	cmp	r0, r5
 8007e34:	d00b      	beq.n	8007e4e <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e36:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8007e3a:	42a8      	cmp	r0, r5
 8007e3c:	d00e      	beq.n	8007e5c <TIM_OC4_SetConfig+0x5c>
 8007e3e:	4d10      	ldr	r5, [pc, #64]	@ (8007e80 <TIM_OC4_SetConfig+0x80>)
 8007e40:	42a8      	cmp	r0, r5
 8007e42:	d00b      	beq.n	8007e5c <TIM_OC4_SetConfig+0x5c>
 8007e44:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007e48:	42a8      	cmp	r0, r5
 8007e4a:	d10f      	bne.n	8007e6c <TIM_OC4_SetConfig+0x6c>
 8007e4c:	e006      	b.n	8007e5c <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007e4e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007e50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007e54:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007e58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007e5c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007e60:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007e64:	ea46 0c05 	orr.w	ip, r6, r5
 8007e68:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e6c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007e6e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007e70:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007e72:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8007e74:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8007e76:	6203      	str	r3, [r0, #32]
}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40012c00 	.word	0x40012c00
 8007e80:	40014400 	.word	0x40014400

08007e84 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d075      	beq.n	8007f74 <HAL_TIM_Base_Init+0xf0>
{
 8007e88:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007e8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007e8e:	4604      	mov	r4, r0
 8007e90:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d068      	beq.n	8007f6a <HAL_TIM_Base_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e98:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e9a:	4e37      	ldr	r6, [pc, #220]	@ (8007f78 <HAL_TIM_Base_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8007e9c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e9e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea0:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ea8:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8007eaa:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eac:	d04c      	beq.n	8007f48 <HAL_TIM_Base_Init+0xc4>
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb2:	d017      	beq.n	8007ee4 <HAL_TIM_Base_Init+0x60>
 8007eb4:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8007eb8:	42b3      	cmp	r3, r6
 8007eba:	d013      	beq.n	8007ee4 <HAL_TIM_Base_Init+0x60>
 8007ebc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007ec0:	42b3      	cmp	r3, r6
 8007ec2:	d00f      	beq.n	8007ee4 <HAL_TIM_Base_Init+0x60>
 8007ec4:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8007ec8:	42b3      	cmp	r3, r6
 8007eca:	d03d      	beq.n	8007f48 <HAL_TIM_Base_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ecc:	4e2b      	ldr	r6, [pc, #172]	@ (8007f7c <HAL_TIM_Base_Init+0xf8>)
 8007ece:	42b3      	cmp	r3, r6
 8007ed0:	d03e      	beq.n	8007f50 <HAL_TIM_Base_Init+0xcc>
 8007ed2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007ed6:	42b3      	cmp	r3, r6
 8007ed8:	d03a      	beq.n	8007f50 <HAL_TIM_Base_Init+0xcc>
 8007eda:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007ede:	42b3      	cmp	r3, r6
 8007ee0:	d108      	bne.n	8007ef4 <HAL_TIM_Base_Init+0x70>
 8007ee2:	e035      	b.n	8007f50 <HAL_TIM_Base_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8007ee4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ee6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007eea:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eec:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ef2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ef8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8007efa:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007efc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007efe:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007f00:	2201      	movs	r2, #1
 8007f02:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	07d2      	lsls	r2, r2, #31
 8007f08:	d503      	bpl.n	8007f12 <HAL_TIM_Base_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f12:	2301      	movs	r3, #1
 8007f14:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007f1c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007f20:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007f24:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f30:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007f34:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007f38:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007f3c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007f40:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007f44:	2000      	movs	r0, #0
}
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8007f48:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f4a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007f4e:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f50:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f52:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f56:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f5c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8007f5e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f60:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007f62:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007f64:	6962      	ldr	r2, [r4, #20]
 8007f66:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f68:	e7ca      	b.n	8007f00 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8007f6a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007f6e:	f7fd f9d9 	bl	8005324 <HAL_TIM_Base_MspInit>
 8007f72:	e791      	b.n	8007e98 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8007f74:	2001      	movs	r0, #1
}
 8007f76:	4770      	bx	lr
 8007f78:	40012c00 	.word	0x40012c00
 8007f7c:	40014000 	.word	0x40014000

08007f80 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007f80:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d11f      	bne.n	8007fc8 <HAL_TIM_Base_Start+0x48>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f88:	6803      	ldr	r3, [r0, #0]
 8007f8a:	4a15      	ldr	r2, [pc, #84]	@ (8007fe0 <HAL_TIM_Base_Start+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007f8c:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f8e:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f94:	d01a      	beq.n	8007fcc <HAL_TIM_Base_Start+0x4c>
 8007f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f9a:	d017      	beq.n	8007fcc <HAL_TIM_Base_Start+0x4c>
 8007f9c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d013      	beq.n	8007fcc <HAL_TIM_Base_Start+0x4c>
 8007fa4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00f      	beq.n	8007fcc <HAL_TIM_Base_Start+0x4c>
 8007fac:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00b      	beq.n	8007fcc <HAL_TIM_Base_Start+0x4c>
 8007fb4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d007      	beq.n	8007fcc <HAL_TIM_Base_Start+0x4c>
      __HAL_TIM_ENABLE(htim);
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	f042 0201 	orr.w	r2, r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	4770      	bx	lr
    return HAL_ERROR;
 8007fc8:	2001      	movs	r0, #1
}
 8007fca:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fcc:	6899      	ldr	r1, [r3, #8]
 8007fce:	4a05      	ldr	r2, [pc, #20]	@ (8007fe4 <HAL_TIM_Base_Start+0x64>)
 8007fd0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd2:	2a06      	cmp	r2, #6
 8007fd4:	d0f6      	beq.n	8007fc4 <HAL_TIM_Base_Start+0x44>
 8007fd6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007fda:	d1ef      	bne.n	8007fbc <HAL_TIM_Base_Start+0x3c>
 8007fdc:	e7f2      	b.n	8007fc4 <HAL_TIM_Base_Start+0x44>
 8007fde:	bf00      	nop
 8007fe0:	40012c00 	.word	0x40012c00
 8007fe4:	00010007 	.word	0x00010007

08007fe8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d075      	beq.n	80080d8 <HAL_TIM_PWM_Init+0xf0>
{
 8007fec:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007fee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d068      	beq.n	80080ce <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ffc:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ffe:	4e37      	ldr	r6, [pc, #220]	@ (80080dc <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8008000:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008002:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008004:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8008006:	2202      	movs	r2, #2
 8008008:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800800c:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 800800e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008010:	d04c      	beq.n	80080ac <HAL_TIM_PWM_Init+0xc4>
 8008012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008016:	d017      	beq.n	8008048 <HAL_TIM_PWM_Init+0x60>
 8008018:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800801c:	42b3      	cmp	r3, r6
 800801e:	d013      	beq.n	8008048 <HAL_TIM_PWM_Init+0x60>
 8008020:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008024:	42b3      	cmp	r3, r6
 8008026:	d00f      	beq.n	8008048 <HAL_TIM_PWM_Init+0x60>
 8008028:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 800802c:	42b3      	cmp	r3, r6
 800802e:	d03d      	beq.n	80080ac <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008030:	4e2b      	ldr	r6, [pc, #172]	@ (80080e0 <HAL_TIM_PWM_Init+0xf8>)
 8008032:	42b3      	cmp	r3, r6
 8008034:	d03e      	beq.n	80080b4 <HAL_TIM_PWM_Init+0xcc>
 8008036:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800803a:	42b3      	cmp	r3, r6
 800803c:	d03a      	beq.n	80080b4 <HAL_TIM_PWM_Init+0xcc>
 800803e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008042:	42b3      	cmp	r3, r6
 8008044:	d108      	bne.n	8008058 <HAL_TIM_PWM_Init+0x70>
 8008046:	e035      	b.n	80080b4 <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8008048:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800804a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800804e:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008050:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008052:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008056:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800805c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800805e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008060:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008062:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008064:	2201      	movs	r2, #1
 8008066:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	07d2      	lsls	r2, r2, #31
 800806c:	d503      	bpl.n	8008076 <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800806e:	691a      	ldr	r2, [r3, #16]
 8008070:	f022 0201 	bic.w	r2, r2, #1
 8008074:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008076:	2301      	movs	r3, #1
 8008078:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800807c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008080:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008084:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008088:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800808c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008094:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008098:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800809c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80080a0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80080a8:	2000      	movs	r0, #0
}
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80080ac:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80080b2:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080b4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80080b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ba:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080c0:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80080c2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080c4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80080c6:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80080c8:	6962      	ldr	r2, [r4, #20]
 80080ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80080cc:	e7ca      	b.n	8008064 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 80080ce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80080d2:	f7fd f911 	bl	80052f8 <HAL_TIM_PWM_MspInit>
 80080d6:	e791      	b.n	8007ffc <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 80080d8:	2001      	movs	r0, #1
}
 80080da:	4770      	bx	lr
 80080dc:	40012c00 	.word	0x40012c00
 80080e0:	40014000 	.word	0x40014000

080080e4 <HAL_TIM_IC_MspInit>:
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop

080080e8 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d075      	beq.n	80081d8 <HAL_TIM_IC_Init+0xf0>
{
 80080ec:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80080ee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80080f2:	4604      	mov	r4, r0
 80080f4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d068      	beq.n	80081ce <HAL_TIM_IC_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080fc:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080fe:	4e37      	ldr	r6, [pc, #220]	@ (80081dc <HAL_TIM_IC_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8008100:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008102:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008104:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8008106:	2202      	movs	r2, #2
 8008108:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800810c:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 800810e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008110:	d04c      	beq.n	80081ac <HAL_TIM_IC_Init+0xc4>
 8008112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008116:	d017      	beq.n	8008148 <HAL_TIM_IC_Init+0x60>
 8008118:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800811c:	42b3      	cmp	r3, r6
 800811e:	d013      	beq.n	8008148 <HAL_TIM_IC_Init+0x60>
 8008120:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008124:	42b3      	cmp	r3, r6
 8008126:	d00f      	beq.n	8008148 <HAL_TIM_IC_Init+0x60>
 8008128:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 800812c:	42b3      	cmp	r3, r6
 800812e:	d03d      	beq.n	80081ac <HAL_TIM_IC_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008130:	4e2b      	ldr	r6, [pc, #172]	@ (80081e0 <HAL_TIM_IC_Init+0xf8>)
 8008132:	42b3      	cmp	r3, r6
 8008134:	d03e      	beq.n	80081b4 <HAL_TIM_IC_Init+0xcc>
 8008136:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800813a:	42b3      	cmp	r3, r6
 800813c:	d03a      	beq.n	80081b4 <HAL_TIM_IC_Init+0xcc>
 800813e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008142:	42b3      	cmp	r3, r6
 8008144:	d108      	bne.n	8008158 <HAL_TIM_IC_Init+0x70>
 8008146:	e035      	b.n	80081b4 <HAL_TIM_IC_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8008148:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800814a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800814e:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008150:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008152:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008156:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008158:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800815c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800815e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008160:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008162:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008164:	2201      	movs	r2, #1
 8008166:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	07d2      	lsls	r2, r2, #31
 800816c:	d503      	bpl.n	8008176 <HAL_TIM_IC_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	f022 0201 	bic.w	r2, r2, #1
 8008174:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008176:	2301      	movs	r3, #1
 8008178:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800817c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008180:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008184:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008188:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800818c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008198:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800819c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80081a0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80081a4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80081a8:	2000      	movs	r0, #0
}
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80081ac:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80081b2:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081b4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80081b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ba:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081c0:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80081c2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081c4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80081c6:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80081c8:	6962      	ldr	r2, [r4, #20]
 80081ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80081cc:	e7ca      	b.n	8008164 <HAL_TIM_IC_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 80081ce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 80081d2:	f7ff ff87 	bl	80080e4 <HAL_TIM_IC_MspInit>
 80081d6:	e791      	b.n	80080fc <HAL_TIM_IC_Init+0x14>
    return HAL_ERROR;
 80081d8:	2001      	movs	r0, #1
}
 80081da:	4770      	bx	lr
 80081dc:	40012c00 	.word	0x40012c00
 80081e0:	40014000 	.word	0x40014000

080081e4 <HAL_TIM_IC_Start_DMA>:
{
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80081e8:	2910      	cmp	r1, #16
 80081ea:	d80a      	bhi.n	8008202 <HAL_TIM_IC_Start_DMA+0x1e>
 80081ec:	e8df f001 	tbb	[pc, r1]
 80081f0:	09090948 	.word	0x09090948
 80081f4:	09090934 	.word	0x09090934
 80081f8:	0909093c 	.word	0x0909093c
 80081fc:	09090944 	.word	0x09090944
 8008200:	50          	.byte	0x50
 8008201:	00          	.byte	0x00
 8008202:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8008206:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008208:	f894 c047 	ldrb.w	ip, [r4, #71]	@ 0x47
 800820c:	fa5f fc8c 	uxtb.w	ip, ip
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008210:	2802      	cmp	r0, #2
 8008212:	d020      	beq.n	8008256 <HAL_TIM_IC_Start_DMA+0x72>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008214:	f1bc 0f02 	cmp.w	ip, #2
 8008218:	d03e      	beq.n	8008298 <HAL_TIM_IC_Start_DMA+0xb4>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800821a:	2801      	cmp	r0, #1
 800821c:	d11a      	bne.n	8008254 <HAL_TIM_IC_Start_DMA+0x70>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800821e:	f1bc 0f01 	cmp.w	ip, #1
 8008222:	d117      	bne.n	8008254 <HAL_TIM_IC_Start_DMA+0x70>
    if ((pData == NULL) || (Length == 0U))
 8008224:	b1b2      	cbz	r2, 8008254 <HAL_TIM_IC_Start_DMA+0x70>
 8008226:	b1ab      	cbz	r3, 8008254 <HAL_TIM_IC_Start_DMA+0x70>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008228:	6825      	ldr	r5, [r4, #0]
 800822a:	2910      	cmp	r1, #16
 800822c:	d836      	bhi.n	800829c <HAL_TIM_IC_Start_DMA+0xb8>
 800822e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008232:	00a0      	.short	0x00a0
 8008234:	00350035 	.word	0x00350035
 8008238:	007f0035 	.word	0x007f0035
 800823c:	00350035 	.word	0x00350035
 8008240:	00c10035 	.word	0x00c10035
 8008244:	00350035 	.word	0x00350035
 8008248:	00e20035 	.word	0x00e20035
 800824c:	00350035 	.word	0x00350035
 8008250:	00500035 	.word	0x00500035
      return HAL_ERROR;
 8008254:	2001      	movs	r0, #1
}
 8008256:	bd70      	pop	{r4, r5, r6, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008258:	f894 003f 	ldrb.w	r0, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800825c:	f894 c045 	ldrb.w	ip, [r4, #69]	@ 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008260:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008262:	fa5f fc8c 	uxtb.w	ip, ip
 8008266:	e7d3      	b.n	8008210 <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008268:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800826c:	f894 c046 	ldrb.w	ip, [r4, #70]	@ 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008270:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008272:	fa5f fc8c 	uxtb.w	ip, ip
 8008276:	e7cb      	b.n	8008210 <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008278:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 800827c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800827e:	e7c3      	b.n	8008208 <HAL_TIM_IC_Start_DMA+0x24>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008280:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008284:	f894 c044 	ldrb.w	ip, [r4, #68]	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008288:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800828a:	fa5f fc8c 	uxtb.w	ip, ip
 800828e:	e7bf      	b.n	8008210 <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008290:	f894 0042 	ldrb.w	r0, [r4, #66]	@ 0x42
 8008294:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008296:	e7b7      	b.n	8008208 <HAL_TIM_IC_Start_DMA+0x24>
    return HAL_BUSY;
 8008298:	4660      	mov	r0, ip
}
 800829a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800829c:	2002      	movs	r0, #2
 800829e:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082a2:	f884 0047 	strb.w	r0, [r4, #71]	@ 0x47
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082a6:	6a2e      	ldr	r6, [r5, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082a8:	f001 0c1f 	and.w	ip, r1, #31
 80082ac:	2001      	movs	r0, #1
 80082ae:	fa00 f00c 	lsl.w	r0, r0, ip
  TIMx->CCER &= ~tmp;
 80082b2:	ea26 0600 	bic.w	r6, r6, r0
 80082b6:	622e      	str	r6, [r5, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082b8:	6a2e      	ldr	r6, [r5, #32]
  switch (Channel)
 80082ba:	3904      	subs	r1, #4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082bc:	4330      	orrs	r0, r6
 80082be:	6228      	str	r0, [r5, #32]
  switch (Channel)
 80082c0:	2908      	cmp	r1, #8
 80082c2:	d813      	bhi.n	80082ec <HAL_TIM_IC_Start_DMA+0x108>
 80082c4:	e8df f001 	tbb	[pc, r1]
 80082c8:	12121241 	.word	0x12121241
 80082cc:	12121283 	.word	0x12121283
 80082d0:	a4          	.byte	0xa4
 80082d1:	00          	.byte	0x00
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082d2:	2302      	movs	r3, #2
 80082d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082d8:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  TIMx->CCER &= ~tmp;
 80082dc:	6a2b      	ldr	r3, [r5, #32]
 80082de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082e2:	622b      	str	r3, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082e4:	6a2b      	ldr	r3, [r5, #32]
 80082e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082ea:	622b      	str	r3, [r5, #32]
{
 80082ec:	2001      	movs	r0, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ee:	4b58      	ldr	r3, [pc, #352]	@ (8008450 <HAL_TIM_IC_Start_DMA+0x26c>)
 80082f0:	429d      	cmp	r5, r3
 80082f2:	f000 80a1 	beq.w	8008438 <HAL_TIM_IC_Start_DMA+0x254>
 80082f6:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
 80082fa:	f000 809d 	beq.w	8008438 <HAL_TIM_IC_Start_DMA+0x254>
 80082fe:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8008302:	429d      	cmp	r5, r3
 8008304:	f000 8098 	beq.w	8008438 <HAL_TIM_IC_Start_DMA+0x254>
 8008308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800830c:	429d      	cmp	r5, r3
 800830e:	f000 8093 	beq.w	8008438 <HAL_TIM_IC_Start_DMA+0x254>
 8008312:	f503 3396 	add.w	r3, r3, #76800	@ 0x12c00
 8008316:	429d      	cmp	r5, r3
 8008318:	f000 808e 	beq.w	8008438 <HAL_TIM_IC_Start_DMA+0x254>
 800831c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8008320:	429d      	cmp	r5, r3
 8008322:	f000 8089 	beq.w	8008438 <HAL_TIM_IC_Start_DMA+0x254>
    __HAL_TIM_ENABLE(htim);
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	f043 0301 	orr.w	r3, r3, #1
 800832c:	602b      	str	r3, [r5, #0]
}
 800832e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008330:	2102      	movs	r1, #2
 8008332:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008336:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  TIMx->CCER &= ~tmp;
 800833a:	6a29      	ldr	r1, [r5, #32]
 800833c:	f021 0110 	bic.w	r1, r1, #16
 8008340:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008342:	6a29      	ldr	r1, [r5, #32]
 8008344:	f041 0110 	orr.w	r1, r1, #16
 8008348:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800834a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800834c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008350:	4d40      	ldr	r5, [pc, #256]	@ (8008454 <HAL_TIM_IC_Start_DMA+0x270>)
 8008352:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008354:	4d40      	ldr	r5, [pc, #256]	@ (8008458 <HAL_TIM_IC_Start_DMA+0x274>)
 8008356:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008358:	4d40      	ldr	r5, [pc, #256]	@ (800845c <HAL_TIM_IC_Start_DMA+0x278>)
 800835a:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800835c:	f7fe fc40 	bl	8006be0 <HAL_DMA_Start_IT>
 8008360:	2800      	cmp	r0, #0
 8008362:	f47f af77 	bne.w	8008254 <HAL_TIM_IC_Start_DMA+0x70>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008366:	6825      	ldr	r5, [r4, #0]
 8008368:	68eb      	ldr	r3, [r5, #12]
 800836a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800836e:	60eb      	str	r3, [r5, #12]
      break;
 8008370:	e7bd      	b.n	80082ee <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008372:	2102      	movs	r1, #2
 8008374:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008378:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
  TIMx->CCER &= ~tmp;
 800837c:	6a29      	ldr	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800837e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  TIMx->CCER &= ~tmp;
 8008380:	f021 0101 	bic.w	r1, r1, #1
 8008384:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008386:	6a29      	ldr	r1, [r5, #32]
 8008388:	f041 0101 	orr.w	r1, r1, #1
 800838c:	6229      	str	r1, [r5, #32]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800838e:	f105 0134 	add.w	r1, r5, #52	@ 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008392:	4d30      	ldr	r5, [pc, #192]	@ (8008454 <HAL_TIM_IC_Start_DMA+0x270>)
 8008394:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008396:	4d30      	ldr	r5, [pc, #192]	@ (8008458 <HAL_TIM_IC_Start_DMA+0x274>)
 8008398:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800839a:	4d30      	ldr	r5, [pc, #192]	@ (800845c <HAL_TIM_IC_Start_DMA+0x278>)
 800839c:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800839e:	f7fe fc1f 	bl	8006be0 <HAL_DMA_Start_IT>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f47f af56 	bne.w	8008254 <HAL_TIM_IC_Start_DMA+0x70>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80083a8:	6825      	ldr	r5, [r4, #0]
 80083aa:	68eb      	ldr	r3, [r5, #12]
 80083ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80083b0:	60eb      	str	r3, [r5, #12]
      break;
 80083b2:	e79c      	b.n	80082ee <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083b4:	2102      	movs	r1, #2
 80083b6:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ba:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
  TIMx->CCER &= ~tmp;
 80083be:	6a29      	ldr	r1, [r5, #32]
 80083c0:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80083c4:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083c6:	6a29      	ldr	r1, [r5, #32]
 80083c8:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80083cc:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80083ce:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80083d0:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80083d4:	4d1f      	ldr	r5, [pc, #124]	@ (8008454 <HAL_TIM_IC_Start_DMA+0x270>)
 80083d6:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80083d8:	4d1f      	ldr	r5, [pc, #124]	@ (8008458 <HAL_TIM_IC_Start_DMA+0x274>)
 80083da:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80083dc:	4d1f      	ldr	r5, [pc, #124]	@ (800845c <HAL_TIM_IC_Start_DMA+0x278>)
 80083de:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80083e0:	f7fe fbfe 	bl	8006be0 <HAL_DMA_Start_IT>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	f47f af35 	bne.w	8008254 <HAL_TIM_IC_Start_DMA+0x70>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80083ea:	6825      	ldr	r5, [r4, #0]
 80083ec:	68eb      	ldr	r3, [r5, #12]
 80083ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80083f2:	60eb      	str	r3, [r5, #12]
      break;
 80083f4:	e77b      	b.n	80082ee <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083f6:	2102      	movs	r1, #2
 80083f8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fc:	f884 1047 	strb.w	r1, [r4, #71]	@ 0x47
  TIMx->CCER &= ~tmp;
 8008400:	6a29      	ldr	r1, [r5, #32]
 8008402:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8008406:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008408:	6a29      	ldr	r1, [r5, #32]
 800840a:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800840e:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008410:	6b20      	ldr	r0, [r4, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008412:	f105 0140 	add.w	r1, r5, #64	@ 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008416:	4d0f      	ldr	r5, [pc, #60]	@ (8008454 <HAL_TIM_IC_Start_DMA+0x270>)
 8008418:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800841a:	4d0f      	ldr	r5, [pc, #60]	@ (8008458 <HAL_TIM_IC_Start_DMA+0x274>)
 800841c:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800841e:	4d0f      	ldr	r5, [pc, #60]	@ (800845c <HAL_TIM_IC_Start_DMA+0x278>)
 8008420:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008422:	f7fe fbdd 	bl	8006be0 <HAL_DMA_Start_IT>
 8008426:	2800      	cmp	r0, #0
 8008428:	f47f af14 	bne.w	8008254 <HAL_TIM_IC_Start_DMA+0x70>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	68eb      	ldr	r3, [r5, #12]
 8008430:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008434:	60eb      	str	r3, [r5, #12]
      break;
 8008436:	e75a      	b.n	80082ee <HAL_TIM_IC_Start_DMA+0x10a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008438:	68aa      	ldr	r2, [r5, #8]
 800843a:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <HAL_TIM_IC_Start_DMA+0x27c>)
 800843c:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843e:	2b06      	cmp	r3, #6
 8008440:	f43f af09 	beq.w	8008256 <HAL_TIM_IC_Start_DMA+0x72>
 8008444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008448:	f47f af6d 	bne.w	8008326 <HAL_TIM_IC_Start_DMA+0x142>
}
 800844c:	bd70      	pop	{r4, r5, r6, pc}
 800844e:	bf00      	nop
 8008450:	40012c00 	.word	0x40012c00
 8008454:	080089ed 	.word	0x080089ed
 8008458:	08008a85 	.word	0x08008a85
 800845c:	08008ae9 	.word	0x08008ae9
 8008460:	00010007 	.word	0x00010007

08008464 <HAL_TIM_IC_Stop_DMA>:
{
 8008464:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008466:	6803      	ldr	r3, [r0, #0]
{
 8008468:	4604      	mov	r4, r0
  TIMx->CCER &= ~tmp;
 800846a:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800846c:	f001 001f 	and.w	r0, r1, #31
{
 8008470:	460d      	mov	r5, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008472:	2101      	movs	r1, #1
 8008474:	4081      	lsls	r1, r0
  TIMx->CCER &= ~tmp;
 8008476:	ea22 0201 	bic.w	r2, r2, r1
 800847a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800847c:	6a1a      	ldr	r2, [r3, #32]
 800847e:	621a      	str	r2, [r3, #32]
  switch (Channel)
 8008480:	2d0c      	cmp	r5, #12
 8008482:	d808      	bhi.n	8008496 <HAL_TIM_IC_Stop_DMA+0x32>
 8008484:	e8df f005 	tbb	[pc, r5]
 8008488:	0707075b 	.word	0x0707075b
 800848c:	0707073f 	.word	0x0707073f
 8008490:	07070721 	.word	0x07070721
 8008494:	09          	.byte	0x09
 8008495:	00          	.byte	0x00
 8008496:	2001      	movs	r0, #1
}
 8008498:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800849a:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800849c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800849e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80084a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80084a4:	f7fe fbf4 	bl	8006c90 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	6a19      	ldr	r1, [r3, #32]
 80084ac:	f241 1211 	movw	r2, #4369	@ 0x1111
 80084b0:	4211      	tst	r1, r2
 80084b2:	d104      	bne.n	80084be <HAL_TIM_IC_Stop_DMA+0x5a>
 80084b4:	6a19      	ldr	r1, [r3, #32]
 80084b6:	f244 4244 	movw	r2, #17476	@ 0x4444
 80084ba:	4211      	tst	r1, r2
 80084bc:	d017      	beq.n	80084ee <HAL_TIM_IC_Stop_DMA+0x8a>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084be:	2301      	movs	r3, #1
 80084c0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084c4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 80084c8:	e04b      	b.n	8008562 <HAL_TIM_IC_Stop_DMA+0xfe>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80084ca:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80084cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80084ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80084d4:	f7fe fbdc 	bl	8006c90 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	6a19      	ldr	r1, [r3, #32]
 80084dc:	f241 1211 	movw	r2, #4369	@ 0x1111
 80084e0:	4211      	tst	r1, r2
 80084e2:	d10a      	bne.n	80084fa <HAL_TIM_IC_Stop_DMA+0x96>
 80084e4:	6a19      	ldr	r1, [r3, #32]
 80084e6:	f244 4244 	movw	r2, #17476	@ 0x4444
 80084ea:	4211      	tst	r1, r2
 80084ec:	d105      	bne.n	80084fa <HAL_TIM_IC_Stop_DMA+0x96>
 80084ee:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084f0:	2d08      	cmp	r5, #8
    __HAL_TIM_DISABLE(htim);
 80084f2:	f022 0201 	bic.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084f8:	d1e1      	bne.n	80084be <HAL_TIM_IC_Stop_DMA+0x5a>
 80084fa:	2301      	movs	r3, #1
 80084fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008500:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008504:	e02d      	b.n	8008562 <HAL_TIM_IC_Stop_DMA+0xfe>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008506:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008508:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800850a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800850e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008510:	f7fe fbbe 	bl	8006c90 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	6a19      	ldr	r1, [r3, #32]
 8008518:	f241 1211 	movw	r2, #4369	@ 0x1111
 800851c:	4211      	tst	r1, r2
 800851e:	d108      	bne.n	8008532 <HAL_TIM_IC_Stop_DMA+0xce>
 8008520:	6a19      	ldr	r1, [r3, #32]
 8008522:	f244 4244 	movw	r2, #17476	@ 0x4444
 8008526:	4211      	tst	r1, r2
 8008528:	d103      	bne.n	8008532 <HAL_TIM_IC_Stop_DMA+0xce>
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	f022 0201 	bic.w	r2, r2, #1
 8008530:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008532:	2301      	movs	r3, #1
 8008534:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008538:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800853c:	e011      	b.n	8008562 <HAL_TIM_IC_Stop_DMA+0xfe>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800853e:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008540:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008542:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008546:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008548:	f7fe fba2 	bl	8006c90 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	6a19      	ldr	r1, [r3, #32]
 8008550:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008554:	4211      	tst	r1, r2
 8008556:	d006      	beq.n	8008566 <HAL_TIM_IC_Stop_DMA+0x102>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008558:	2301      	movs	r3, #1
 800855a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800855e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  switch (Channel)
 8008562:	2000      	movs	r0, #0
}
 8008564:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_DISABLE(htim);
 8008566:	6a19      	ldr	r1, [r3, #32]
 8008568:	f244 4244 	movw	r2, #17476	@ 0x4444
 800856c:	4211      	tst	r1, r2
 800856e:	d1f3      	bne.n	8008558 <HAL_TIM_IC_Stop_DMA+0xf4>
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	f022 0201 	bic.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008578:	e7ee      	b.n	8008558 <HAL_TIM_IC_Stop_DMA+0xf4>
 800857a:	bf00      	nop

0800857c <HAL_TIM_IC_ConfigChannel>:
{
 800857c:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800857e:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008582:	2801      	cmp	r0, #1
 8008584:	f000 80b7 	beq.w	80086f6 <HAL_TIM_IC_ConfigChannel+0x17a>
 8008588:	2001      	movs	r0, #1
{
 800858a:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800858c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8008590:	2a0c      	cmp	r2, #12
 8008592:	d808      	bhi.n	80085a6 <HAL_TIM_IC_ConfigChannel+0x2a>
 8008594:	e8df f002 	tbb	[pc, r2]
 8008598:	07070734 	.word	0x07070734
 800859c:	07070758 	.word	0x07070758
 80085a0:	0707077a 	.word	0x0707077a
 80085a4:	0d          	.byte	0x0d
 80085a5:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  __HAL_LOCK(htim);
 80085ac:	2001      	movs	r0, #1
}
 80085ae:	bcf0      	pop	{r4, r5, r6, r7}
 80085b0:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 80085b2:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 80085b4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80085b6:	6a14      	ldr	r4, [r2, #32]
                      sConfig->ICSelection,
 80085b8:	e9d1 0500 	ldrd	r0, r5, [r1]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085bc:	0300      	lsls	r0, r0, #12
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80085be:	f424 4420 	bic.w	r4, r4, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085c2:	f400 4020 	and.w	r0, r0, #40960	@ 0xa000
 80085c6:	4320      	orrs	r0, r4
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085c8:	6a14      	ldr	r4, [r2, #32]
 80085ca:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 80085ce:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80085d0:	688c      	ldr	r4, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 80085d2:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80085d4:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80085d8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085dc:	f366 310f 	bfi	r1, r6, #12, #4
  TIMx->CCMR2 = tmpccmr2;
 80085e0:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer ;
 80085e2:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80085e4:	69d1      	ldr	r1, [r2, #28]
 80085e6:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 80085ea:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80085ec:	69d1      	ldr	r1, [r2, #28]
 80085ee:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80085f2:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80085fa:	2000      	movs	r0, #0
}
 80085fc:	bcf0      	pop	{r4, r5, r6, r7}
 80085fe:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 8008600:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008602:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 80086fc <HAL_TIM_IC_ConfigChannel+0x180>
  tmpccer = TIMx->CCER;
 8008606:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008608:	6a16      	ldr	r6, [r2, #32]
                      sConfig->ICFilter);
 800860a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860c:	f026 0601 	bic.w	r6, r6, #1
                      sConfig->ICSelection,
 8008610:	e9d1 0400 	ldrd	r0, r4, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008614:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008616:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008618:	6996      	ldr	r6, [r2, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800861a:	d057      	beq.n	80086cc <HAL_TIM_IC_ConfigChannel+0x150>
 800861c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008620:	d054      	beq.n	80086cc <HAL_TIM_IC_ConfigChannel+0x150>
 8008622:	f5ac 3c94 	sub.w	ip, ip, #75776	@ 0x12800
 8008626:	4562      	cmp	r2, ip
 8008628:	d050      	beq.n	80086cc <HAL_TIM_IC_ConfigChannel+0x150>
 800862a:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800862e:	4562      	cmp	r2, ip
 8008630:	d04c      	beq.n	80086cc <HAL_TIM_IC_ConfigChannel+0x150>
 8008632:	f50c 3c96 	add.w	ip, ip, #76800	@ 0x12c00
 8008636:	4562      	cmp	r2, ip
 8008638:	d048      	beq.n	80086cc <HAL_TIM_IC_ConfigChannel+0x150>
 800863a:	f50c 6c40 	add.w	ip, ip, #3072	@ 0xc00
 800863e:	4562      	cmp	r2, ip
 8008640:	d044      	beq.n	80086cc <HAL_TIM_IC_ConfigChannel+0x150>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008642:	f046 0401 	orr.w	r4, r6, #1
 8008646:	e044      	b.n	80086d2 <HAL_TIM_IC_ConfigChannel+0x156>
    TIM_TI2_SetConfig(htim->Instance,
 8008648:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 800864a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800864c:	6a14      	ldr	r4, [r2, #32]
                      sConfig->ICSelection,
 800864e:	e9d1 0500 	ldrd	r0, r5, [r1]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008652:	0100      	lsls	r0, r0, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008654:	f024 04a0 	bic.w	r4, r4, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008658:	f000 00a0 	and.w	r0, r0, #160	@ 0xa0
 800865c:	4320      	orrs	r0, r4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800865e:	6a14      	ldr	r4, [r2, #32]
 8008660:	f024 0410 	bic.w	r4, r4, #16
 8008664:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008666:	688c      	ldr	r4, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8008668:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800866a:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800866e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008672:	f366 310f 	bfi	r1, r6, #12, #4
  TIMx->CCMR1 = tmpccmr1 ;
 8008676:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008678:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800867a:	6991      	ldr	r1, [r2, #24]
 800867c:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 8008680:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008682:	6991      	ldr	r1, [r2, #24]
 8008684:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8008688:	6191      	str	r1, [r2, #24]
 800868a:	e7b3      	b.n	80085f4 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 800868c:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 800868e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8008690:	6a15      	ldr	r5, [r2, #32]
                      sConfig->ICSelection,
 8008692:	e9d1 0400 	ldrd	r0, r4, [r1]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008696:	0200      	lsls	r0, r0, #8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008698:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800869c:	f400 6020 	and.w	r0, r0, #2560	@ 0xa00
 80086a0:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086a2:	6a15      	ldr	r5, [r2, #32]
 80086a4:	f425 7580 	bic.w	r5, r5, #256	@ 0x100
 80086a8:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80086aa:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 80086ac:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80086ae:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 80086b2:	4321      	orrs	r1, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80086b4:	f366 1107 	bfi	r1, r6, #4, #4
  TIMx->CCMR2 = tmpccmr2;
 80086b8:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 80086ba:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80086bc:	69d1      	ldr	r1, [r2, #28]
 80086be:	f021 010c 	bic.w	r1, r1, #12
 80086c2:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80086c4:	69d1      	ldr	r1, [r2, #28]
 80086c6:	4329      	orrs	r1, r5
 80086c8:	61d1      	str	r1, [r2, #28]
 80086ca:	e793      	b.n	80085f4 <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80086cc:	f026 0603 	bic.w	r6, r6, #3
    tmpccmr1 |= TIM_ICSelection;
 80086d0:	4334      	orrs	r4, r6
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086d2:	f367 1407 	bfi	r4, r7, #4, #4
  TIMx->CCMR1 = tmpccmr1;
 80086d6:	6194      	str	r4, [r2, #24]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086d8:	f000 000a 	and.w	r0, r0, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086dc:	f025 040a 	bic.w	r4, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086e0:	4320      	orrs	r0, r4
  TIMx->CCER = tmpccer;
 80086e2:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80086e4:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80086e6:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80086e8:	f020 000c 	bic.w	r0, r0, #12
 80086ec:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80086ee:	6991      	ldr	r1, [r2, #24]
 80086f0:	4321      	orrs	r1, r4
 80086f2:	6191      	str	r1, [r2, #24]
 80086f4:	e77e      	b.n	80085f4 <HAL_TIM_IC_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 80086f6:	2002      	movs	r0, #2
}
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40012c00 	.word	0x40012c00

08008700 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008700:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8008704:	2a01      	cmp	r2, #1
 8008706:	d073      	beq.n	80087f0 <HAL_TIM_ConfigClockSource+0xf0>
 8008708:	4603      	mov	r3, r0
{
 800870a:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800870c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800870e:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8008710:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008712:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8008716:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800871a:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800871c:	4c5d      	ldr	r4, [pc, #372]	@ (8008894 <HAL_TIM_ConfigClockSource+0x194>)
 800871e:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8008720:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008722:	680c      	ldr	r4, [r1, #0]
 8008724:	2c70      	cmp	r4, #112	@ 0x70
 8008726:	f000 808f 	beq.w	8008848 <HAL_TIM_ConfigClockSource+0x148>
 800872a:	d827      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x7c>
 800872c:	2c50      	cmp	r4, #80	@ 0x50
 800872e:	d061      	beq.n	80087f4 <HAL_TIM_ConfigClockSource+0xf4>
 8008730:	d82d      	bhi.n	800878e <HAL_TIM_ConfigClockSource+0x8e>
 8008732:	2c40      	cmp	r4, #64	@ 0x40
 8008734:	f040 8098 	bne.w	8008868 <HAL_TIM_ConfigClockSource+0x168>
                               sClockSourceConfig->ClockPolarity,
 8008738:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800873a:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800873c:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800873e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008742:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008744:	6a11      	ldr	r1, [r2, #32]
 8008746:	f021 0101 	bic.w	r1, r1, #1
 800874a:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800874c:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800874e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008752:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008756:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008758:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800875a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800875c:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8008760:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008764:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8008768:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800876a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800876c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800876e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8008770:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008778:	bc30      	pop	{r4, r5}
 800877a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800877c:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8008780:	d052      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x128>
 8008782:	d821      	bhi.n	80087c8 <HAL_TIM_ConfigClockSource+0xc8>
 8008784:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8008788:	bf18      	it	ne
 800878a:	2001      	movne	r0, #1
 800878c:	e7ee      	b.n	800876c <HAL_TIM_ConfigClockSource+0x6c>
 800878e:	2c60      	cmp	r4, #96	@ 0x60
 8008790:	d1ec      	bne.n	800876c <HAL_TIM_ConfigClockSource+0x6c>
                               sClockSourceConfig->ClockPolarity,
 8008792:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008794:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8008796:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008798:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800879c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087a0:	6a10      	ldr	r0, [r2, #32]
 80087a2:	f020 0010 	bic.w	r0, r0, #16
 80087a6:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087a8:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087aa:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087ae:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80087b2:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80087b4:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80087b6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80087b8:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80087bc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087c0:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80087c4:	6091      	str	r1, [r2, #8]
}
 80087c6:	e7d0      	b.n	800876a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 80087c8:	4933      	ldr	r1, [pc, #204]	@ (8008898 <HAL_TIM_ConfigClockSource+0x198>)
 80087ca:	428c      	cmp	r4, r1
 80087cc:	d006      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0xdc>
 80087ce:	d854      	bhi.n	800887a <HAL_TIM_ConfigClockSource+0x17a>
 80087d0:	f1b4 1f10 	cmp.w	r4, #1048592	@ 0x100010
 80087d4:	d002      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0xdc>
 80087d6:	3910      	subs	r1, #16
 80087d8:	428c      	cmp	r4, r1
 80087da:	d1c7      	bne.n	800876c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 80087dc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80087de:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80087e2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087e6:	4321      	orrs	r1, r4
 80087e8:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 80087ec:	6091      	str	r1, [r2, #8]
}
 80087ee:	e7bc      	b.n	800876a <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 80087f0:	2002      	movs	r0, #2
}
 80087f2:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 80087f4:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80087f6:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80087f8:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087fa:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80087fe:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008800:	6a11      	ldr	r1, [r2, #32]
 8008802:	f021 0101 	bic.w	r1, r1, #1
 8008806:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008808:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800880a:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800880e:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008812:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008814:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8008816:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008818:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800881c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008820:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8008824:	6091      	str	r1, [r2, #8]
}
 8008826:	e7a0      	b.n	800876a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008828:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800882c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800882e:	4328      	orrs	r0, r5
 8008830:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008832:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008836:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800883a:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800883c:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800883e:	6891      	ldr	r1, [r2, #8]
 8008840:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8008844:	6091      	str	r1, [r2, #8]
      break;
 8008846:	e790      	b.n	800876a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008848:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800884c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800884e:	4328      	orrs	r0, r5
 8008850:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008852:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008856:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800885a:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800885c:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800885e:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008860:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008864:	6091      	str	r1, [r2, #8]
      break;
 8008866:	e780      	b.n	800876a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8008868:	d880      	bhi.n	800876c <HAL_TIM_ConfigClockSource+0x6c>
 800886a:	2c20      	cmp	r4, #32
 800886c:	d0b6      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0xdc>
 800886e:	d80c      	bhi.n	800888a <HAL_TIM_ConfigClockSource+0x18a>
 8008870:	f034 0110 	bics.w	r1, r4, #16
 8008874:	f47f af7a 	bne.w	800876c <HAL_TIM_ConfigClockSource+0x6c>
 8008878:	e7b0      	b.n	80087dc <HAL_TIM_ConfigClockSource+0xdc>
 800887a:	4908      	ldr	r1, [pc, #32]	@ (800889c <HAL_TIM_ConfigClockSource+0x19c>)
 800887c:	428c      	cmp	r4, r1
 800887e:	d0ad      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0xdc>
 8008880:	3130      	adds	r1, #48	@ 0x30
 8008882:	428c      	cmp	r4, r1
 8008884:	f47f af72 	bne.w	800876c <HAL_TIM_ConfigClockSource+0x6c>
 8008888:	e7a8      	b.n	80087dc <HAL_TIM_ConfigClockSource+0xdc>
 800888a:	2c30      	cmp	r4, #48	@ 0x30
 800888c:	d0a6      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0xdc>
      status = HAL_ERROR;
 800888e:	2001      	movs	r0, #1
 8008890:	e76c      	b.n	800876c <HAL_TIM_ConfigClockSource+0x6c>
 8008892:	bf00      	nop
 8008894:	ffce0088 	.word	0xffce0088
 8008898:	00100030 	.word	0x00100030
 800889c:	00100040 	.word	0x00100040

080088a0 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80088a0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d056      	beq.n	8008956 <HAL_TIM_SlaveConfigSynchro+0xb6>
 80088a8:	4602      	mov	r2, r0
{
 80088aa:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 80088ac:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 80088ae:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80088b0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80088b2:	f882 403c 	strb.w	r4, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80088b6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80088ba:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80088bc:	684c      	ldr	r4, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80088be:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80088c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80088c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80088c8:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 80088ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ce:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80088d2:	432b      	orrs	r3, r5
  switch (sSlaveConfig->InputTrigger)
 80088d4:	2c60      	cmp	r4, #96	@ 0x60
  htim->Instance->SMCR = tmpsmcr;
 80088d6:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80088d8:	d065      	beq.n	80089a6 <HAL_TIM_SlaveConfigSynchro+0x106>
 80088da:	d826      	bhi.n	800892a <HAL_TIM_SlaveConfigSynchro+0x8a>
 80088dc:	2c40      	cmp	r4, #64	@ 0x40
 80088de:	d04f      	beq.n	8008980 <HAL_TIM_SlaveConfigSynchro+0xe0>
 80088e0:	d947      	bls.n	8008972 <HAL_TIM_SlaveConfigSynchro+0xd2>
 80088e2:	2c50      	cmp	r4, #80	@ 0x50
 80088e4:	d12f      	bne.n	8008946 <HAL_TIM_SlaveConfigSynchro+0xa6>
                               sSlaveConfig->TriggerPolarity,
 80088e6:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80088e8:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 80088ea:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088ec:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80088f0:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088f2:	6a03      	ldr	r3, [r0, #32]
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088fa:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008900:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008904:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008906:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008908:	68c3      	ldr	r3, [r0, #12]
 800890a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800890e:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008910:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8008912:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8008914:	2401      	movs	r4, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800891a:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 800891c:	f882 403d 	strb.w	r4, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008920:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c
  return HAL_OK;
 8008924:	4608      	mov	r0, r1
}
 8008926:	bc30      	pop	{r4, r5}
 8008928:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800892a:	2c70      	cmp	r4, #112	@ 0x70
 800892c:	d015      	beq.n	800895a <HAL_TIM_SlaveConfigSynchro+0xba>
 800892e:	2c6f      	cmp	r4, #111	@ 0x6f
 8008930:	d909      	bls.n	8008946 <HAL_TIM_SlaveConfigSynchro+0xa6>
 8008932:	4b2b      	ldr	r3, [pc, #172]	@ (80089e0 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d0e7      	beq.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
 8008938:	d848      	bhi.n	80089cc <HAL_TIM_SlaveConfigSynchro+0x12c>
 800893a:	f1b4 1f10 	cmp.w	r4, #1048592	@ 0x100010
 800893e:	d0e3      	beq.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
 8008940:	3b10      	subs	r3, #16
 8008942:	429c      	cmp	r4, r3
 8008944:	d0e0      	beq.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
    htim->State = HAL_TIM_STATE_READY;
 8008946:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8008948:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800894a:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800894e:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8008952:	bc30      	pop	{r4, r5}
 8008954:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008956:	2002      	movs	r0, #2
}
 8008958:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800895a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 800895e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008960:	432b      	orrs	r3, r5
 8008962:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008964:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008968:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800896c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800896e:	6083      	str	r3, [r0, #8]
      break;
 8008970:	e7ca      	b.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
  switch (sSlaveConfig->InputTrigger)
 8008972:	2c20      	cmp	r4, #32
 8008974:	d0c8      	beq.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
 8008976:	d830      	bhi.n	80089da <HAL_TIM_SlaveConfigSynchro+0x13a>
 8008978:	f034 0310 	bics.w	r3, r4, #16
 800897c:	d1e3      	bne.n	8008946 <HAL_TIM_SlaveConfigSynchro+0xa6>
 800897e:	e7c3      	b.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008980:	2d05      	cmp	r5, #5
 8008982:	d0e0      	beq.n	8008946 <HAL_TIM_SlaveConfigSynchro+0xa6>
 8008984:	f1b5 1f01 	cmp.w	r5, #65537	@ 0x10001
 8008988:	d0dd      	beq.n	8008946 <HAL_TIM_SlaveConfigSynchro+0xa6>
      tmpccer = htim->Instance->CCER;
 800898a:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800898c:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800898e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008996:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800899c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80089a0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 80089a2:	6204      	str	r4, [r0, #32]
      break;
 80089a4:	e7b0      	b.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
  tmpccer = TIMx->CCER;
 80089a6:	6a03      	ldr	r3, [r0, #32]
                               sSlaveConfig->TriggerPolarity,
 80089a8:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80089aa:	690c      	ldr	r4, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ac:	6a01      	ldr	r1, [r0, #32]
 80089ae:	f021 0110 	bic.w	r1, r1, #16
 80089b2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089b4:	6981      	ldr	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ba:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80089be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089c2:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80089c6:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 80089c8:	6203      	str	r3, [r0, #32]
      break;
 80089ca:	e79d      	b.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
  switch (sSlaveConfig->InputTrigger)
 80089cc:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <HAL_TIM_SlaveConfigSynchro+0x144>)
 80089ce:	429c      	cmp	r4, r3
 80089d0:	d09a      	beq.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
 80089d2:	3330      	adds	r3, #48	@ 0x30
 80089d4:	429c      	cmp	r4, r3
 80089d6:	d1b6      	bne.n	8008946 <HAL_TIM_SlaveConfigSynchro+0xa6>
 80089d8:	e796      	b.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
 80089da:	2c30      	cmp	r4, #48	@ 0x30
 80089dc:	d1b3      	bne.n	8008946 <HAL_TIM_SlaveConfigSynchro+0xa6>
 80089de:	e793      	b.n	8008908 <HAL_TIM_SlaveConfigSynchro+0x68>
 80089e0:	00100030 	.word	0x00100030
 80089e4:	00100040 	.word	0x00100040

080089e8 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop

080089ec <TIM_DMACaptureCplt>:
{
 80089ec:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089ee:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80089f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80089f2:	4283      	cmp	r3, r0
 80089f4:	d01e      	beq.n	8008a34 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80089f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80089f8:	4283      	cmp	r3, r0
 80089fa:	d00b      	beq.n	8008a14 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80089fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80089fe:	4283      	cmp	r3, r0
 8008a00:	d027      	beq.n	8008a52 <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a04:	4283      	cmp	r3, r0
 8008a06:	d02f      	beq.n	8008a68 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7ff ffed 	bl	80089e8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	7723      	strb	r3, [r4, #28]
}
 8008a12:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a14:	2202      	movs	r2, #2
 8008a16:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f4      	bne.n	8008a08 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_IC_CaptureCallback(htim);
 8008a24:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a26:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 8008a2a:	f7ff ffdd 	bl	80089e8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	7723      	strb	r3, [r4, #28]
}
 8008a32:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a34:	2201      	movs	r2, #1
 8008a36:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e4      	bne.n	8008a08 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a3e:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 8008a42:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a44:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 8008a48:	f7ff ffce 	bl	80089e8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	7723      	strb	r3, [r4, #28]
}
 8008a50:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a52:	2204      	movs	r2, #4
 8008a54:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1d5      	bne.n	8008a08 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008a62:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008a66:	e7cf      	b.n	8008a08 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a68:	2208      	movs	r2, #8
 8008a6a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1ca      	bne.n	8008a08 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008a72:	2301      	movs	r3, #1
 8008a74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008a78:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 8008a7c:	e7c4      	b.n	8008a08 <TIM_DMACaptureCplt+0x1c>
 8008a7e:	bf00      	nop

08008a80 <HAL_TIM_IC_CaptureHalfCpltCallback>:
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop

08008a84 <TIM_DMACaptureHalfCplt>:
{
 8008a84:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a86:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a88:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008a8a:	4282      	cmp	r2, r0
 8008a8c:	d019      	beq.n	8008ac2 <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a8e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008a90:	4282      	cmp	r2, r0
 8008a92:	4603      	mov	r3, r0
 8008a94:	d00d      	beq.n	8008ab2 <TIM_DMACaptureHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008a96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008a98:	4282      	cmp	r2, r0
 8008a9a:	d01a      	beq.n	8008ad2 <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a9c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008a9e:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aa0:	bf04      	itt	eq
 8008aa2:	2308      	moveq	r3, #8
 8008aa4:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff ffea 	bl	8008a80 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aac:	2300      	movs	r3, #0
 8008aae:	7723      	strb	r3, [r4, #28]
}
 8008ab0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f7ff ffe2 	bl	8008a80 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abc:	2300      	movs	r3, #0
 8008abe:	7723      	strb	r3, [r4, #28]
}
 8008ac0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7ff ffda 	bl	8008a80 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008acc:	2300      	movs	r3, #0
 8008ace:	7723      	strb	r3, [r4, #28]
}
 8008ad0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad2:	2304      	movs	r3, #4
 8008ad4:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7ff ffd2 	bl	8008a80 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008adc:	2300      	movs	r3, #0
 8008ade:	7723      	strb	r3, [r4, #28]
}
 8008ae0:	bd10      	pop	{r4, pc}
 8008ae2:	bf00      	nop

08008ae4 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop

08008ae8 <TIM_DMAError>:
{
 8008ae8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aea:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008aec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008aee:	4283      	cmp	r3, r0
 8008af0:	d01c      	beq.n	8008b2c <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008af2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008af4:	4283      	cmp	r3, r0
 8008af6:	d00e      	beq.n	8008b16 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008af8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008afa:	4283      	cmp	r3, r0
 8008afc:	d020      	beq.n	8008b40 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008b00:	4283      	cmp	r3, r0
 8008b02:	d028      	beq.n	8008b56 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  HAL_TIM_ErrorCallback(htim);
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff ffea 	bl	8008ae4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b10:	2300      	movs	r3, #0
 8008b12:	7723      	strb	r3, [r4, #28]
}
 8008b14:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b16:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b18:	2202      	movs	r2, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b1a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b1e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8008b20:	4620      	mov	r0, r4
 8008b22:	f7ff ffdf 	bl	8008ae4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b26:	2300      	movs	r3, #0
 8008b28:	7723      	strb	r3, [r4, #28]
}
 8008b2a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b30:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  HAL_TIM_ErrorCallback(htim);
 8008b34:	4620      	mov	r0, r4
 8008b36:	f7ff ffd5 	bl	8008ae4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	7723      	strb	r3, [r4, #28]
}
 8008b3e:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b40:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b42:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b44:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b48:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f7ff ffca 	bl	8008ae4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b50:	2300      	movs	r3, #0
 8008b52:	7723      	strb	r3, [r4, #28]
}
 8008b54:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008b56:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b58:	2208      	movs	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008b5a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b5e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8008b60:	4620      	mov	r0, r4
 8008b62:	f7ff ffbf 	bl	8008ae4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	2300      	movs	r3, #0
 8008b68:	7723      	strb	r3, [r4, #28]
}
 8008b6a:	bd10      	pop	{r4, pc}

08008b6c <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8008b6c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b6e:	6a02      	ldr	r2, [r0, #32]
 8008b70:	f022 0210 	bic.w	r2, r2, #16
{
 8008b74:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b76:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008b78:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008b7a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b7e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008b82:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b8a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008b8c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b94:	4d14      	ldr	r5, [pc, #80]	@ (8008be8 <TIM_OC2_SetConfig+0x7c>)
 8008b96:	42a8      	cmp	r0, r5
 8008b98:	d00f      	beq.n	8008bba <TIM_OC2_SetConfig+0x4e>
 8008b9a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008b9e:	42a8      	cmp	r0, r5
 8008ba0:	d00b      	beq.n	8008bba <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba2:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008ba6:	42a8      	cmp	r0, r5
 8008ba8:	d00e      	beq.n	8008bc8 <TIM_OC2_SetConfig+0x5c>
 8008baa:	4d10      	ldr	r5, [pc, #64]	@ (8008bec <TIM_OC2_SetConfig+0x80>)
 8008bac:	42a8      	cmp	r0, r5
 8008bae:	d00b      	beq.n	8008bc8 <TIM_OC2_SetConfig+0x5c>
 8008bb0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008bb4:	42a8      	cmp	r0, r5
 8008bb6:	d10f      	bne.n	8008bd8 <TIM_OC2_SetConfig+0x6c>
 8008bb8:	e006      	b.n	8008bc8 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bc8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bcc:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bd0:	ea46 0c05 	orr.w	ip, r6, r5
 8008bd4:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008bd8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008bda:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008bdc:	6182      	str	r2, [r0, #24]
}
 8008bde:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008be0:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8008be2:	6203      	str	r3, [r0, #32]
}
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40012c00 	.word	0x40012c00
 8008bec:	40014400 	.word	0x40014400

08008bf0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008bf0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	f000 80dc 	beq.w	8008db2 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8008bfa:	2301      	movs	r3, #1
{
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008c02:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8008c06:	2a14      	cmp	r2, #20
 8008c08:	d80c      	bhi.n	8008c24 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008c0a:	e8df f002 	tbb	[pc, r2]
 8008c0e:	0b4f      	.short	0x0b4f
 8008c10:	0b630b0b 	.word	0x0b630b0b
 8008c14:	0b740b0b 	.word	0x0b740b0b
 8008c18:	0b840b0b 	.word	0x0b840b0b
 8008c1c:	0b950b0b 	.word	0x0b950b0b
 8008c20:	0b0b      	.short	0x0b0b
 8008c22:	10          	.byte	0x10
 8008c23:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008c24:	2300      	movs	r3, #0
 8008c26:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8008c2a:	2001      	movs	r0, #1
}
 8008c2c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c2e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c30:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008c32:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c34:	6a19      	ldr	r1, [r3, #32]
 8008c36:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8008c3a:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008c3c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008c3e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c40:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8008c44:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c48:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c4c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c4e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c52:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c56:	4e58      	ldr	r6, [pc, #352]	@ (8008db8 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8008c58:	42b3      	cmp	r3, r6
 8008c5a:	d00f      	beq.n	8008c7c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008c5c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008c60:	42b3      	cmp	r3, r6
 8008c62:	d00b      	beq.n	8008c7c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008c64:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008c68:	42b3      	cmp	r3, r6
 8008c6a:	d007      	beq.n	8008c7c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008c6c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008c70:	42b3      	cmp	r3, r6
 8008c72:	d003      	beq.n	8008c7c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008c74:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008c78:	42b3      	cmp	r3, r6
 8008c7a:	d104      	bne.n	8008c86 <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c7c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c7e:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c82:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8008c86:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008c88:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8008c8a:	6869      	ldr	r1, [r5, #4]
 8008c8c:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8008c8e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c92:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c98:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ca0:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ca2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ca4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008ca8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008caa:	e00e      	b.n	8008cca <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cac:	6800      	ldr	r0, [r0, #0]
 8008cae:	f7ff f82b 	bl	8007d08 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cb2:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cb4:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cb6:	f043 0308 	orr.w	r3, r3, #8
 8008cba:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cbc:	6983      	ldr	r3, [r0, #24]
 8008cbe:	f023 0304 	bic.w	r3, r3, #4
 8008cc2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cc4:	6983      	ldr	r3, [r0, #24]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008cd0:	2000      	movs	r0, #0
}
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cd4:	6800      	ldr	r0, [r0, #0]
 8008cd6:	f7ff ff49 	bl	8008b6c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cda:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cdc:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cde:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008ce2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ce4:	6983      	ldr	r3, [r0, #24]
 8008ce6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cea:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cec:	6983      	ldr	r3, [r0, #24]
 8008cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cf2:	6183      	str	r3, [r0, #24]
      break;
 8008cf4:	e7e9      	b.n	8008cca <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cf6:	6800      	ldr	r0, [r0, #0]
 8008cf8:	f7ff f842 	bl	8007d80 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cfc:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cfe:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d00:	f043 0308 	orr.w	r3, r3, #8
 8008d04:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d06:	69c3      	ldr	r3, [r0, #28]
 8008d08:	f023 0304 	bic.w	r3, r3, #4
 8008d0c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d0e:	69c3      	ldr	r3, [r0, #28]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	61c3      	str	r3, [r0, #28]
      break;
 8008d14:	e7d9      	b.n	8008cca <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d16:	6800      	ldr	r0, [r0, #0]
 8008d18:	f7ff f872 	bl	8007e00 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d1c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d1e:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008d24:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d26:	69c3      	ldr	r3, [r0, #28]
 8008d28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d2c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d2e:	69c3      	ldr	r3, [r0, #28]
 8008d30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d34:	61c3      	str	r3, [r0, #28]
      break;
 8008d36:	e7c8      	b.n	8008cca <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d38:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008d3a:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008d3c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d3e:	6a19      	ldr	r1, [r3, #32]
 8008d40:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008d44:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008d46:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008d48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d4a:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008d4e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008d52:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d54:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008d56:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d5a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5e:	4e16      	ldr	r6, [pc, #88]	@ (8008db8 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8008d60:	42b3      	cmp	r3, r6
 8008d62:	d00f      	beq.n	8008d84 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008d64:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008d68:	42b3      	cmp	r3, r6
 8008d6a:	d00b      	beq.n	8008d84 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008d6c:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008d70:	42b3      	cmp	r3, r6
 8008d72:	d007      	beq.n	8008d84 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008d74:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008d78:	42b3      	cmp	r3, r6
 8008d7a:	d003      	beq.n	8008d84 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008d7c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008d80:	42b3      	cmp	r3, r6
 8008d82:	d104      	bne.n	8008d8e <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d84:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d86:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d8a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008d8e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008d90:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008d92:	6869      	ldr	r1, [r5, #4]
 8008d94:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8008d96:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d9a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d9c:	f042 0208 	orr.w	r2, r2, #8
 8008da0:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008da2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008da4:	f022 0204 	bic.w	r2, r2, #4
 8008da8:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008daa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008dac:	430a      	orrs	r2, r1
 8008dae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008db0:	e78b      	b.n	8008cca <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8008db2:	2002      	movs	r0, #2
}
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	40012c00 	.word	0x40012c00

08008dbc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dbc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d046      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8008dc4:	b470      	push	{r4, r5, r6}
 8008dc6:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dc8:	4e23      	ldr	r6, [pc, #140]	@ (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8008dca:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dd2:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8008dd4:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dd6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8008dd8:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dda:	d024      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008ddc:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008de0:	42b0      	cmp	r0, r6
 8008de2:	d02b      	beq.n	8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8008de4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dec:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dee:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008df2:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008df4:	d00a      	beq.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008df6:	4b19      	ldr	r3, [pc, #100]	@ (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008df8:	4298      	cmp	r0, r3
 8008dfa:	d007      	beq.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008dfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e00:	4298      	cmp	r0, r3
 8008e02:	d003      	beq.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008e04:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8008e08:	4298      	cmp	r0, r3
 8008e0a:	d104      	bne.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e0c:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e0e:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e12:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e14:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008e16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008e1e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8008e22:	bc70      	pop	{r4, r5, r6}
 8008e24:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e26:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e28:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e2c:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e2e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e36:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008e38:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e3a:	e7e7      	b.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e3c:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e42:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e44:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e4c:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8008e4e:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e50:	e7dc      	b.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8008e52:	2002      	movs	r0, #2
}
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	40012c00 	.word	0x40012c00
 8008e5c:	40000400 	.word	0x40000400

08008e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e60:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d045      	beq.n	8008ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8008e68:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e6a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8008e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e72:	4602      	mov	r2, r0
 8008e74:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e76:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e78:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e7e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e84:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e86:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e8c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e8e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e94:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e96:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e9c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e9e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ea0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008ea4:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ea6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008eae:	4c12      	ldr	r4, [pc, #72]	@ (8008ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008eb0:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008eb2:	6810      	ldr	r0, [r2, #0]
 8008eb4:	42a0      	cmp	r0, r4
 8008eb6:	d00b      	beq.n	8008ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8008eb8:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8008ebc:	42a0      	cmp	r0, r4
 8008ebe:	d007      	beq.n	8008ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8008ec0:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008ec2:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8008ec4:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8008ec8:	4608      	mov	r0, r1
}
 8008eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ece:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ed0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8008ed2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ed6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008eda:	6a0c      	ldr	r4, [r1, #32]
 8008edc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ee0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ee2:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ee4:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ee6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008eea:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008eec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008ef0:	430b      	orrs	r3, r1
 8008ef2:	e7e5      	b.n	8008ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8008ef4:	2002      	movs	r0, #2
}
 8008ef6:	4770      	bx	lr
 8008ef8:	40012c00 	.word	0x40012c00

08008efc <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008efc:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008efe:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008f02:	2801      	cmp	r0, #1
 8008f04:	d047      	beq.n	8008f96 <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8008f06:	6810      	ldr	r0, [r2, #0]
 8008f08:	3801      	subs	r0, #1
 8008f0a:	280f      	cmp	r0, #15
{
 8008f0c:	b4f0      	push	{r4, r5, r6, r7}
 8008f0e:	d815      	bhi.n	8008f3c <HAL_TIMEx_ConfigBreakInput+0x40>
 8008f10:	4c22      	ldr	r4, [pc, #136]	@ (8008f9c <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8008f12:	4e23      	ldr	r6, [pc, #140]	@ (8008fa0 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8008f14:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8008f18:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8008f1c:	4c21      	ldr	r4, [pc, #132]	@ (8008fa4 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8008f1e:	4e22      	ldr	r6, [pc, #136]	@ (8008fa8 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8008f20:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8008f24:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8008f28:	2901      	cmp	r1, #1
 8008f2a:	d00d      	beq.n	8008f48 <HAL_TIMEx_ConfigBreakInput+0x4c>
 8008f2c:	2902      	cmp	r1, #2
 8008f2e:	d01c      	beq.n	8008f6a <HAL_TIMEx_ConfigBreakInput+0x6e>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8008f36:	2001      	movs	r0, #1

  return status;
}
 8008f38:	bcf0      	pop	{r4, r5, r6, r7}
 8008f3a:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8008f3c:	2700      	movs	r7, #0
  switch (BreakInput)
 8008f3e:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8008f40:	46bc      	mov	ip, r7
 8008f42:	463c      	mov	r4, r7
 8008f44:	463d      	mov	r5, r7
  switch (BreakInput)
 8008f46:	d1f1      	bne.n	8008f2c <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008f48:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8008f4a:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008f4c:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008f4e:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8008f50:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008f52:	fa01 f10c 	lsl.w	r1, r1, ip
 8008f56:	ea81 0207 	eor.w	r2, r1, r7
 8008f5a:	402a      	ands	r2, r5
 8008f5c:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008f5e:	ea80 0102 	eor.w	r1, r0, r2
 8008f62:	4021      	ands	r1, r4
 8008f64:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8008f66:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8008f68:	e00f      	b.n	8008f8a <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008f6a:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 8008f6c:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008f6e:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008f70:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 8008f72:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008f74:	fa01 f10c 	lsl.w	r1, r1, ip
 8008f78:	ea81 0207 	eor.w	r2, r1, r7
 8008f7c:	402a      	ands	r2, r5
 8008f7e:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008f80:	ea80 0102 	eor.w	r1, r0, r2
 8008f84:	4021      	ands	r1, r4
 8008f86:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 8008f88:	6672      	str	r2, [r6, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008f90:	2000      	movs	r0, #0
}
 8008f92:	bcf0      	pop	{r4, r5, r6, r7}
 8008f94:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008f96:	2002      	movs	r0, #2
}
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	080103d0 	.word	0x080103d0
 8008fa0:	08010350 	.word	0x08010350
 8008fa4:	08010390 	.word	0x08010390
 8008fa8:	08010310 	.word	0x08010310

08008fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fb2:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8008fb6:	2820      	cmp	r0, #32
 8008fb8:	d15e      	bne.n	8009078 <HAL_UART_Transmit+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fba:	460d      	mov	r5, r1
 8008fbc:	b109      	cbz	r1, 8008fc2 <HAL_UART_Transmit+0x16>
 8008fbe:	4616      	mov	r6, r2
 8008fc0:	b912      	cbnz	r2, 8008fc8 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 8008fc2:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc8:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fca:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fce:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd0:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fd4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8008fd8:	f7fc fc48 	bl	800586c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fdc:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8008fde:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8008fe6:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8008fe8:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fec:	d047      	beq.n	800907e <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8008fee:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ff2:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d04d      	beq.n	8009096 <HAL_UART_Transmit+0xea>
 8008ffa:	1c7b      	adds	r3, r7, #1
 8008ffc:	d12a      	bne.n	8009054 <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ffe:	69d3      	ldr	r3, [r2, #28]
 8009000:	061f      	lsls	r7, r3, #24
 8009002:	d5fc      	bpl.n	8008ffe <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8009004:	2d00      	cmp	r5, #0
 8009006:	d032      	beq.n	800906e <HAL_UART_Transmit+0xc2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009008:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800900c:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800900e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8009012:	3b01      	subs	r3, #1
 8009014:	b29b      	uxth	r3, r3
 8009016:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800901a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1ec      	bne.n	8008ffe <HAL_UART_Transmit+0x52>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009024:	69d3      	ldr	r3, [r2, #28]
 8009026:	0659      	lsls	r1, r3, #25
 8009028:	d5fc      	bpl.n	8009024 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 800902a:	2320      	movs	r3, #32
 800902c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8009030:	2000      	movs	r0, #0
}
 8009032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8009036:	2d00      	cmp	r5, #0
 8009038:	d040      	beq.n	80090bc <HAL_UART_Transmit+0x110>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800903a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800903e:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8009040:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8009044:	3b01      	subs	r3, #1
 8009046:	b29b      	uxth	r3, r3
 8009048:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800904c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8009050:	b29b      	uxth	r3, r3
 8009052:	b313      	cbz	r3, 800909a <HAL_UART_Transmit+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009054:	69d3      	ldr	r3, [r2, #28]
 8009056:	061e      	lsls	r6, r3, #24
 8009058:	d4ed      	bmi.n	8009036 <HAL_UART_Transmit+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800905a:	f7fc fc07 	bl	800586c <HAL_GetTick>
 800905e:	eba0 0309 	sub.w	r3, r0, r9
 8009062:	429f      	cmp	r7, r3
 8009064:	d311      	bcc.n	800908a <HAL_UART_Transmit+0xde>
 8009066:	b187      	cbz	r7, 800908a <HAL_UART_Transmit+0xde>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009068:	6822      	ldr	r2, [r4, #0]
 800906a:	6813      	ldr	r3, [r2, #0]
 800906c:	e7f2      	b.n	8009054 <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800906e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009076:	e7c9      	b.n	800900c <HAL_UART_Transmit+0x60>
    return HAL_BUSY;
 8009078:	2002      	movs	r0, #2
}
 800907a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1b4      	bne.n	8008fee <HAL_UART_Transmit+0x42>
      pdata16bits = (const uint16_t *) pData;
 8009084:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8009086:	461d      	mov	r5, r3
 8009088:	e7b1      	b.n	8008fee <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 800908a:	2320      	movs	r3, #32
 800908c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8009090:	2003      	movs	r0, #3
}
 8009092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009096:	1c78      	adds	r0, r7, #1
 8009098:	d0c4      	beq.n	8009024 <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800909a:	69d3      	ldr	r3, [r2, #28]
 800909c:	065b      	lsls	r3, r3, #25
 800909e:	d4c4      	bmi.n	800902a <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a0:	f7fc fbe4 	bl	800586c <HAL_GetTick>
 80090a4:	eba0 0309 	sub.w	r3, r0, r9
 80090a8:	429f      	cmp	r7, r3
 80090aa:	d3ee      	bcc.n	800908a <HAL_UART_Transmit+0xde>
 80090ac:	2f00      	cmp	r7, #0
 80090ae:	d0ec      	beq.n	800908a <HAL_UART_Transmit+0xde>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b4:	69d3      	ldr	r3, [r2, #28]
 80090b6:	065b      	lsls	r3, r3, #25
 80090b8:	d5f2      	bpl.n	80090a0 <HAL_UART_Transmit+0xf4>
 80090ba:	e7b6      	b.n	800902a <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090bc:	f838 3b02 	ldrh.w	r3, [r8], #2
 80090c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c4:	e7bb      	b.n	800903e <HAL_UART_Transmit+0x92>
 80090c6:	bf00      	nop

080090c8 <UART_SetConfig>:
{
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090cc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090ce:	6882      	ldr	r2, [r0, #8]
 80090d0:	6900      	ldr	r0, [r0, #16]
 80090d2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090d4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090d6:	4302      	orrs	r2, r0
 80090d8:	430a      	orrs	r2, r1
 80090da:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090dc:	498e      	ldr	r1, [pc, #568]	@ (8009318 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090de:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090e0:	4029      	ands	r1, r5
 80090e2:	430a      	orrs	r2, r1
 80090e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090ea:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090ec:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80090f0:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090f2:	498a      	ldr	r1, [pc, #552]	@ (800931c <UART_SetConfig+0x254>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090f4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090f6:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090f8:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090fa:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090fc:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8009100:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009104:	f000 80b0 	beq.w	8009268 <UART_SetConfig+0x1a0>
    tmpreg |= huart->Init.OneBitSampling;
 8009108:	6a26      	ldr	r6, [r4, #32]
 800910a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800910c:	430a      	orrs	r2, r1
 800910e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009112:	f022 020f 	bic.w	r2, r2, #15
 8009116:	432a      	orrs	r2, r5
 8009118:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800911a:	4a81      	ldr	r2, [pc, #516]	@ (8009320 <UART_SetConfig+0x258>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d035      	beq.n	800918c <UART_SetConfig+0xc4>
 8009120:	4a80      	ldr	r2, [pc, #512]	@ (8009324 <UART_SetConfig+0x25c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00d      	beq.n	8009142 <UART_SetConfig+0x7a>
 8009126:	4a80      	ldr	r2, [pc, #512]	@ (8009328 <UART_SetConfig+0x260>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d055      	beq.n	80091d8 <UART_SetConfig+0x110>
 800912c:	4a7f      	ldr	r2, [pc, #508]	@ (800932c <UART_SetConfig+0x264>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d040      	beq.n	80091b4 <UART_SetConfig+0xec>
        ret = HAL_ERROR;
 8009132:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8009134:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8009136:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 800913a:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800913e:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8009140:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009142:	4b7b      	ldr	r3, [pc, #492]	@ (8009330 <UART_SetConfig+0x268>)
 8009144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009148:	f003 030c 	and.w	r3, r3, #12
 800914c:	2b0c      	cmp	r3, #12
 800914e:	d8f0      	bhi.n	8009132 <UART_SetConfig+0x6a>
 8009150:	a201      	add	r2, pc, #4	@ (adr r2, 8009158 <UART_SetConfig+0x90>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	0800925d 	.word	0x0800925d
 800915c:	08009133 	.word	0x08009133
 8009160:	08009133 	.word	0x08009133
 8009164:	08009133 	.word	0x08009133
 8009168:	080091cb 	.word	0x080091cb
 800916c:	08009133 	.word	0x08009133
 8009170:	08009133 	.word	0x08009133
 8009174:	08009133 	.word	0x08009133
 8009178:	0800921f 	.word	0x0800921f
 800917c:	08009133 	.word	0x08009133
 8009180:	08009133 	.word	0x08009133
 8009184:	08009133 	.word	0x08009133
 8009188:	080091ed 	.word	0x080091ed
 800918c:	4b68      	ldr	r3, [pc, #416]	@ (8009330 <UART_SetConfig+0x268>)
 800918e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009192:	f003 0303 	and.w	r3, r3, #3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d041      	beq.n	800921e <UART_SetConfig+0x156>
 800919a:	2b03      	cmp	r3, #3
 800919c:	d026      	beq.n	80091ec <UART_SetConfig+0x124>
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d013      	beq.n	80091ca <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091a2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80091a6:	f000 80ac 	beq.w	8009302 <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80091aa:	f7fe fc45 	bl	8007a38 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80091ae:	b3a0      	cbz	r0, 800921a <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091b0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80091b2:	e020      	b.n	80091f6 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091b4:	4b5e      	ldr	r3, [pc, #376]	@ (8009330 <UART_SetConfig+0x268>)
 80091b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091be:	2b80      	cmp	r3, #128	@ 0x80
 80091c0:	d02d      	beq.n	800921e <UART_SetConfig+0x156>
 80091c2:	f200 808e 	bhi.w	80092e2 <UART_SetConfig+0x21a>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d048      	beq.n	800925c <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ca:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80091ce:	f000 809e 	beq.w	800930e <UART_SetConfig+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 80091d2:	f7fe fadd 	bl	8007790 <HAL_RCC_GetSysClockFreq>
        break;
 80091d6:	e7ea      	b.n	80091ae <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091d8:	4b55      	ldr	r3, [pc, #340]	@ (8009330 <UART_SetConfig+0x268>)
 80091da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d01b      	beq.n	800921e <UART_SetConfig+0x156>
 80091e6:	d9ee      	bls.n	80091c6 <UART_SetConfig+0xfe>
 80091e8:	2b30      	cmp	r3, #48	@ 0x30
 80091ea:	d1a2      	bne.n	8009132 <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80091f0:	d019      	beq.n	8009226 <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 80091f2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091f6:	6863      	ldr	r3, [r4, #4]
 80091f8:	4a4e      	ldr	r2, [pc, #312]	@ (8009334 <UART_SetConfig+0x26c>)
 80091fa:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 80091fe:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009202:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009206:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800920a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800920e:	f1a0 0310 	sub.w	r3, r0, #16
 8009212:	4293      	cmp	r3, r2
 8009214:	d88d      	bhi.n	8009132 <UART_SetConfig+0x6a>
          huart->Instance->BRR = usartdiv;
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 800921a:	2000      	movs	r0, #0
 800921c:	e78a      	b.n	8009134 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800921e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8009222:	4845      	ldr	r0, [pc, #276]	@ (8009338 <UART_SetConfig+0x270>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009224:	d1e7      	bne.n	80091f6 <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009226:	6862      	ldr	r2, [r4, #4]
 8009228:	4b42      	ldr	r3, [pc, #264]	@ (8009334 <UART_SetConfig+0x26c>)
 800922a:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800922e:	fbb0 f0f1 	udiv	r0, r0, r1
 8009232:	0853      	lsrs	r3, r2, #1
 8009234:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009238:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800923c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009240:	f1a3 0210 	sub.w	r2, r3, #16
 8009244:	428a      	cmp	r2, r1
 8009246:	f63f af74 	bhi.w	8009132 <UART_SetConfig+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800924a:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800924e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009250:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009252:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8009256:	4313      	orrs	r3, r2
 8009258:	60cb      	str	r3, [r1, #12]
 800925a:	e7de      	b.n	800921a <UART_SetConfig+0x152>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800925c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009260:	d049      	beq.n	80092f6 <UART_SetConfig+0x22e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009262:	f7fe fbd7 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
        break;
 8009266:	e7a2      	b.n	80091ae <UART_SetConfig+0xe6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009268:	4311      	orrs	r1, r2
 800926a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800926c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800926e:	4930      	ldr	r1, [pc, #192]	@ (8009330 <UART_SetConfig+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009270:	f022 020f 	bic.w	r2, r2, #15
 8009274:	432a      	orrs	r2, r5
 8009276:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009278:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800927c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009284:	d046      	beq.n	8009314 <UART_SetConfig+0x24c>
 8009286:	d82f      	bhi.n	80092e8 <UART_SetConfig+0x220>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d03d      	beq.n	8009308 <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetSysClockFreq();
 800928c:	f7fe fa80 	bl	8007790 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009290:	2800      	cmp	r0, #0
 8009292:	d0c2      	beq.n	800921a <UART_SetConfig+0x152>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009294:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009296:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009298:	4b26      	ldr	r3, [pc, #152]	@ (8009334 <UART_SetConfig+0x26c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800929a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800929e:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 80092a2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092a6:	4299      	cmp	r1, r3
 80092a8:	f63f af43 	bhi.w	8009132 <UART_SetConfig+0x6a>
 80092ac:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80092b0:	f63f af3f 	bhi.w	8009132 <UART_SetConfig+0x6a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092b4:	2300      	movs	r3, #0
 80092b6:	4619      	mov	r1, r3
 80092b8:	f7f7 fd0e 	bl	8000cd8 <__aeabi_uldivmod>
 80092bc:	0872      	lsrs	r2, r6, #1
 80092be:	0203      	lsls	r3, r0, #8
 80092c0:	0209      	lsls	r1, r1, #8
 80092c2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80092c6:	1898      	adds	r0, r3, r2
 80092c8:	f141 0100 	adc.w	r1, r1, #0
 80092cc:	4632      	mov	r2, r6
 80092ce:	2300      	movs	r3, #0
 80092d0:	f7f7 fd02 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092d4:	4b19      	ldr	r3, [pc, #100]	@ (800933c <UART_SetConfig+0x274>)
 80092d6:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80092da:	429a      	cmp	r2, r3
 80092dc:	f63f af29 	bhi.w	8009132 <UART_SetConfig+0x6a>
 80092e0:	e799      	b.n	8009216 <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80092e4:	d082      	beq.n	80091ec <UART_SetConfig+0x124>
 80092e6:	e724      	b.n	8009132 <UART_SetConfig+0x6a>
 80092e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092ec:	f47f af21 	bne.w	8009132 <UART_SetConfig+0x6a>
        pclk = (uint32_t) LSE_VALUE;
 80092f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80092f4:	e7cf      	b.n	8009296 <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80092f6:	f7fe fb8d 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d08d      	beq.n	800921a <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092fe:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009300:	e791      	b.n	8009226 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009302:	f7fe fb99 	bl	8007a38 <HAL_RCC_GetPCLK2Freq>
        break;
 8009306:	e7f8      	b.n	80092fa <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009308:	f7fe fb84 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
        break;
 800930c:	e7c0      	b.n	8009290 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 800930e:	f7fe fa3f 	bl	8007790 <HAL_RCC_GetSysClockFreq>
        break;
 8009312:	e7f2      	b.n	80092fa <UART_SetConfig+0x232>
        pclk = (uint32_t) HSI_VALUE;
 8009314:	4808      	ldr	r0, [pc, #32]	@ (8009338 <UART_SetConfig+0x270>)
 8009316:	e7be      	b.n	8009296 <UART_SetConfig+0x1ce>
 8009318:	cfff69f3 	.word	0xcfff69f3
 800931c:	40008000 	.word	0x40008000
 8009320:	40013800 	.word	0x40013800
 8009324:	40004400 	.word	0x40004400
 8009328:	40004800 	.word	0x40004800
 800932c:	40004c00 	.word	0x40004c00
 8009330:	40021000 	.word	0x40021000
 8009334:	08010410 	.word	0x08010410
 8009338:	00f42400 	.word	0x00f42400
 800933c:	000ffcff 	.word	0x000ffcff

08009340 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009340:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009342:	071a      	lsls	r2, r3, #28
{
 8009344:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009346:	d506      	bpl.n	8009356 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009348:	6801      	ldr	r1, [r0, #0]
 800934a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800934c:	684a      	ldr	r2, [r1, #4]
 800934e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009352:	4322      	orrs	r2, r4
 8009354:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009356:	07dc      	lsls	r4, r3, #31
 8009358:	d506      	bpl.n	8009368 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800935a:	6801      	ldr	r1, [r0, #0]
 800935c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800935e:	684a      	ldr	r2, [r1, #4]
 8009360:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009364:	4322      	orrs	r2, r4
 8009366:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009368:	0799      	lsls	r1, r3, #30
 800936a:	d506      	bpl.n	800937a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800936c:	6801      	ldr	r1, [r0, #0]
 800936e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8009370:	684a      	ldr	r2, [r1, #4]
 8009372:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009376:	4322      	orrs	r2, r4
 8009378:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800937a:	075a      	lsls	r2, r3, #29
 800937c:	d506      	bpl.n	800938c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800937e:	6801      	ldr	r1, [r0, #0]
 8009380:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8009382:	684a      	ldr	r2, [r1, #4]
 8009384:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009388:	4322      	orrs	r2, r4
 800938a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800938c:	06dc      	lsls	r4, r3, #27
 800938e:	d506      	bpl.n	800939e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009390:	6801      	ldr	r1, [r0, #0]
 8009392:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8009394:	688a      	ldr	r2, [r1, #8]
 8009396:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800939a:	4322      	orrs	r2, r4
 800939c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800939e:	0699      	lsls	r1, r3, #26
 80093a0:	d506      	bpl.n	80093b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093a2:	6801      	ldr	r1, [r0, #0]
 80093a4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80093a6:	688a      	ldr	r2, [r1, #8]
 80093a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80093ac:	4322      	orrs	r2, r4
 80093ae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093b0:	065a      	lsls	r2, r3, #25
 80093b2:	d509      	bpl.n	80093c8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093b4:	6801      	ldr	r1, [r0, #0]
 80093b6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80093b8:	684a      	ldr	r2, [r1, #4]
 80093ba:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80093be:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093c0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093c4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093c6:	d00b      	beq.n	80093e0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	d506      	bpl.n	80093da <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093cc:	6802      	ldr	r2, [r0, #0]
 80093ce:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80093d0:	6853      	ldr	r3, [r2, #4]
 80093d2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80093d6:	430b      	orrs	r3, r1
 80093d8:	6053      	str	r3, [r2, #4]
}
 80093da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093de:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e0:	684a      	ldr	r2, [r1, #4]
 80093e2:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80093e4:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80093e8:	4322      	orrs	r2, r4
 80093ea:	604a      	str	r2, [r1, #4]
 80093ec:	e7ec      	b.n	80093c8 <UART_AdvFeatureConfig+0x88>
 80093ee:	bf00      	nop

080093f0 <UART_CheckIdleState>:
{
 80093f0:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f2:	2300      	movs	r3, #0
{
 80093f4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f6:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80093fa:	f7fc fa37 	bl	800586c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093fe:	6822      	ldr	r2, [r4, #0]
 8009400:	6813      	ldr	r3, [r2, #0]
 8009402:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8009404:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009406:	d40f      	bmi.n	8009428 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009408:	6813      	ldr	r3, [r2, #0]
 800940a:	0759      	lsls	r1, r3, #29
 800940c:	d431      	bmi.n	8009472 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009410:	2220      	movs	r2, #32
 8009412:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8009416:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8009418:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800941c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800941e:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8009420:	2300      	movs	r3, #0
 8009422:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8009426:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009428:	69d3      	ldr	r3, [r2, #28]
 800942a:	0298      	lsls	r0, r3, #10
 800942c:	d4ec      	bmi.n	8009408 <UART_CheckIdleState+0x18>
 800942e:	e00c      	b.n	800944a <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009430:	6819      	ldr	r1, [r3, #0]
 8009432:	0749      	lsls	r1, r1, #29
 8009434:	461a      	mov	r2, r3
 8009436:	d505      	bpl.n	8009444 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009438:	69d9      	ldr	r1, [r3, #28]
 800943a:	0708      	lsls	r0, r1, #28
 800943c:	d44a      	bmi.n	80094d4 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800943e:	69d9      	ldr	r1, [r3, #28]
 8009440:	0509      	lsls	r1, r1, #20
 8009442:	d475      	bmi.n	8009530 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	0298      	lsls	r0, r3, #10
 8009448:	d4de      	bmi.n	8009408 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800944a:	f7fc fa0f 	bl	800586c <HAL_GetTick>
 800944e:	1b43      	subs	r3, r0, r5
 8009450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009454:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009456:	d3eb      	bcc.n	8009430 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800945c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	e843 2100 	strex	r1, r2, [r3]
 8009464:	2900      	cmp	r1, #0
 8009466:	d1f7      	bne.n	8009458 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8009468:	2320      	movs	r3, #32
 800946a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800946e:	2003      	movs	r0, #3
 8009470:	e7d6      	b.n	8009420 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009472:	69d3      	ldr	r3, [r2, #28]
 8009474:	025b      	lsls	r3, r3, #9
 8009476:	d4ca      	bmi.n	800940e <UART_CheckIdleState+0x1e>
 8009478:	e00d      	b.n	8009496 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	0750      	lsls	r0, r2, #29
 800947e:	d507      	bpl.n	8009490 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009480:	69da      	ldr	r2, [r3, #28]
 8009482:	0711      	lsls	r1, r2, #28
 8009484:	f100 8082 	bmi.w	800958c <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009488:	69da      	ldr	r2, [r3, #28]
 800948a:	0512      	lsls	r2, r2, #20
 800948c:	f100 80ac 	bmi.w	80095e8 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	025b      	lsls	r3, r3, #9
 8009494:	d4bb      	bmi.n	800940e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009496:	f7fc f9e9 	bl	800586c <HAL_GetTick>
 800949a:	1b43      	subs	r3, r0, r5
 800949c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	d3ea      	bcc.n	800947a <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ac:	e843 2100 	strex	r1, r2, [r3]
 80094b0:	2900      	cmp	r1, #0
 80094b2:	d1f7      	bne.n	80094a4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	f103 0208 	add.w	r2, r3, #8
 80094b8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094bc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	f103 0008 	add.w	r0, r3, #8
 80094c4:	e840 2100 	strex	r1, r2, [r0]
 80094c8:	2900      	cmp	r1, #0
 80094ca:	d1f3      	bne.n	80094b4 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 80094cc:	2320      	movs	r3, #32
 80094ce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80094d2:	e7cc      	b.n	800946e <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094d4:	2208      	movs	r2, #8
 80094d6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094dc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	e843 2100 	strex	r1, r2, [r3]
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d1f7      	bne.n	80094d8 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094e8:	4856      	ldr	r0, [pc, #344]	@ (8009644 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	f103 0208 	add.w	r2, r3, #8
 80094ee:	e852 2f00 	ldrex	r2, [r2]
 80094f2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	f103 0508 	add.w	r5, r3, #8
 80094f8:	e845 2100 	strex	r1, r2, [r5]
 80094fc:	2900      	cmp	r1, #0
 80094fe:	d1f4      	bne.n	80094ea <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009500:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009502:	2a01      	cmp	r2, #1
 8009504:	d00b      	beq.n	800951e <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009506:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009508:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800950a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800950c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009510:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009512:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009514:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009518:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800951c:	e79c      	b.n	8009458 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009522:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	e843 2100 	strex	r1, r2, [r3]
 800952a:	2900      	cmp	r1, #0
 800952c:	d1f7      	bne.n	800951e <UART_CheckIdleState+0x12e>
 800952e:	e7ea      	b.n	8009506 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009530:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009534:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800953a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	e843 2100 	strex	r1, r2, [r3]
 8009542:	2900      	cmp	r1, #0
 8009544:	d1f7      	bne.n	8009536 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009546:	483f      	ldr	r0, [pc, #252]	@ (8009644 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	f103 0208 	add.w	r2, r3, #8
 800954c:	e852 2f00 	ldrex	r2, [r2]
 8009550:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	f103 0508 	add.w	r5, r3, #8
 8009556:	e845 2100 	strex	r1, r2, [r5]
 800955a:	2900      	cmp	r1, #0
 800955c:	d1f4      	bne.n	8009548 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800955e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009560:	2a01      	cmp	r2, #1
 8009562:	d00a      	beq.n	800957a <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009564:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009566:	2120      	movs	r1, #32
 8009568:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800956c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009570:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009574:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009578:	e76e      	b.n	8009458 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	e843 2100 	strex	r1, r2, [r3]
 8009586:	2900      	cmp	r1, #0
 8009588:	d1f7      	bne.n	800957a <UART_CheckIdleState+0x18a>
 800958a:	e7eb      	b.n	8009564 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800958c:	2208      	movs	r2, #8
 800958e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009594:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	e843 2100 	strex	r1, r2, [r3]
 800959c:	2900      	cmp	r1, #0
 800959e:	d1f7      	bne.n	8009590 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095a0:	4828      	ldr	r0, [pc, #160]	@ (8009644 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	f103 0208 	add.w	r2, r3, #8
 80095a6:	e852 2f00 	ldrex	r2, [r2]
 80095aa:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ac:	f103 0508 	add.w	r5, r3, #8
 80095b0:	e845 2100 	strex	r1, r2, [r5]
 80095b4:	2900      	cmp	r1, #0
 80095b6:	d1f4      	bne.n	80095a2 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80095ba:	2a01      	cmp	r2, #1
 80095bc:	d00b      	beq.n	80095d6 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095be:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80095c0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095c2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80095c4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80095c8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ca:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80095cc:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095d0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80095d4:	e766      	b.n	80094a4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095da:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	e843 2100 	strex	r1, r2, [r3]
 80095e2:	2900      	cmp	r1, #0
 80095e4:	d1f7      	bne.n	80095d6 <UART_CheckIdleState+0x1e6>
 80095e6:	e7ea      	b.n	80095be <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095ec:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095f2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	e843 2100 	strex	r1, r2, [r3]
 80095fa:	2900      	cmp	r1, #0
 80095fc:	d1f7      	bne.n	80095ee <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095fe:	4811      	ldr	r0, [pc, #68]	@ (8009644 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009600:	f103 0208 	add.w	r2, r3, #8
 8009604:	e852 2f00 	ldrex	r2, [r2]
 8009608:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	f103 0508 	add.w	r5, r3, #8
 800960e:	e845 2100 	strex	r1, r2, [r5]
 8009612:	2900      	cmp	r1, #0
 8009614:	d1f4      	bne.n	8009600 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009616:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009618:	2a01      	cmp	r2, #1
 800961a:	d00a      	beq.n	8009632 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800961e:	2120      	movs	r1, #32
 8009620:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009624:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009626:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009628:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800962c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009630:	e738      	b.n	80094a4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009636:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	e843 2100 	strex	r1, r2, [r3]
 800963e:	2900      	cmp	r1, #0
 8009640:	d1f7      	bne.n	8009632 <UART_CheckIdleState+0x242>
 8009642:	e7eb      	b.n	800961c <UART_CheckIdleState+0x22c>
 8009644:	effffffe 	.word	0xeffffffe

08009648 <HAL_UART_Init>:
  if (huart == NULL)
 8009648:	b380      	cbz	r0, 80096ac <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800964a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800964e:	b510      	push	{r4, lr}
 8009650:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009652:	b333      	cbz	r3, 80096a2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8009654:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009656:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8009658:	2324      	movs	r3, #36	@ 0x24
 800965a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800965e:	6813      	ldr	r3, [r2, #0]
 8009660:	f023 0301 	bic.w	r3, r3, #1
 8009664:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009666:	b9c1      	cbnz	r1, 800969a <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009668:	4620      	mov	r0, r4
 800966a:	f7ff fd2d 	bl	80090c8 <UART_SetConfig>
 800966e:	2801      	cmp	r0, #1
 8009670:	d011      	beq.n	8009696 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800967a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800967c:	689a      	ldr	r2, [r3, #8]
 800967e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009682:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800968a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800968c:	601a      	str	r2, [r3, #0]
}
 800968e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8009692:	f7ff bead 	b.w	80093f0 <UART_CheckIdleState>
}
 8009696:	2001      	movs	r0, #1
 8009698:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800969a:	4620      	mov	r0, r4
 800969c:	f7ff fe50 	bl	8009340 <UART_AdvFeatureConfig>
 80096a0:	e7e2      	b.n	8009668 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80096a2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80096a6:	f7fb feeb 	bl	8005480 <HAL_UART_MspInit>
 80096aa:	e7d3      	b.n	8009654 <HAL_UART_Init+0xc>
}
 80096ac:	2001      	movs	r0, #1
 80096ae:	4770      	bx	lr

080096b0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096b0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d017      	beq.n	80096e8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096b8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80096ba:	2324      	movs	r3, #36	@ 0x24
{
 80096bc:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80096be:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096c2:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096c4:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096c6:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80096c8:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096cc:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80096d0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096d2:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d4:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096d6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80096da:	2220      	movs	r2, #32
 80096dc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 80096e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80096e4:	4618      	mov	r0, r3
}
 80096e6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80096e8:	2002      	movs	r0, #2
}
 80096ea:	4770      	bx	lr

080096ec <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ec:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80096f0:	2a01      	cmp	r2, #1
 80096f2:	d037      	beq.n	8009764 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80096f4:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80096f8:	2024      	movs	r0, #36	@ 0x24
{
 80096fa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80096fc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009700:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009702:	6810      	ldr	r0, [r2, #0]
 8009704:	f020 0001 	bic.w	r0, r0, #1
 8009708:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800970a:	6890      	ldr	r0, [r2, #8]
 800970c:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8009710:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009712:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009714:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009716:	b310      	cbz	r0, 800975e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009718:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800971a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800971c:	4d12      	ldr	r5, [pc, #72]	@ (8009768 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800971e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009722:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009726:	4911      	ldr	r1, [pc, #68]	@ (800976c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8009728:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800972c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009730:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009734:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009738:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800973a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800973c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009740:	fbb1 f1f5 	udiv	r1, r1, r5
 8009744:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8009748:	2100      	movs	r1, #0
 800974a:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800974e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009750:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009752:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8009756:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009758:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800975c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800975e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009760:	4608      	mov	r0, r1
 8009762:	e7ef      	b.n	8009744 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009764:	2002      	movs	r0, #2
}
 8009766:	4770      	bx	lr
 8009768:	08010428 	.word	0x08010428
 800976c:	08010430 	.word	0x08010430

08009770 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009770:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009774:	2a01      	cmp	r2, #1
 8009776:	d037      	beq.n	80097e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8009778:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800977a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800977c:	2024      	movs	r0, #36	@ 0x24
{
 800977e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009780:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009784:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009786:	6810      	ldr	r0, [r2, #0]
 8009788:	f020 0001 	bic.w	r0, r0, #1
 800978c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800978e:	6890      	ldr	r0, [r2, #8]
 8009790:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8009794:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009796:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009798:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800979a:	b310      	cbz	r0, 80097e2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800979c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800979e:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80097a0:	4d12      	ldr	r5, [pc, #72]	@ (80097ec <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097a6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097aa:	4911      	ldr	r1, [pc, #68]	@ (80097f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80097ac:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097b0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80097b4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80097b8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097bc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097be:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097c0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097c4:	fbb1 f1f5 	udiv	r1, r1, r5
 80097c8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80097cc:	2100      	movs	r1, #0
 80097ce:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80097d2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80097d6:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80097da:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80097dc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80097e0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80097e2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80097e4:	4608      	mov	r0, r1
 80097e6:	e7ef      	b.n	80097c8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80097e8:	2002      	movs	r0, #2
}
 80097ea:	4770      	bx	lr
 80097ec:	08010428 	.word	0x08010428
 80097f0:	08010430 	.word	0x08010430

080097f4 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80097f4:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80097f6:	8840      	ldrh	r0, [r0, #2]
 80097f8:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80097fc:	0c00      	lsrs	r0, r0, #16
 80097fe:	4770      	bx	lr

08009800 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8009800:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8009802:	8803      	ldrh	r3, [r0, #0]
 8009804:	140d      	asrs	r5, r1, #16
 8009806:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8009808:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 800980c:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8009810:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8009814:	428b      	cmp	r3, r1
{
 8009816:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8009818:	da0f      	bge.n	800983a <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800981a:	8846      	ldrh	r6, [r0, #2]
 800981c:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8009820:	4282      	cmp	r2, r0
 8009822:	dd13      	ble.n	800984c <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8009824:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8009826:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 800982a:	bfb8      	it	lt
 800982c:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 800982e:	f7f8 fe4d 	bl	80024cc <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8009832:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8009834:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8009836:	db0e      	blt.n	8009856 <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8009838:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 800983a:	b2a4      	uxth	r4, r4
 800983c:	2000      	movs	r0, #0
 800983e:	f364 000f 	bfi	r0, r4, #0, #16
 8009842:	b2ad      	uxth	r5, r5
 8009844:	f365 401f 	bfi	r0, r5, #16, #16
}
 8009848:	b004      	add	sp, #16
 800984a:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 800984c:	1a98      	subs	r0, r3, r2
 800984e:	f7f8 fe3d 	bl	80024cc <MCM_Sqrt>
        if (Vqd.q < 0)
 8009852:	2c00      	cmp	r4, #0
 8009854:	daf0      	bge.n	8009838 <Circle_Limitation+0x38>
          new_q = - new_q;
 8009856:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8009858:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 800985a:	e7ee      	b.n	800983a <Circle_Limitation+0x3a>

0800985c <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800985e:	7fc3      	ldrb	r3, [r0, #31]
 8009860:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8009864:	429a      	cmp	r2, r3
{
 8009866:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009868:	d002      	beq.n	8009870 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 800986a:	3301      	adds	r3, #1
 800986c:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800986e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8009870:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8009876:	2d00      	cmp	r5, #0
 8009878:	d02f      	beq.n	80098da <MCPA_dataLog+0x7e>
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800987a:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800987c:	8ba2      	ldrh	r2, [r4, #28]
 800987e:	42aa      	cmp	r2, r5
 8009880:	d31a      	bcc.n	80098b8 <MCPA_dataLog+0x5c>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009882:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009886:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009888:	2e00      	cmp	r6, #0
 800988a:	d07a      	beq.n	8009982 <MCPA_dataLog+0x126>
 800988c:	68a2      	ldr	r2, [r4, #8]
 800988e:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8009892:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8009894:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009898:	8800      	ldrh	r0, [r0, #0]
 800989a:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800989e:	8b25      	ldrh	r5, [r4, #24]
 80098a0:	3502      	adds	r5, #2
 80098a2:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80098a4:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80098a6:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80098a8:	d1f4      	bne.n	8009894 <MCPA_dataLog+0x38>
        if (pHandle->MFRateBuff < 254U)
 80098aa:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80098ae:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 80098b0:	2bfd      	cmp	r3, #253	@ 0xfd
 80098b2:	d96b      	bls.n	800998c <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80098b4:	4295      	cmp	r5, r2
 80098b6:	d9da      	bls.n	800986e <MCPA_dataLog+0x12>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 80098b8:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80098bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80098be:	d04a      	beq.n	8009956 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80098c0:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80098c4:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 80098c6:	8b22      	ldrh	r2, [r4, #24]
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	3202      	adds	r2, #2
 80098cc:	2309      	movs	r3, #9
 80098ce:	6845      	ldr	r5, [r0, #4]
 80098d0:	b292      	uxth	r2, r2
 80098d2:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	8323      	strh	r3, [r4, #24]
}
 80098d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 80098da:	4601      	mov	r1, r0
 80098dc:	2209      	movs	r2, #9
 80098de:	f851 0b14 	ldr.w	r0, [r1], #20
 80098e2:	6803      	ldr	r3, [r0, #0]
 80098e4:	4798      	blx	r3
 80098e6:	b390      	cbz	r0, 800994e <MCPA_dataLog+0xf2>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80098e8:	4b3a      	ldr	r3, [pc, #232]	@ (80099d4 <MCPA_dataLog+0x178>)
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 80098ea:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 80098f0:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 80098f4:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 80098f8:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 80098fc:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 80098fe:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8009900:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009902:	d101      	bne.n	8009908 <MCPA_dataLog+0xac>
 8009904:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009906:	e7b9      	b.n	800987c <MCPA_dataLog+0x20>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009908:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 800990c:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009910:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009914:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009918:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 800991c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8009920:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009922:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8009924:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009928:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800992c:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 800992e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8009932:	0092      	lsls	r2, r2, #2
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009934:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8009938:	f002 fff9 	bl	800c92e <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 800993c:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8009940:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8009944:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8009948:	441a      	add	r2, r3
 800994a:	f002 fff0 	bl	800c92e <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800994e:	8b25      	ldrh	r5, [r4, #24]
 8009950:	2d00      	cmp	r5, #0
 8009952:	d192      	bne.n	800987a <MCPA_dataLog+0x1e>
}
 8009954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009956:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800995a:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800995e:	4418      	add	r0, r3
 8009960:	4283      	cmp	r3, r0
 8009962:	daad      	bge.n	80098c0 <MCPA_dataLog+0x64>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009964:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009966:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009968:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800996c:	6812      	ldr	r2, [r2, #0]
 800996e:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009970:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009972:	5cf3      	ldrb	r3, [r6, r3]
 8009974:	442b      	add	r3, r5
 8009976:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009978:	b2d3      	uxtb	r3, r2
 800997a:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800997c:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800997e:	dbf3      	blt.n	8009968 <MCPA_dataLog+0x10c>
 8009980:	e79e      	b.n	80098c0 <MCPA_dataLog+0x64>
        if (pHandle->MFRateBuff < 254U)
 8009982:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009986:	2bfd      	cmp	r3, #253	@ 0xfd
 8009988:	f63f af71 	bhi.w	800986e <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 800998c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8009990:	4298      	cmp	r0, r3
 8009992:	d005      	beq.n	80099a0 <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 8009994:	3001      	adds	r0, #1
 8009996:	f884 0020 	strb.w	r0, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800999a:	42aa      	cmp	r2, r5
 800999c:	d390      	bcc.n	80098c0 <MCPA_dataLog+0x64>
}
 800999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80099a0:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 80099a4:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80099a6:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80099a8:	42be      	cmp	r6, r7
            pHandle->MFIndex = 0U;
 80099aa:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80099ae:	daf4      	bge.n	800999a <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80099b0:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80099b4:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80099b8:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80099c0:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80099c4:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80099c6:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80099c8:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80099ca:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80099cc:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80099ce:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80099d0:	dbf2      	blt.n	80099b8 <MCPA_dataLog+0x15c>
 80099d2:	e76f      	b.n	80098b4 <MCPA_dataLog+0x58>
 80099d4:	20001f54 	.word	0x20001f54

080099d8 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 80099d8:	8b03      	ldrh	r3, [r0, #24]
 80099da:	b19b      	cbz	r3, 8009a04 <MCPA_flushDataLog+0x2c>
{
 80099dc:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80099de:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80099e2:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80099e4:	2afe      	cmp	r2, #254	@ 0xfe
 80099e6:	4604      	mov	r4, r0
 80099e8:	d00d      	beq.n	8009a06 <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80099ea:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 80099ee:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80099f0:	8b22      	ldrh	r2, [r4, #24]
 80099f2:	6820      	ldr	r0, [r4, #0]
 80099f4:	3202      	adds	r2, #2
 80099f6:	2309      	movs	r3, #9
 80099f8:	6845      	ldr	r5, [r0, #4]
 80099fa:	b292      	uxth	r2, r2
 80099fc:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
 8009a04:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009a06:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8009a0a:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8009a0e:	4494      	add	ip, r2
 8009a10:	4562      	cmp	r2, ip
 8009a12:	daea      	bge.n	80099ea <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009a14:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009a16:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009a18:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8009a1c:	6800      	ldr	r0, [r0, #0]
 8009a1e:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009a20:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009a22:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009a24:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009a26:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009a28:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009a2a:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009a2c:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009a2e:	dbf3      	blt.n	8009a18 <MCPA_flushDataLog+0x40>
 8009a30:	e7db      	b.n	80099ea <MCPA_flushDataLog+0x12>
 8009a32:	bf00      	nop

08009a34 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8009a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009a38:	880f      	ldrh	r7, [r1, #0]
{
 8009a3a:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8009a3c:	2f00      	cmp	r7, #0
 8009a3e:	d046      	beq.n	8009ace <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8009a40:	6803      	ldr	r3, [r0, #0]
 8009a42:	89db      	ldrh	r3, [r3, #14]
 8009a44:	42bb      	cmp	r3, r7
 8009a46:	d33f      	bcc.n	8009ac8 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8009a48:	788b      	ldrb	r3, [r1, #2]
 8009a4a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8009a4e:	f891 8003 	ldrb.w	r8, [r1, #3]
 8009a52:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8009a56:	790b      	ldrb	r3, [r1, #4]
 8009a58:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009a5c:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009a5e:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009a60:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009a64:	4443      	add	r3, r8
 8009a66:	4293      	cmp	r3, r2
 8009a68:	dc57      	bgt.n	8009b1a <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8009a6a:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d057      	beq.n	8009b20 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009a70:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009a74:	4645      	mov	r5, r8
 8009a76:	e011      	b.n	8009a9c <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009a78:	68e3      	ldr	r3, [r4, #12]
 8009a7a:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8009a7c:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009a7e:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009a82:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8009a86:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009a88:	f105 0c01 	add.w	ip, r5, #1
 8009a8c:	fa5f f58c 	uxtb.w	r5, ip
 8009a90:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8009a92:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009a94:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 8009a96:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009a9a:	da11      	bge.n	8009ac0 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009a9c:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8009aa0:	6861      	ldr	r1, [r4, #4]
 8009aa2:	4648      	mov	r0, r9
 8009aa4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009aa8:	f7fa fe68 	bl	800477c <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009aac:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009ab0:	42ab      	cmp	r3, r5
 8009ab2:	f04f 0002 	mov.w	r0, #2
 8009ab6:	d8df      	bhi.n	8009a78 <MCPA_cfgLog+0x44>
 8009ab8:	4648      	mov	r0, r9
 8009aba:	f7fa fe53 	bl	8004764 <RI_GetIDSize>
 8009abe:	e7db      	b.n	8009a78 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8009ac0:	f108 0206 	add.w	r2, r8, #6
 8009ac4:	4297      	cmp	r7, r2
 8009ac6:	d210      	bcs.n	8009aea <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8009ac8:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8009aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8009ace:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8009ad0:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8009ad4:	b9ab      	cbnz	r3, 8009b02 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8009ada:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8009ade:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8009ae0:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8009ae4:	2000      	movs	r0, #0
}
 8009ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8009aea:	3f02      	subs	r7, #2
 8009aec:	eba7 0708 	sub.w	r7, r7, r8
 8009af0:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8009af2:	7833      	ldrb	r3, [r6, #0]
 8009af4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1f3      	bne.n	8009ae4 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8009afc:	8b23      	ldrh	r3, [r4, #24]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0e9      	beq.n	8009ad6 <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009b02:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009b04:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009b08:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009b0a:	8b22      	ldrh	r2, [r4, #24]
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	3202      	adds	r2, #2
 8009b10:	6845      	ldr	r5, [r0, #4]
 8009b12:	b292      	uxth	r2, r2
 8009b14:	2309      	movs	r3, #9
 8009b16:	47a8      	blx	r5
 8009b18:	e7dd      	b.n	8009ad6 <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8009b1a:	200a      	movs	r0, #10
}
 8009b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009b20:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009b22:	4698      	mov	r8, r3
 8009b24:	e7ce      	b.n	8009ac4 <MCPA_cfgLog+0x90>
 8009b26:	bf00      	nop

08009b28 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 8009b28:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009b2c:	8843      	ldrh	r3, [r0, #2]
 8009b2e:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 8009b30:	2900      	cmp	r1, #0
 8009b32:	dd08      	ble.n	8009b46 <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d804      	bhi.n	8009b42 <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8009b38:	89c2      	ldrh	r2, [r0, #14]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d908      	bls.n	8009b50 <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 8009b3e:	2000      	movs	r0, #0
 8009b40:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 8009b42:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8009b44:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d3fb      	bcc.n	8009b42 <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8009b4a:	89c2      	ldrh	r2, [r0, #14]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d3f6      	bcc.n	8009b3e <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 8009b50:	8900      	ldrh	r0, [r0, #8]
 8009b52:	4770      	bx	lr

08009b54 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009b54:	7803      	ldrb	r3, [r0, #0]
 8009b56:	b94b      	cbnz	r3, 8009b6c <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 8009b58:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	bfcc      	ite	gt
 8009b60:	2300      	movgt	r3, #0
 8009b62:	2301      	movle	r3, #1
 8009b64:	425b      	negs	r3, r3
 8009b66:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 8009b68:	8043      	strh	r3, [r0, #2]
}
 8009b6a:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009b6c:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 8009b6e:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8009b70:	2200      	movs	r2, #0
 8009b72:	8102      	strh	r2, [r0, #8]
}
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop

08009b78 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 8009b78:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009b7a:	7803      	ldrb	r3, [r0, #0]
{
 8009b7c:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8009b7e:	b983      	cbnz	r3, 8009ba2 <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 8009b80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009b84:	4299      	cmp	r1, r3
 8009b86:	d007      	beq.n	8009b98 <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009b88:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8009b8a:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009b8c:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 8009b8e:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8009b92:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8009b96:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f7ff ffc5 	bl	8009b28 <NTC_SetFaultState>
 8009b9e:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009ba4:	8120      	strh	r0, [r4, #8]
}
 8009ba6:	bd10      	pop	{r4, pc}

08009ba8 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8009ba8:	7803      	ldrb	r3, [r0, #0]
 8009baa:	b95b      	cbnz	r3, 8009bc4 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8009bac:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8009bae:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8009bb0:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009bb4:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 8009bb6:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8009bb8:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009bbc:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009bc0:	b200      	sxth	r0, r0
 8009bc2:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8009bc4:	88c0      	ldrh	r0, [r0, #6]
}
 8009bc6:	b200      	sxth	r0, r0
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop

08009bcc <OL_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hVoltage = pHandle->hDefaultVoltage;
 8009bcc:	8803      	ldrh	r3, [r0, #0]
 8009bce:	8103      	strh	r3, [r0, #8]
    pHandle->pVSS = pVSS;
 8009bd0:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 8009bd2:	4770      	bx	lr

08009bd4 <OL_VqdConditioning>:
  Vqd.q = ((MC_NULL == pHandle) ? 0 : pHandle->hVoltage);
#else
  Vqd.q = (pHandle->hVoltage);
#endif
  return (Vqd);
}
 8009bd4:	8900      	ldrh	r0, [r0, #8]
{
 8009bd6:	b082      	sub	sp, #8
}
 8009bd8:	b002      	add	sp, #8
 8009bda:	4770      	bx	lr

08009bdc <OL_Calc>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (true ==  pHandle->VFMode)
 8009bdc:	7883      	ldrb	r3, [r0, #2]
 8009bde:	b173      	cbz	r3, 8009bfe <OL_Calc+0x22>
    {
      /* V/F mode true means enabled */
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 8009be0:	68c2      	ldr	r2, [r0, #12]
      {
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8009be2:	88c3      	ldrh	r3, [r0, #6]
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 8009be4:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8009be8:	8882      	ldrh	r2, [r0, #4]
 8009bea:	fb13 f301 	smulbb	r3, r3, r1
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 8009bee:	2900      	cmp	r1, #0
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8009bf0:	b29b      	uxth	r3, r3
      if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
 8009bf2:	db02      	blt.n	8009bfa <OL_Calc+0x1e>
        pHandle->hVoltage = pHandle->hVFOffset + (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8009bf4:	441a      	add	r2, r3
 8009bf6:	8102      	strh	r2, [r0, #8]
 8009bf8:	4770      	bx	lr
      }
      else
      {
        pHandle->hVoltage = pHandle->hVFOffset - (pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit);
 8009bfa:	1ad2      	subs	r2, r2, r3
 8009bfc:	8102      	strh	r2, [r0, #8]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_OPEN_LOOP
  }
#endif
}
 8009bfe:	4770      	bx	lr

08009c00 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8009c00:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009c02:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009c04:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009c06:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009c08:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8009c0a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8009c0c:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009c0e:	4770      	bx	lr

08009c10 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8009c10:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009c12:	4770      	bx	lr

08009c14 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8009c14:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009c16:	4770      	bx	lr

08009c18 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8009c18:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop

08009c20 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8009c20:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop

08009c28 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8009c28:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8009c2a:	4770      	bx	lr

08009c2c <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8009c2c:	8b80      	ldrh	r0, [r0, #28]
 8009c2e:	4770      	bx	lr

08009c30 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009c30:	2301      	movs	r3, #1
 8009c32:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8009c34:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009c36:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop

08009c3c <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8009c3c:	8b40      	ldrh	r0, [r0, #26]
 8009c3e:	4770      	bx	lr

08009c40 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8009c40:	8bc0      	ldrh	r0, [r0, #30]
 8009c42:	4770      	bx	lr

08009c44 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8009c44:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009c46:	4770      	bx	lr

08009c48 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8009c48:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009c4a:	4770      	bx	lr

08009c4c <PID_SetKIDivisorPOW2>:
{
 8009c4c:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8009c4e:	2301      	movs	r3, #1
{
 8009c50:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8009c52:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009c54:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8009c58:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8009c5a:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009c5c:	40a1      	lsls	r1, r4
{
 8009c5e:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009c60:	f7ff fff2 	bl	8009c48 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8009c64:	4902      	ldr	r1, [pc, #8]	@ (8009c70 <PID_SetKIDivisorPOW2+0x24>)
 8009c66:	4628      	mov	r0, r5
 8009c68:	40a1      	lsls	r1, r4
 8009c6a:	f7ff ffeb 	bl	8009c44 <PID_SetLowerIntegralTermLimit>
}
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	ffff8001 	.word	0xffff8001

08009c74 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8009c74:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009c76:	4770      	bx	lr

08009c78 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8009c78:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop

08009c80 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8009c80:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8009c82:	4770      	bx	lr

08009c84 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009c84:	2301      	movs	r3, #1
 8009c86:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8009c88:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009c8a:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop

08009c90 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009c90:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8009c94:	4603      	mov	r3, r0
 8009c96:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8009c98:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009c9c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009ca0:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009ca4:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8009ca8:	b17c      	cbz	r4, 8009cca <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009caa:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009cae:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8009cb2:	eb15 0e01 	adds.w	lr, r5, r1
 8009cb6:	d41d      	bmi.n	8009cf4 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8009cb8:	420d      	tst	r5, r1
 8009cba:	4914      	ldr	r1, [pc, #80]	@ (8009d0c <PI_Controller+0x7c>)
 8009cbc:	bf48      	it	mi
 8009cbe:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009cc0:	45a6      	cmp	lr, r4
 8009cc2:	dc02      	bgt.n	8009cca <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8009cc4:	691c      	ldr	r4, [r3, #16]
 8009cc6:	4574      	cmp	r4, lr
 8009cc8:	dd1d      	ble.n	8009d06 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8009cca:	8b99      	ldrh	r1, [r3, #28]
 8009ccc:	410a      	asrs	r2, r1
 8009cce:	8bd9      	ldrh	r1, [r3, #30]
 8009cd0:	fa44 f101 	asr.w	r1, r4, r1
 8009cd4:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8009cd6:	4290      	cmp	r0, r2
 8009cd8:	da03      	bge.n	8009ce2 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8009cda:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8009cdc:	4414      	add	r4, r2
 8009cde:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8009ce0:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8009ce2:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8009ce4:	bfc5      	ittet	gt
 8009ce6:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8009cea:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8009cec:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8009cee:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8009cf0:	609c      	str	r4, [r3, #8]
}
 8009cf2:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8009cf4:	2d00      	cmp	r5, #0
 8009cf6:	dde3      	ble.n	8009cc0 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	dde1      	ble.n	8009cc0 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009cfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d00:	428c      	cmp	r4, r1
 8009d02:	d1e2      	bne.n	8009cca <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 8009d04:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8009d06:	4674      	mov	r4, lr
 8009d08:	e7df      	b.n	8009cca <PI_Controller+0x3a>
 8009d0a:	bf00      	nop
 8009d0c:	80000001 	.word	0x80000001

08009d10 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8009d10:	6882      	ldr	r2, [r0, #8]
{
 8009d12:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009d14:	89d1      	ldrh	r1, [r2, #14]
 8009d16:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8009d1a:	8993      	ldrh	r3, [r2, #12]
 8009d1c:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009d20:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8009d24:	fb13 230c 	smlabb	r3, r3, ip, r2
 8009d28:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009d2a:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8009d2e:	bfbc      	itt	lt
 8009d30:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8009d34:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009d36:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8009d3a:	bf48      	it	mi
 8009d3c:	330f      	addmi	r3, #15
 8009d3e:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8009d42:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8009d44:	f85d fb04 	ldr.w	pc, [sp], #4

08009d48 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8009d48:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009d4a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009d4e:	ee07 3a90 	vmov	s15, r3
{
 8009d52:	ed2d 8b02 	vpush	{d8}
 8009d56:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009d58:	68c0      	ldr	r0, [r0, #12]
 8009d5a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009d5e:	f7ff fd49 	bl	80097f4 <VBS_GetAvBusVoltage_V>
 8009d62:	edd4 7a01 	vldr	s15, [r4, #4]
 8009d66:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8009d6a:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009d6e:	ee00 0a10 	vmov	s0, r0
 8009d72:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8009d76:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d7a:	bd10      	pop	{r4, pc}

08009d7c <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009d7c:	6883      	ldr	r3, [r0, #8]
 8009d7e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009d82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8009d86:	b082      	sub	sp, #8
 8009d88:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009d8a:	6883      	ldr	r3, [r0, #8]
 8009d8c:	00d9      	lsls	r1, r3, #3
 8009d8e:	d418      	bmi.n	8009dc2 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8009d90:	4b26      	ldr	r3, [pc, #152]	@ (8009e2c <R3_2_ADCxInit+0xb0>)
  MODIFY_REG(ADCx->CR,
 8009d92:	6882      	ldr	r2, [r0, #8]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4926      	ldr	r1, [pc, #152]	@ (8009e30 <R3_2_ADCxInit+0xb4>)
 8009d98:	099b      	lsrs	r3, r3, #6
 8009d9a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8009d9e:	fba1 1303 	umull	r1, r3, r1, r3
 8009da2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8009da6:	099b      	lsrs	r3, r3, #6
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009dae:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8009db0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009db2:	9b01      	ldr	r3, [sp, #4]
 8009db4:	b12b      	cbz	r3, 8009dc2 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009dbc:	9b01      	ldr	r3, [sp, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f9      	bne.n	8009db6 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8009dc2:	6883      	ldr	r3, [r0, #8]
 8009dc4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009dc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009dcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009dd0:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009dd2:	6883      	ldr	r3, [r0, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dbfc      	blt.n	8009dd2 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009dd8:	6803      	ldr	r3, [r0, #0]
 8009dda:	07da      	lsls	r2, r3, #31
 8009ddc:	d408      	bmi.n	8009df0 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8009dde:	4a15      	ldr	r2, [pc, #84]	@ (8009e34 <R3_2_ADCxInit+0xb8>)
 8009de0:	6883      	ldr	r3, [r0, #8]
 8009de2:	4013      	ands	r3, r2
 8009de4:	f043 0301 	orr.w	r3, r3, #1
 8009de8:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009dea:	6803      	ldr	r3, [r0, #0]
 8009dec:	07db      	lsls	r3, r3, #31
 8009dee:	d5f7      	bpl.n	8009de0 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8009df0:	6883      	ldr	r3, [r0, #8]
 8009df2:	4a10      	ldr	r2, [pc, #64]	@ (8009e34 <R3_2_ADCxInit+0xb8>)
 8009df4:	4013      	ands	r3, r2
 8009df6:	f043 0308 	orr.w	r3, r3, #8
 8009dfa:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8009dfc:	6883      	ldr	r3, [r0, #8]
 8009dfe:	4013      	ands	r3, r2
 8009e00:	f043 0320 	orr.w	r3, r3, #32
 8009e04:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8009e06:	68c3      	ldr	r3, [r0, #12]
 8009e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e14:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8009e16:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009e18:	f023 030f 	bic.w	r3, r3, #15
 8009e1c:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 8009e1e:	6883      	ldr	r3, [r0, #8]
 8009e20:	4013      	ands	r3, r2
 8009e22:	f043 0304 	orr.w	r3, r3, #4
 8009e26:	6083      	str	r3, [r0, #8]

  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength(ADCx, 0U);
  LL_ADC_REG_StartConversion(ADCx);
}
 8009e28:	b002      	add	sp, #8
 8009e2a:	4770      	bx	lr
 8009e2c:	20000500 	.word	0x20000500
 8009e30:	053e2d63 	.word	0x053e2d63
 8009e34:	7fffffc0 	.word	0x7fffffc0

08009e38 <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009e38:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8009e3c:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 8009e40:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009e42:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8009e44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009e48:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8009e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8009e4c:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8009e50:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009e54:	6863      	ldr	r3, [r4, #4]
 8009e56:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e5e:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8009e60:	2a05      	cmp	r2, #5
 8009e62:	f200 809d 	bhi.w	8009fa0 <R3_2_GetPhaseCurrents+0x168>
 8009e66:	e8df f002 	tbb	[pc, r2]
 8009e6a:	1d37      	.short	0x1d37
 8009e6c:	3703031d 	.word	0x3703031d
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009e70:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8009e74:	4a4e      	ldr	r2, [pc, #312]	@ (8009fb0 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009e76:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	db58      	blt.n	8009f2e <R3_2_GetPhaseCurrents+0xf6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8009e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e80:	f280 8087 	bge.w	8009f92 <R3_2_GetPhaseCurrents+0x15a>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 8009e84:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8009e88:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8009e8c:	4d48      	ldr	r5, [pc, #288]	@ (8009fb0 <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 8009e8e:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8009e92:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8009e94:	42aa      	cmp	r2, r5
 8009e96:	da5b      	bge.n	8009f50 <R3_2_GetPhaseCurrents+0x118>
        {
          Iab->b = -INT16_MAX;
 8009e98:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009e9a:	fa1f f38c 	uxth.w	r3, ip
 8009e9e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8009ea2:	e030      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009ea4:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 8009ea8:	4b41      	ldr	r3, [pc, #260]	@ (8009fb0 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009eaa:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8009eac:	429c      	cmp	r4, r3
 8009eae:	db39      	blt.n	8009f24 <R3_2_GetPhaseCurrents+0xec>
        else  if (Aux > INT16_MAX)
 8009eb0:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8009eb4:	da62      	bge.n	8009f7c <R3_2_GetPhaseCurrents+0x144>
          Iab->a = (int16_t)Aux;
 8009eb6:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009eba:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009ebc:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 8009ec0:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009ec4:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8009ec6:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8009ec8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8009ecc:	db39      	blt.n	8009f42 <R3_2_GetPhaseCurrents+0x10a>
          Iab->b = INT16_MAX;
 8009ece:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009ed2:	804a      	strh	r2, [r1, #2]
 8009ed4:	4615      	mov	r5, r2
 8009ed6:	e016      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8009ed8:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 8009edc:	4b34      	ldr	r3, [pc, #208]	@ (8009fb0 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8009ede:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	db1a      	blt.n	8009f1a <R3_2_GetPhaseCurrents+0xe2>
        else  if (Aux > INT16_MAX)
 8009ee4:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8009ee8:	da3d      	bge.n	8009f66 <R3_2_GetPhaseCurrents+0x12e>
          Iab->b = (int16_t)Aux;
 8009eea:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009eec:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009eee:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 8009ef2:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009ef4:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8009ef6:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 8009ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009efc:	db19      	blt.n	8009f32 <R3_2_GetPhaseCurrents+0xfa>
          Iab->a = INT16_MAX;
 8009efe:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009f02:	800b      	strh	r3, [r1, #0]
 8009f04:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009f06:	4413      	add	r3, r2
 8009f08:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 8009f0a:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 8009f0e:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009f12:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009f14:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8009f18:	4770      	bx	lr
 8009f1a:	461c      	mov	r4, r3
 8009f1c:	f248 0201 	movw	r2, #32769	@ 0x8001
 8009f20:	461d      	mov	r5, r3
 8009f22:	e7e4      	b.n	8009eee <R3_2_GetPhaseCurrents+0xb6>
 8009f24:	461c      	mov	r4, r3
 8009f26:	46a4      	mov	ip, r4
 8009f28:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009f2c:	e7c6      	b.n	8009ebc <R3_2_GetPhaseCurrents+0x84>
 8009f2e:	4694      	mov	ip, r2
 8009f30:	e7aa      	b.n	8009e88 <R3_2_GetPhaseCurrents+0x50>
        else  if (Aux < -INT16_MAX)
 8009f32:	4c1f      	ldr	r4, [pc, #124]	@ (8009fb0 <R3_2_GetPhaseCurrents+0x178>)
 8009f34:	42a3      	cmp	r3, r4
 8009f36:	da26      	bge.n	8009f86 <R3_2_GetPhaseCurrents+0x14e>
          Iab->a = -INT16_MAX;
 8009f38:	800c      	strh	r4, [r1, #0]
 8009f3a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009f3e:	46a4      	mov	ip, r4
 8009f40:	e7e1      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux < -INT16_MAX)
 8009f42:	4d1b      	ldr	r5, [pc, #108]	@ (8009fb0 <R3_2_GetPhaseCurrents+0x178>)
 8009f44:	42aa      	cmp	r2, r5
 8009f46:	da27      	bge.n	8009f98 <R3_2_GetPhaseCurrents+0x160>
          Iab->b = -INT16_MAX;
 8009f48:	804d      	strh	r5, [r1, #2]
 8009f4a:	f248 0201 	movw	r2, #32769	@ 0x8001
 8009f4e:	e7da      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux > INT16_MAX)
 8009f50:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8009f54:	db0c      	blt.n	8009f70 <R3_2_GetPhaseCurrents+0x138>
          Iab->b = INT16_MAX;
 8009f56:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	804b      	strh	r3, [r1, #2]
 8009f5e:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009f60:	fa1f f38c 	uxth.w	r3, ip
 8009f64:	e7cf      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
 8009f66:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009f6a:	4614      	mov	r4, r2
 8009f6c:	4615      	mov	r5, r2
 8009f6e:	e7be      	b.n	8009eee <R3_2_GetPhaseCurrents+0xb6>
          Iab->b = (int16_t)Aux;
 8009f70:	b215      	sxth	r5, r2
 8009f72:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009f74:	fa1f f38c 	uxth.w	r3, ip
 8009f78:	b292      	uxth	r2, r2
 8009f7a:	e7c4      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
 8009f7c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009f80:	461c      	mov	r4, r3
 8009f82:	469c      	mov	ip, r3
 8009f84:	e79a      	b.n	8009ebc <R3_2_GetPhaseCurrents+0x84>
          Iab->a = (int16_t)Aux;
 8009f86:	fa0f fc83 	sxth.w	ip, r3
 8009f8a:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	e7b9      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
 8009f92:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8009f96:	e777      	b.n	8009e88 <R3_2_GetPhaseCurrents+0x50>
          Iab->b = (int16_t)Aux;
 8009f98:	b215      	sxth	r5, r2
 8009f9a:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	e7b2      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
    pHandle->_Super.Ia = Iab->a;
 8009fa0:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8009fa4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009fa8:	880b      	ldrh	r3, [r1, #0]
 8009faa:	884a      	ldrh	r2, [r1, #2]
 8009fac:	e7ab      	b.n	8009f06 <R3_2_GetPhaseCurrents+0xce>
 8009fae:	bf00      	nop
 8009fb0:	ffff8001 	.word	0xffff8001

08009fb4 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8009fb4:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009fb6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8009fba:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8009fbe:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009fc2:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009fc6:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8009fc8:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009fcc:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009fce:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8009fd0:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009fd4:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009fd8:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009fda:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009fdc:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009fde:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009fe0:	4904      	ldr	r1, [pc, #16]	@ (8009ff4 <R3_2_SetADCSampPointPolarization+0x40>)
 8009fe2:	685b      	ldr	r3, [r3, #4]
}
 8009fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009fe8:	420b      	tst	r3, r1
}
 8009fea:	bf14      	ite	ne
 8009fec:	2001      	movne	r0, #1
 8009fee:	2000      	moveq	r0, #0
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	02000070 	.word	0x02000070

08009ff8 <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 8009ff8:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009ffa:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009ffe:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800a002:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800a004:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a008:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800a00c:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a010:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a014:	6853      	ldr	r3, [r2, #4]
 800a016:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a01a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a01e:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a020:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a024:	2b0f      	cmp	r3, #15
 800a026:	d80d      	bhi.n	800a044 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a028:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a02c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a030:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 800a032:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a036:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 800a038:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a03a:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a044:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a046:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 800a048:	600b      	str	r3, [r1, #0]
}
 800a04a:	4770      	bx	lr

0800a04c <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a04c:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 800a050:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a052:	3314      	adds	r3, #20
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a054:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800a058:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a05a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a05e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800a062:	6853      	ldr	r3, [r2, #4]
 800a064:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06c:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a06e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a072:	2b0f      	cmp	r3, #15
 800a074:	d80a      	bhi.n	800a08c <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 800a076:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a07a:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a07e:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a080:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800a082:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a084:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a088:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a08c:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a08e:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 800a092:	600b      	str	r3, [r1, #0]
}
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop

0800a098 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a098:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a09c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a0a0:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 800a0a2:	f04f 0c01 	mov.w	ip, #1
{
 800a0a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a0a8:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a0ac:	f04f 0e00 	mov.w	lr, #0
 800a0b0:	f880 e07c 	strb.w	lr, [r0, #124]	@ 0x7c
  pHandle->ADCRegularLocked = true;
 800a0b4:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 800a0b8:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a0ba:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a0bc:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a0be:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a0c0:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a0c4:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a0c6:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	07d2      	lsls	r2, r2, #31
 800a0cc:	d5fc      	bpl.n	800a0c8 <R3_2_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a0ce:	f06f 0201 	mvn.w	r2, #1
 800a0d2:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800a0d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a0da:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a0dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0e2:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800a0e4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a0e8:	2a02      	cmp	r2, #2
 800a0ea:	d007      	beq.n	800a0fc <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a0ec:	f06f 0201 	mvn.w	r2, #1
 800a0f0:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	f042 0201 	orr.w	r2, r2, #1
 800a0f8:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800a0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800a0fc:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a0fe:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 800a100:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a104:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800a106:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a10a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800a10c:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800a110:	f240 5255 	movw	r2, #1365	@ 0x555
 800a114:	4211      	tst	r1, r2
 800a116:	d004      	beq.n	800a122 <R3_2_SwitchOnPWM+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a118:	f8c7 c018 	str.w	ip, [r7, #24]
 800a11c:	61ae      	str	r6, [r5, #24]
 800a11e:	61a0      	str	r0, [r4, #24]
}
 800a120:	e7e4      	b.n	800a0ec <R3_2_SwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 800a122:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 800a126:	62ae      	str	r6, [r5, #40]	@ 0x28
 800a128:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800a12a:	e7df      	b.n	800a0ec <R3_2_SwitchOnPWM+0x54>

0800a12c <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a12c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 800a130:	f890 1083 	ldrb.w	r1, [r0, #131]	@ 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a134:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	f022 0201 	bic.w	r2, r2, #1
 800a13c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a13e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a140:	f04f 0c00 	mov.w	ip, #0
 800a144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a148:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800a14c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 800a14e:	b919      	cbnz	r1, 800a158 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a150:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a154:	2a02      	cmp	r2, #2
 800a156:	d00c      	beq.n	800a172 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a158:	f06f 0201 	mvn.w	r2, #1
 800a15c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a15e:	691a      	ldr	r2, [r3, #16]
 800a160:	07d2      	lsls	r2, r2, #31
 800a162:	d5fc      	bpl.n	800a15e <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a164:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick */
  pHandle->ADCRegularLocked = false;
 800a168:	2200      	movs	r2, #0
 800a16a:	6119      	str	r1, [r3, #16]
 800a16c:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
 800a170:	4770      	bx	lr
{
 800a172:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a174:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a178:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a17c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 800a17e:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a180:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800a184:	628c      	str	r4, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a186:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800a18a:	6291      	str	r1, [r2, #40]	@ 0x28
 800a18c:	f06f 0201 	mvn.w	r2, #1
 800a190:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	07d1      	lsls	r1, r2, #31
 800a196:	d5fc      	bpl.n	800a192 <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a198:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 800a19c:	2200      	movs	r2, #0
 800a19e:	6119      	str	r1, [r3, #16]
}
 800a1a0:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 800a1a2:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
}
 800a1a6:	4770      	bx	lr

0800a1a8 <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 800a1a8:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a1aa:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800a1ae:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a1b0:	6853      	ldr	r3, [r2, #4]
 800a1b2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a1b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ba:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800a1bc:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800a1c0:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 800a1c4:	480c      	ldr	r0, [pc, #48]	@ (800a1f8 <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800a1c6:	3214      	adds	r2, #20
 800a1c8:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 800a1cc:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 800a1d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800a1d4:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	bfa8      	it	ge
 800a1da:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 800a1dc:	4283      	cmp	r3, r0
 800a1de:	bfb8      	it	lt
 800a1e0:	4603      	movlt	r3, r0
 800a1e2:	b21b      	sxth	r3, r3
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f363 020f 	bfi	r2, r3, #0, #16
 800a1ea:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a1ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 800a1f2:	600a      	str	r2, [r1, #0]
}
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	ffff8001 	.word	0xffff8001

0800a1fc <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a1fc:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a204:	6813      	ldr	r3, [r2, #0]
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a206:	6b94      	ldr	r4, [r2, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a208:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    pHandle->ADCRegularLocked=true;
 800a20a:	2201      	movs	r2, #1
 800a20c:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a210:	f06f 0201 	mvn.w	r2, #1
 800a214:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	07d5      	lsls	r5, r2, #31
 800a21a:	d5fc      	bpl.n	800a216 <R3_2_RLSwitchOnPWM+0x1a>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800a21c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a220:	f06f 0601 	mvn.w	r6, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a224:	2501      	movs	r5, #1
 800a226:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a228:	611e      	str	r6, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a22a:	635d      	str	r5, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a22c:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	07d2      	lsls	r2, r2, #31
 800a232:	d5fc      	bpl.n	800a22e <R3_2_RLSwitchOnPWM+0x32>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	f042 0201 	orr.w	r2, r2, #1
 800a23a:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a23c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a23e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a242:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a244:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a24a:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800a24c:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a250:	2a02      	cmp	r2, #2
 800a252:	d00f      	beq.n	800a274 <R3_2_RLSwitchOnPWM+0x78>
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 800a254:	2303      	movs	r3, #3
 800a256:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
  MODIFY_REG(ADCx->CR,
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	4a12      	ldr	r2, [pc, #72]	@ (800a2a8 <R3_2_RLSwitchOnPWM+0xac>)
 800a25e:	4013      	ands	r3, r2
 800a260:	f043 0308 	orr.w	r3, r3, #8
 800a264:	60a3      	str	r3, [r4, #8]
 800a266:	688b      	ldr	r3, [r1, #8]
 800a268:	4013      	ands	r3, r2
 800a26a:	f043 0308 	orr.w	r3, r3, #8
 800a26e:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800a274:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a276:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a27a:	6c07      	ldr	r7, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a27c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a27e:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a282:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a286:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800a28a:	f240 5355 	movw	r3, #1365	@ 0x555
 800a28e:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a290:	bf15      	itete	ne
 800a292:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a296:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a29a:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a29e:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 800a2a2:	62ae      	str	r6, [r5, #40]	@ 0x28
}
 800a2a4:	e7d6      	b.n	800a254 <R3_2_RLSwitchOnPWM+0x58>
 800a2a6:	bf00      	nop
 800a2a8:	7fffffc0 	.word	0x7fffffc0

0800a2ac <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a2ac:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a2b0:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800a2b2:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a2b6:	f06f 0201 	mvn.w	r2, #1
 800a2ba:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800a2be:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a2c0:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a2c2:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a2c4:	63d9      	str	r1, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	07d2      	lsls	r2, r2, #31
 800a2ca:	d5fc      	bpl.n	800a2c6 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a2cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2d2:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800a2d4:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d000      	beq.n	800a2de <R3_2_TurnOnLowSides+0x32>
 800a2dc:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a2de:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a2e2:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a2e4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a2e6:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a2ea:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a2ec:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a2f0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800a2f4:	618c      	str	r4, [r1, #24]
}
 800a2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2fa:	619a      	str	r2, [r3, #24]
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop

0800a300 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800a300:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 800a304:	b510      	push	{r4, lr}
 800a306:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 800a30a:	f101 0e08 	add.w	lr, r1, #8
 800a30e:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800a310:	f85e 300c 	ldr.w	r3, [lr, ip]
 800a314:	f36f 130f 	bfc	r3, #4, #12
 800a318:	4313      	orrs	r3, r2
 800a31a:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 800a31e:	684a      	ldr	r2, [r1, #4]
 800a320:	f000 0303 	and.w	r3, r0, #3
 800a324:	4313      	orrs	r3, r2
 800a326:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800a328:	680a      	ldr	r2, [r1, #0]
 800a32a:	f000 0010 	and.w	r0, r0, #16
 800a32e:	2301      	movs	r3, #1
 800a330:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800a332:	ea33 0202 	bics.w	r2, r3, r2
 800a336:	d014      	beq.n	800a362 <R3_2_SetAOReferenceVoltage+0x62>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800a338:	4a14      	ldr	r2, [pc, #80]	@ (800a38c <R3_2_SetAOReferenceVoltage+0x8c>)
 800a33a:	4815      	ldr	r0, [pc, #84]	@ (800a390 <R3_2_SetAOReferenceVoltage+0x90>)
 800a33c:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800a33e:	680c      	ldr	r4, [r1, #0]
 800a340:	fba0 0202 	umull	r0, r2, r0, r2
 800a344:	0cd2      	lsrs	r2, r2, #19
 800a346:	4323      	orrs	r3, r4
 800a348:	00d2      	lsls	r2, r2, #3
 800a34a:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800a34c:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800a34e:	9b00      	ldr	r3, [sp, #0]
 800a350:	b12b      	cbz	r3, 800a35e <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a352:	9b00      	ldr	r3, [sp, #0]
 800a354:	3b01      	subs	r3, #1
 800a356:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800a358:	9b00      	ldr	r3, [sp, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1f9      	bne.n	800a352 <R3_2_SetAOReferenceVoltage+0x52>
}
 800a35e:	b002      	add	sp, #8
 800a360:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a362:	4b0a      	ldr	r3, [pc, #40]	@ (800a38c <R3_2_SetAOReferenceVoltage+0x8c>)
 800a364:	4a0a      	ldr	r2, [pc, #40]	@ (800a390 <R3_2_SetAOReferenceVoltage+0x90>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	fba2 2303 	umull	r2, r3, r2, r3
 800a36c:	0cdb      	lsrs	r3, r3, #19
 800a36e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a372:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f1      	beq.n	800a35e <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a380:	9b01      	ldr	r3, [sp, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1f9      	bne.n	800a37a <R3_2_SetAOReferenceVoltage+0x7a>
}
 800a386:	b002      	add	sp, #8
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	bf00      	nop
 800a38c:	20000500 	.word	0x20000500
 800a390:	431bde83 	.word	0x431bde83

0800a394 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a394:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a398:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 800a39a:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a39e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a3a0:	f06f 0201 	mvn.w	r2, #1
 800a3a4:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a3a8:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a3aa:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	07d2      	lsls	r2, r2, #31
 800a3b0:	d5fc      	bpl.n	800a3ac <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a3b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3b8:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a3ba:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d000      	beq.n	800a3c4 <R3_2_RLTurnOnLowSides+0x30>
 800a3c2:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a3c4:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a3c8:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a3ca:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a3cc:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800a3d0:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a3d2:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a3d6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800a3da:	628c      	str	r4, [r1, #40]	@ 0x28
}
 800a3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3e0:	629a      	str	r2, [r3, #40]	@ 0x28
 800a3e2:	4770      	bx	lr

0800a3e4 <R3_2_Init>:
{
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a3e8:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a3ec:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a3ee:	6d26      	ldr	r6, [r4, #80]	@ 0x50
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a3f0:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a3f2:	6825      	ldr	r5, [r4, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800a3f4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
{
 800a3f8:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a3fa:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
{
 800a3fe:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a400:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a404:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a408:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a40a:	6a20      	ldr	r0, [r4, #32]
 800a40c:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800a40e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800a412:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a414:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800a416:	e9d4 a904 	ldrd	sl, r9, [r4, #16]
 800a41a:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a41c:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a420:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a422:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a424:	f022 0220 	bic.w	r2, r2, #32
 800a428:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a42a:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a42c:	6872      	ldr	r2, [r6, #4]
 800a42e:	f022 0204 	bic.w	r2, r2, #4
 800a432:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a434:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a438:	6872      	ldr	r2, [r6, #4]
 800a43a:	f022 0220 	bic.w	r2, r2, #32
 800a43e:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a440:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 800a442:	4a85      	ldr	r2, [pc, #532]	@ (800a658 <R3_2_Init+0x274>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a444:	4885      	ldr	r0, [pc, #532]	@ (800a65c <R3_2_Init+0x278>)
 800a446:	4295      	cmp	r5, r2
 800a448:	6902      	ldr	r2, [r0, #16]
 800a44a:	bf0c      	ite	eq
 800a44c:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 800a450:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 800a454:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 800a456:	b181      	cbz	r1, 800a47a <R3_2_Init+0x96>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800a458:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800a45c:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800a460:	6989      	ldr	r1, [r1, #24]
 800a462:	f04e 0e01 	orr.w	lr, lr, #1
 800a466:	f8c2 e000 	str.w	lr, [r2]
 800a46a:	6802      	ldr	r2, [r0, #0]
 800a46c:	f042 0201 	orr.w	r2, r2, #1
 800a470:	6002      	str	r2, [r0, #0]
 800a472:	680a      	ldr	r2, [r1, #0]
 800a474:	f042 0201 	orr.w	r2, r2, #1
 800a478:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 800a47a:	b1b3      	cbz	r3, 800a4aa <R3_2_Init+0xc6>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800a47c:	f894 20a7 	ldrb.w	r2, [r4, #167]	@ 0xa7
 800a480:	2a01      	cmp	r2, #1
 800a482:	d00a      	beq.n	800a49a <R3_2_Init+0xb6>
 800a484:	f1bc 0f00 	cmp.w	ip, #0
 800a488:	d007      	beq.n	800a49a <R3_2_Init+0xb6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 800a48a:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a48e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a490:	9303      	str	r3, [sp, #12]
 800a492:	4661      	mov	r1, ip
 800a494:	f7ff ff34 	bl	800a300 <R3_2_SetAOReferenceVoltage>
 800a498:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	f042 0201 	orr.w	r2, r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a4a8:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 800a4aa:	f1bb 0f00 	cmp.w	fp, #0
 800a4ae:	d017      	beq.n	800a4e0 <R3_2_Init+0xfc>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800a4b0:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d007      	beq.n	800a4c8 <R3_2_Init+0xe4>
 800a4b8:	9b00      	ldr	r3, [sp, #0]
 800a4ba:	b12b      	cbz	r3, 800a4c8 <R3_2_Init+0xe4>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800a4bc:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a4c0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	f7ff ff1c 	bl	800a300 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a4c8:	f8db 3000 	ldr.w	r3, [fp]
 800a4cc:	f043 0301 	orr.w	r3, r3, #1
 800a4d0:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a4d4:	f8db 3000 	ldr.w	r3, [fp]
 800a4d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a4dc:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 800a4e0:	f1ba 0f00 	cmp.w	sl, #0
 800a4e4:	d017      	beq.n	800a516 <R3_2_Init+0x132>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800a4e6:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d007      	beq.n	800a4fe <R3_2_Init+0x11a>
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	b12b      	cbz	r3, 800a4fe <R3_2_Init+0x11a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800a4f2:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a4f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f7ff ff01 	bl	800a300 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a4fe:	f8da 3000 	ldr.w	r3, [sl]
 800a502:	f043 0301 	orr.w	r3, r3, #1
 800a506:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a50a:	f8da 3000 	ldr.w	r3, [sl]
 800a50e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a512:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 800a516:	f1b9 0f00 	cmp.w	r9, #0
 800a51a:	d017      	beq.n	800a54c <R3_2_Init+0x168>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800a51c:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 800a520:	2b01      	cmp	r3, #1
 800a522:	d007      	beq.n	800a534 <R3_2_Init+0x150>
 800a524:	9b02      	ldr	r3, [sp, #8]
 800a526:	b12b      	cbz	r3, 800a534 <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800a528:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	@ 0xa4
 800a52c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a52e:	4619      	mov	r1, r3
 800a530:	f7ff fee6 	bl	800a300 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a534:	f8d9 3000 	ldr.w	r3, [r9]
 800a538:	f043 0301 	orr.w	r3, r3, #1
 800a53c:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a540:	f8d9 3000 	ldr.w	r3, [r9]
 800a544:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a548:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	07da      	lsls	r2, r3, #31
 800a550:	d553      	bpl.n	800a5fa <R3_2_Init+0x216>
 800a552:	68b3      	ldr	r3, [r6, #8]
 800a554:	07db      	lsls	r3, r3, #31
 800a556:	d54c      	bpl.n	800a5f2 <R3_2_Init+0x20e>
  volatile uint32_t Brk2Timeout = 1000;
 800a558:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a55c:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	f023 0301 	bic.w	r3, r3, #1
 800a564:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a566:	686b      	ldr	r3, [r5, #4]
 800a568:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a56c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a570:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a572:	69ab      	ldr	r3, [r5, #24]
 800a574:	f043 0308 	orr.w	r3, r3, #8
 800a578:	61ab      	str	r3, [r5, #24]
 800a57a:	69ab      	ldr	r3, [r5, #24]
 800a57c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a580:	61ab      	str	r3, [r5, #24]
 800a582:	69eb      	ldr	r3, [r5, #28]
 800a584:	f043 0308 	orr.w	r3, r3, #8
 800a588:	61eb      	str	r3, [r5, #28]
 800a58a:	69eb      	ldr	r3, [r5, #28]
 800a58c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a590:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a592:	696b      	ldr	r3, [r5, #20]
 800a594:	f043 0301 	orr.w	r3, r3, #1
 800a598:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 800a59a:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d046      	beq.n	800a630 <R3_2_Init+0x24c>
    if (M1 == pHandle->_Super.Motor)
 800a5a2:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d034      	beq.n	800a614 <R3_2_Init+0x230>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800a5aa:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 800a5ae:	612b      	str	r3, [r5, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a5b0:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a5b2:	9a05      	ldr	r2, [sp, #20]
 800a5b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5b8:	b172      	cbz	r2, 800a5d8 <R3_2_Init+0x1f4>
 800a5ba:	b16b      	cbz	r3, 800a5d8 <R3_2_Init+0x1f4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800a5bc:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 800a5c0:	e000      	b.n	800a5c4 <R3_2_Init+0x1e0>
 800a5c2:	b14b      	cbz	r3, 800a5d8 <R3_2_Init+0x1f4>
 800a5c4:	6129      	str	r1, [r5, #16]
    Brk2Timeout--;
 800a5c6:	9b05      	ldr	r3, [sp, #20]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a5cc:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a5ce:	9a05      	ldr	r2, [sp, #20]
 800a5d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d4:	2a00      	cmp	r2, #0
 800a5d6:	d1f4      	bne.n	800a5c2 <R3_2_Init+0x1de>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800a5d8:	68eb      	ldr	r3, [r5, #12]
 800a5da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5de:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 800a5e0:	6a2b      	ldr	r3, [r5, #32]
 800a5e2:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800a5e6:	f043 0305 	orr.w	r3, r3, #5
 800a5ea:	622b      	str	r3, [r5, #32]
}
 800a5ec:	b007      	add	sp, #28
 800a5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7ff fbc2 	bl	8009d7c <R3_2_ADCxInit>
 800a5f8:	e7ae      	b.n	800a558 <R3_2_Init+0x174>
        R3_2_ADCxInit(ADCx_1);
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f7ff fbbe 	bl	8009d7c <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800a600:	2340      	movs	r3, #64	@ 0x40
 800a602:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a60a:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a60c:	68b3      	ldr	r3, [r6, #8]
 800a60e:	07db      	lsls	r3, r3, #31
 800a610:	d4a2      	bmi.n	800a558 <R3_2_Init+0x174>
 800a612:	e7ee      	b.n	800a5f2 <R3_2_Init+0x20e>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800a614:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d00d      	beq.n	800a638 <R3_2_Init+0x254>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d1c4      	bne.n	800a5aa <R3_2_Init+0x1c6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a620:	2201      	movs	r2, #1
 800a622:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a624:	696a      	ldr	r2, [r5, #20]
 800a626:	f042 0201 	orr.w	r2, r2, #1
 800a62a:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a62c:	632b      	str	r3, [r5, #48]	@ 0x30
}
 800a62e:	e7bc      	b.n	800a5aa <R3_2_Init+0x1c6>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800a630:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 800a634:	2b01      	cmp	r3, #1
 800a636:	d004      	beq.n	800a642 <R3_2_Init+0x25e>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800a638:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 800a63c:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800a63e:	626b      	str	r3, [r5, #36]	@ 0x24
}
 800a640:	e7b3      	b.n	800a5aa <R3_2_Init+0x1c6>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 800a642:	f894 20a6 	ldrb.w	r2, [r4, #166]	@ 0xa6
 800a646:	2a03      	cmp	r2, #3
 800a648:	d1f6      	bne.n	800a638 <R3_2_Init+0x254>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a64a:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a64c:	696b      	ldr	r3, [r5, #20]
 800a64e:	f043 0301 	orr.w	r3, r3, #1
 800a652:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a654:	632a      	str	r2, [r5, #48]	@ 0x30
}
 800a656:	e7ef      	b.n	800a638 <R3_2_Init+0x254>
 800a658:	40012c00 	.word	0x40012c00
 800a65c:	e0042000 	.word	0xe0042000

0800a660 <R3_2_SetOffsetCalib>:
{
 800a660:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a662:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800a666:	680b      	ldr	r3, [r1, #0]
 800a668:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 800a66c:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a66e:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 800a672:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 800a676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 800a67c:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 800a680:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800a684:	608b      	str	r3, [r1, #8]
 800a686:	e9c1 0200 	strd	r0, r2, [r1]
}
 800a68a:	4770      	bx	lr

0800a68c <R3_2_CurrentReadingPolarization>:
{
 800a68c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a68e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a692:	681d      	ldr	r5, [r3, #0]
  ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a694:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a696:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  if (true == pHandle->_Super.offsetCalibStatus)
 800a698:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
{
 800a69c:	b083      	sub	sp, #12
 800a69e:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800a6a0:	b1ab      	cbz	r3, 800a6ce <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	4a46      	ldr	r2, [pc, #280]	@ (800a7c0 <R3_2_CurrentReadingPolarization+0x134>)
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	f043 0308 	orr.w	r3, r3, #8
 800a6ac:	60bb      	str	r3, [r7, #8]
 800a6ae:	68b3      	ldr	r3, [r6, #8]
 800a6b0:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a6b2:	2180      	movs	r1, #128	@ 0x80
 800a6b4:	f043 0308 	orr.w	r3, r3, #8
 800a6b8:	60b3      	str	r3, [r6, #8]
 800a6ba:	f8a0 1096 	strh.w	r1, [r0, #150]	@ 0x96
  pHandle->_Super.Sector = SECTOR_5;
 800a6be:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 800a6c0:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800a6c2:	f884 207a 	strb.w	r2, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 800a6c6:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
}
 800a6ca:	b003      	add	sp, #12
 800a6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800a6ce:	6802      	ldr	r2, [r0, #0]
 800a6d0:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 800a6d2:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800a6d6:	6942      	ldr	r2, [r0, #20]
 800a6d8:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 800a6da:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    pHandle->PhaseCOffset = 0U;
 800a6de:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 800a6e2:	6a2b      	ldr	r3, [r5, #32]
 800a6e4:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800a6e8:	f023 0305 	bic.w	r3, r3, #5
 800a6ec:	622b      	str	r3, [r5, #32]
    pHandle->PolarizationSector=SECTOR_5;
 800a6ee:	2304      	movs	r3, #4
 800a6f0:	f880 3099 	strb.w	r3, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 800a6f4:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800a6f8:	4b32      	ldr	r3, [pc, #200]	@ (800a7c4 <R3_2_CurrentReadingPolarization+0x138>)
 800a6fa:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800a6fc:	4b32      	ldr	r3, [pc, #200]	@ (800a7c8 <R3_2_CurrentReadingPolarization+0x13c>)
 800a6fe:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a700:	2380      	movs	r3, #128	@ 0x80
 800a702:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a706:	f7ff fcc7 	bl	800a098 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 800a70a:	4a30      	ldr	r2, [pc, #192]	@ (800a7cc <R3_2_CurrentReadingPolarization+0x140>)
 800a70c:	686b      	ldr	r3, [r5, #4]
 800a70e:	4013      	ands	r3, r2
 800a710:	2b70      	cmp	r3, #112	@ 0x70
 800a712:	d1fb      	bne.n	800a70c <R3_2_CurrentReadingPolarization+0x80>
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4a2a      	ldr	r2, [pc, #168]	@ (800a7c0 <R3_2_CurrentReadingPolarization+0x134>)
 800a718:	4013      	ands	r3, r2
 800a71a:	f043 0308 	orr.w	r3, r3, #8
 800a71e:	60bb      	str	r3, [r7, #8]
 800a720:	68b3      	ldr	r3, [r6, #8]
 800a722:	4013      	ands	r3, r2
 800a724:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 800a728:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800a72c:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 800a72e:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 800a732:	f104 0656 	add.w	r6, r4, #86	@ 0x56
 800a736:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800a73a:	4631      	mov	r1, r6
 800a73c:	463b      	mov	r3, r7
 800a73e:	4628      	mov	r0, r5
 800a740:	f7f8 fe26 	bl	8003390 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a744:	4620      	mov	r0, r4
 800a746:	f7ff fcf1 	bl	800a12c <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 800a750:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 800a754:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800a758:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d0 <R3_2_CurrentReadingPolarization+0x144>)
 800a75a:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a75c:	4620      	mov	r0, r4
 800a75e:	f7ff fc9b 	bl	800a098 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800a762:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800a766:	463b      	mov	r3, r7
 800a768:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800a76c:	4631      	mov	r1, r6
 800a76e:	4628      	mov	r0, r5
 800a770:	f7f8 fe0e 	bl	8003390 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff fcd9 	bl	800a12c <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800a77a:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800a77e:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800a780:	091b      	lsrs	r3, r3, #4
 800a782:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800a786:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800a78a:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800a78e:	9800      	ldr	r0, [sp, #0]
 800a790:	6020      	str	r0, [r4, #0]
    pHandle->_Super.offsetCalibStatus = true;
 800a792:	2101      	movs	r1, #1
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800a794:	0912      	lsrs	r2, r2, #4
 800a796:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800a79a:	40cb      	lsrs	r3, r1
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800a79c:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.offsetCalibStatus = true;
 800a79e:	f884 107f 	strb.w	r1, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800a7a2:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a7a4:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a7a6:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a7a8:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 800a7aa:	696b      	ldr	r3, [r5, #20]
 800a7ac:	f043 0320 	orr.w	r3, r3, #32
 800a7b0:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 800a7b2:	6a2b      	ldr	r3, [r5, #32]
 800a7b4:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800a7b8:	f043 0305 	orr.w	r3, r3, #5
 800a7bc:	622b      	str	r3, [r5, #32]
}
 800a7be:	e77e      	b.n	800a6be <R3_2_CurrentReadingPolarization+0x32>
 800a7c0:	7fffffc0 	.word	0x7fffffc0
 800a7c4:	08009ff9 	.word	0x08009ff9
 800a7c8:	08009fb5 	.word	0x08009fb5
 800a7cc:	02000070 	.word	0x02000070
 800a7d0:	0800a04d 	.word	0x0800a04d

0800a7d4 <R3_2_SetADCSampPointSectX>:
{
 800a7d4:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 800a7d6:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 800a7da:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 800a7de:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 800a7e2:	ebae 0203 	sub.w	r2, lr, r3
 800a7e6:	f8b1 4098 	ldrh.w	r4, [r1, #152]	@ 0x98
 800a7ea:	b292      	uxth	r2, r2
 800a7ec:	42a2      	cmp	r2, r4
 800a7ee:	d917      	bls.n	800a820 <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 800a7f0:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800a7f2:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800a7f6:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800a7fa:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a7fc:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800a7fe:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800a802:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800a806:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a80a:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a80c:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a80e:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a810:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a812:	6852      	ldr	r2, [r2, #4]
 800a814:	4b10      	ldr	r3, [pc, #64]	@ (800a858 <R3_2_SetADCSampPointSectX+0x84>)
 800a816:	421a      	tst	r2, r3
}
 800a818:	bf14      	ite	ne
 800a81a:	2001      	movne	r0, #1
 800a81c:	2000      	moveq	r0, #0
 800a81e:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800a820:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 800a824:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 800a828:	fa1f fc8c 	uxth.w	ip, ip
 800a82c:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800a830:	d904      	bls.n	800a83c <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800a832:	f8b1 209c 	ldrh.w	r2, [r1, #156]	@ 0x9c
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	b29b      	uxth	r3, r3
 800a83a:	e7df      	b.n	800a7fc <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800a83c:	4423      	add	r3, r4
 800a83e:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 800a840:	459e      	cmp	lr, r3
 800a842:	d8db      	bhi.n	800a7fc <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a844:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800a846:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a84a:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800a84e:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a852:	b29b      	uxth	r3, r3
 800a854:	e7d2      	b.n	800a7fc <R3_2_SetADCSampPointSectX+0x28>
 800a856:	bf00      	nop
 800a858:	02000070 	.word	0x02000070

0800a85c <R3_2_TIMx_UP_IRQHandler>:
{
 800a85c:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a85e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a862:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a866:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a868:	681d      	ldr	r5, [r3, #0]
{
 800a86a:	4601      	mov	r1, r0
 800a86c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800a870:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    if (OPAMPParams != NULL)
 800a872:	b1d6      	cbz	r6, 800a8aa <R3_2_TIMx_UP_IRQHandler+0x4e>
 800a874:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 800a878:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1fc      	bne.n	800a878 <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 800a87e:	eb06 030c 	add.w	r3, r6, ip
 800a882:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 800a884:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a888:	d006      	beq.n	800a898 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800a88a:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800a88e:	6834      	ldr	r4, [r6, #0]
 800a890:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 800a894:	433c      	orrs	r4, r7
 800a896:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 800a898:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 800a89a:	1c66      	adds	r6, r4, #1
 800a89c:	d005      	beq.n	800a8aa <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800a89e:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800a8a0:	6833      	ldr	r3, [r6, #0]
 800a8a2:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 800a8a6:	4323      	orrs	r3, r4
 800a8a8:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800a8aa:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 800a8ae:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800a8b0:	431c      	orrs	r4, r3
 800a8b2:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800a8b4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a8b6:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800a8ba:	4303      	orrs	r3, r0
 800a8bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a8be:	686b      	ldr	r3, [r5, #4]
 800a8c0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a8c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a8c8:	2280      	movs	r2, #128	@ 0x80
 800a8ca:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800a8ce:	606b      	str	r3, [r5, #4]
}
 800a8d0:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 800a8d4:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a8d6:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 800a8da:	4770      	bx	lr

0800a8dc <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800a8dc:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 800a8e0:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	d13d      	bne.n	800a962 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a8e6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a8ea:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a8ec:	699a      	ldr	r2, [r3, #24]
 800a8ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a8f2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a8f6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a8fa:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a8fc:	6a1a      	ldr	r2, [r3, #32]
 800a8fe:	f042 0201 	orr.w	r2, r2, #1
 800a902:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a904:	6a1a      	ldr	r2, [r3, #32]
 800a906:	f022 0204 	bic.w	r2, r2, #4
 800a90a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a90c:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a90e:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a912:	2a01      	cmp	r2, #1
 800a914:	d033      	beq.n	800a97e <R3_2_RLDetectionModeEnable+0xa2>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800a916:	2a02      	cmp	r2, #2
 800a918:	d10f      	bne.n	800a93a <R3_2_RLDetectionModeEnable+0x5e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a91a:	699a      	ldr	r2, [r3, #24]
 800a91c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a920:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a924:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a928:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a92a:	6a1a      	ldr	r2, [r3, #32]
 800a92c:	f042 0210 	orr.w	r2, r2, #16
 800a930:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a932:	6a1a      	ldr	r2, [r3, #32]
 800a934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a938:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a93a:	69da      	ldr	r2, [r3, #28]
 800a93c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a940:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a944:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800a948:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a94a:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800a94c:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800a950:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a954:	621a      	str	r2, [r3, #32]
 800a956:	6a1a      	ldr	r2, [r3, #32]
 800a958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a95c:	621a      	str	r2, [r3, #32]
 800a95e:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800a962:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a0 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800a964:	490f      	ldr	r1, [pc, #60]	@ (800a9a4 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a966:	4a10      	ldr	r2, [pc, #64]	@ (800a9a8 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800a968:	4c10      	ldr	r4, [pc, #64]	@ (800a9ac <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800a96a:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800a96c:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800a96e:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a970:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800a974:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800a978:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800a97c:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a97e:	699a      	ldr	r2, [r3, #24]
 800a980:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a984:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a988:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a98c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a98e:	6a1a      	ldr	r2, [r3, #32]
 800a990:	f022 0210 	bic.w	r2, r2, #16
 800a994:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800a996:	6a1a      	ldr	r2, [r3, #32]
 800a998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a99c:	621a      	str	r2, [r3, #32]
}
 800a99e:	e7cc      	b.n	800a93a <R3_2_RLDetectionModeEnable+0x5e>
 800a9a0:	0800a395 	.word	0x0800a395
 800a9a4:	0800a1fd 	.word	0x0800a1fd
 800a9a8:	0800a12d 	.word	0x0800a12d
 800a9ac:	0800a1a9 	.word	0x0800a1a9

0800a9b0 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800a9b0:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d03d      	beq.n	800aa34 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a9b8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800a9bc:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a9c0:	681b      	ldr	r3, [r3, #0]
{
 800a9c2:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a9c4:	699a      	ldr	r2, [r3, #24]
 800a9c6:	4c40      	ldr	r4, [pc, #256]	@ (800aac8 <R3_2_RLDetectionModeDisable+0x118>)
 800a9c8:	4022      	ands	r2, r4
 800a9ca:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a9ce:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a9d0:	6a1a      	ldr	r2, [r3, #32]
 800a9d2:	f042 0201 	orr.w	r2, r2, #1
 800a9d6:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a9d8:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a9dc:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800a9de:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a9e2:	d028      	beq.n	800aa36 <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a9e4:	2a02      	cmp	r2, #2
 800a9e6:	d04a      	beq.n	800aa7e <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a9e8:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a9ea:	699a      	ldr	r2, [r3, #24]
 800a9ec:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a9f0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a9f4:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800a9f8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a9fa:	6a1a      	ldr	r2, [r3, #32]
 800a9fc:	f042 0210 	orr.w	r2, r2, #16
 800aa00:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800aa02:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aa04:	69da      	ldr	r2, [r3, #28]
 800aa06:	4022      	ands	r2, r4
 800aa08:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa0c:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800aa0e:	6a1a      	ldr	r2, [r3, #32]
 800aa10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa14:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800aa16:	4a2d      	ldr	r2, [pc, #180]	@ (800aacc <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aa18:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800aa1a:	492d      	ldr	r1, [pc, #180]	@ (800aad0 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800aa1c:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800aa1e:	4a2d      	ldr	r2, [pc, #180]	@ (800aad4 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800aa20:	4c2d      	ldr	r4, [pc, #180]	@ (800aad8 <R3_2_RLDetectionModeDisable+0x128>)
 800aa22:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800aa24:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800aa26:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800aa2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800aa2e:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800aa32:	4770      	bx	lr
 800aa34:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800aa36:	6a1a      	ldr	r2, [r3, #32]
 800aa38:	f042 0204 	orr.w	r2, r2, #4
 800aa3c:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aa3e:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aa40:	699a      	ldr	r2, [r3, #24]
 800aa42:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800aa46:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800aa4a:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800aa4e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800aa50:	6a1a      	ldr	r2, [r3, #32]
 800aa52:	f042 0210 	orr.w	r2, r2, #16
 800aa56:	621a      	str	r2, [r3, #32]
 800aa58:	6a1a      	ldr	r2, [r3, #32]
 800aa5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa5e:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800aa60:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aa62:	69da      	ldr	r2, [r3, #28]
 800aa64:	4022      	ands	r2, r4
 800aa66:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa6a:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800aa6c:	6a1a      	ldr	r2, [r3, #32]
 800aa6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa72:	621a      	str	r2, [r3, #32]
 800aa74:	6a1a      	ldr	r2, [r3, #32]
 800aa76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa7a:	621a      	str	r2, [r3, #32]
}
 800aa7c:	e7cb      	b.n	800aa16 <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800aa7e:	6a1a      	ldr	r2, [r3, #32]
 800aa80:	f022 0204 	bic.w	r2, r2, #4
 800aa84:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aa86:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aa88:	699a      	ldr	r2, [r3, #24]
 800aa8a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800aa8e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800aa92:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800aa96:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800aa98:	6a1a      	ldr	r2, [r3, #32]
 800aa9a:	f042 0210 	orr.w	r2, r2, #16
 800aa9e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800aaa0:	6a1a      	ldr	r2, [r3, #32]
 800aaa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aaa6:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800aaa8:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aaaa:	69da      	ldr	r2, [r3, #28]
 800aaac:	4022      	ands	r2, r4
 800aaae:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aab2:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800aab4:	6a1a      	ldr	r2, [r3, #32]
 800aab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aaba:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800aabc:	6a1a      	ldr	r2, [r3, #32]
 800aabe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aac2:	621a      	str	r2, [r3, #32]
}
 800aac4:	e7a7      	b.n	800aa16 <R3_2_RLDetectionModeDisable+0x66>
 800aac6:	bf00      	nop
 800aac8:	fffeff8c 	.word	0xfffeff8c
 800aacc:	08009e39 	.word	0x08009e39
 800aad0:	0800a099 	.word	0x0800a099
 800aad4:	0800a12d 	.word	0x0800a12d
 800aad8:	0800a2ad 	.word	0x0800a2ad

0800aadc <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aadc:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800aae0:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aae4:	6812      	ldr	r2, [r2, #0]
{
 800aae6:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aae8:	69d0      	ldr	r0, [r2, #28]
 800aaea:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800aaee:	fb0c f101 	mul.w	r1, ip, r1
 800aaf2:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 800aaf6:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800aaf8:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 800aafa:	2401      	movs	r4, #1
 800aafc:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 800ab00:	f883 40a0 	strb.w	r4, [r3, #160]	@ 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 800ab04:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 800ab08:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800ab0a:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800ab0e:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800ab12:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ab16:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ab18:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ab1a:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ab1c:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ab1e:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 800ab22:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 800ab26:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 800ab2a:	f04f 0c03 	mov.w	ip, #3
 800ab2e:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800ab32:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ab34:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800ab36:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ab3a:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ab3c:	d007      	beq.n	800ab4e <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ab3e:	4b07      	ldr	r3, [pc, #28]	@ (800ab5c <R3_2_RLDetectionModeSetDuty+0x80>)
}
 800ab40:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ab44:	421a      	tst	r2, r3
 800ab46:	bf14      	ite	ne
 800ab48:	2001      	movne	r0, #1
 800ab4a:	2000      	moveq	r0, #0
}
 800ab4c:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800ab4e:	2200      	movs	r2, #0
}
 800ab50:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800ab54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	02000070 	.word	0x02000070

0800ab60 <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ab60:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800ab64:	681b      	ldr	r3, [r3, #0]

    pHandle->ADCRegularLocked=true;
 800ab66:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ab68:	f06f 0201 	mvn.w	r2, #1
{
 800ab6c:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800ab6e:	f880 10a0 	strb.w	r1, [r0, #160]	@ 0xa0
 800ab72:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ab74:	691a      	ldr	r2, [r3, #16]
 800ab76:	07d1      	lsls	r1, r2, #31
 800ab78:	d5fc      	bpl.n	800ab74 <R3_2_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800ab7a:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ab7e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ab80:	f06f 0401 	mvn.w	r4, #1
 800ab84:	3a05      	subs	r2, #5
 800ab86:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ab88:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ab8a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ab8c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ab8e:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ab90:	691a      	ldr	r2, [r3, #16]
 800ab92:	07d2      	lsls	r2, r2, #31
 800ab94:	d5fc      	bpl.n	800ab90 <R3_2_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800ab96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab9c:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800ab9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aba0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aba4:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800aba6:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800abaa:	2a02      	cmp	r2, #2
 800abac:	d00c      	beq.n	800abc8 <R3_2_RLTurnOnLowSidesAndStart+0x68>
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800abae:	2203      	movs	r2, #3
 800abb0:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 800abb4:	6a1a      	ldr	r2, [r3, #32]
 800abb6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800abba:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800abbc:	68da      	ldr	r2, [r3, #12]
 800abbe:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800abc2:	bc30      	pop	{r4, r5}
 800abc4:	60da      	str	r2, [r3, #12]
 800abc6:	4770      	bx	lr
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800abc8:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800abcc:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800abd0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800abd2:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800abd4:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800abd8:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800abda:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800abde:	6191      	str	r1, [r2, #24]
}
 800abe0:	e7e5      	b.n	800abae <R3_2_RLTurnOnLowSidesAndStart+0x4e>
 800abe2:	bf00      	nop

0800abe4 <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value.
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 800abe4:	b510      	push	{r4, lr}
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800abe6:	8a42      	ldrh	r2, [r0, #18]
 800abe8:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800abec:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800abee:	4496      	add	lr, r2
 800abf0:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 800abf4:	2400      	movs	r4, #0
 800abf6:	f36e 040f 	bfi	r4, lr, #0, #16
 800abfa:	f36e 441f 	bfi	r4, lr, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800abfe:	b153      	cbz	r3, 800ac16 <RVBS_Clear+0x32>
 800ac00:	6942      	ldr	r2, [r0, #20]
    {
      pHandle->aBuffer[index] = aux;
 800ac02:	2300      	movs	r3, #0
 800ac04:	3a02      	subs	r2, #2
 800ac06:	f822 ef02 	strh.w	lr, [r2, #2]!
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800ac10:	b299      	uxth	r1, r3
 800ac12:	458c      	cmp	ip, r1
 800ac14:	d8f7      	bhi.n	800ac06 <RVBS_Clear+0x22>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800ac16:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800ac18:	6044      	str	r4, [r0, #4]
    pHandle->index = 0U;
 800ac1a:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	bf00      	nop

0800ac20 <RVBS_Init>:
{
 800ac20:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800ac22:	f7ff ffdf 	bl	800abe4 <RVBS_Clear>
}
 800ac26:	bd08      	pop	{r3, pc}

0800ac28 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800ac28:	8982      	ldrh	r2, [r0, #12]
 800ac2a:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800ac2c:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800ac2e:	428a      	cmp	r2, r1
 800ac30:	d010      	beq.n	800ac54 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800ac32:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 800ac36:	459c      	cmp	ip, r3
 800ac38:	d80a      	bhi.n	800ac50 <RVBS_CheckFaultState+0x28>
{
 800ac3a:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800ac3c:	7c04      	ldrb	r4, [r0, #16]
 800ac3e:	b994      	cbnz	r4, 800ac66 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800ac40:	4299      	cmp	r1, r3
 800ac42:	d914      	bls.n	800ac6e <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800ac44:	2301      	movs	r3, #1
 800ac46:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800ac48:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800ac4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac4e:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800ac50:	2004      	movs	r0, #4
 800ac52:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d30c      	bcc.n	800ac72 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800ac58:	8a40      	ldrh	r0, [r0, #18]
 800ac5a:	4298      	cmp	r0, r3
 800ac5c:	bf94      	ite	ls
 800ac5e:	2000      	movls	r0, #0
 800ac60:	2001      	movhi	r0, #1
 800ac62:	0080      	lsls	r0, r0, #2
 800ac64:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d2ee      	bcs.n	800ac48 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800ac6e:	2002      	movs	r0, #2
 800ac70:	e7eb      	b.n	800ac4a <RVBS_CheckFaultState+0x22>
 800ac72:	2002      	movs	r0, #2
}
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop

0800ac78 <RVBS_CalcAvVbus>:
{
 800ac78:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800ac7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac7e:	4299      	cmp	r1, r3
{
 800ac80:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800ac82:	d021      	beq.n	800acc8 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800ac84:	6943      	ldr	r3, [r0, #20]
 800ac86:	7e45      	ldrb	r5, [r0, #25]
 800ac88:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800ac8c:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800ac90:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800ac94:	d00d      	beq.n	800acb2 <RVBS_CalcAvVbus+0x3a>
 800ac96:	3a01      	subs	r2, #1
 800ac98:	b2d2      	uxtb	r2, r2
 800ac9a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800ac9e:	3b02      	subs	r3, #2
      wtemp = 0u;
 800aca0:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800aca2:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800aca6:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 800aca8:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800acaa:	d1fa      	bne.n	800aca2 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800acac:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800acb0:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800acb2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800acb6:	4575      	cmp	r5, lr
        pHandle->index++;
 800acb8:	bf34      	ite	cc
 800acba:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800acbc:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800acbe:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800acc0:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800acc2:	bf34      	ite	cc
 800acc4:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800acc6:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800acc8:	4620      	mov	r0, r4
 800acca:	f7ff ffad 	bl	800ac28 <RVBS_CheckFaultState>
 800acce:	8120      	strh	r0, [r4, #8]
}
 800acd0:	bd38      	pop	{r3, r4, r5, pc}
 800acd2:	bf00      	nop

0800acd4 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800acd4:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800acd6:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800acd8:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800acdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800ace0:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800ace2:	4770      	bx	lr

0800ace4 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800ace4:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800ace8:	2901      	cmp	r1, #1
{
 800acea:	b410      	push	{r4}
 800acec:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800acee:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 800acf0:	d909      	bls.n	800ad06 <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 800acf2:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 800acf4:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 800acf6:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 800acf8:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800acfa:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 800acfe:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 800ad00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad04:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800ad06:	d005      	beq.n	800ad14 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ad08:	fb92 f0f4 	sdiv	r0, r2, r4
}
 800ad0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 800ad10:	609a      	str	r2, [r3, #8]
}
 800ad12:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ad14:	6840      	ldr	r0, [r0, #4]
 800ad16:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 800ad1a:	2100      	movs	r1, #0
}
 800ad1c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 800ad20:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 800ad22:	609a      	str	r2, [r3, #8]
}
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop

0800ad28 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800ad28:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800ad2a:	fab0 f080 	clz	r0, r0
 800ad2e:	0940      	lsrs	r0, r0, #5
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop

0800ad34 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 800ad34:	2800      	cmp	r0, #0
 800ad36:	bfb8      	it	lt
 800ad38:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 800ad3a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ad3e:	d213      	bcs.n	800ad68 <getScalingFactor+0x34>
 800ad40:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800ad42:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ad46:	e001      	b.n	800ad4c <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 800ad48:	2b20      	cmp	r3, #32
 800ad4a:	d00a      	beq.n	800ad62 <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800ad4c:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 800ad50:	4290      	cmp	r0, r2
 800ad52:	4619      	mov	r1, r3
 800ad54:	f103 0301 	add.w	r3, r3, #1
 800ad58:	d3f6      	bcc.n	800ad48 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800ad5a:	3901      	subs	r1, #1
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	4088      	lsls	r0, r1
 800ad60:	4770      	bx	lr
 800ad62:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ad66:	4770      	bx	lr
    if (TargetAbs >= limit)
 800ad68:	2001      	movs	r0, #1
}
 800ad6a:	4770      	bx	lr

0800ad6c <REMNG_ExecRamp>:
{
 800ad6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad70:	4604      	mov	r4, r0
 800ad72:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ad74:	6880      	ldr	r0, [r0, #8]
 800ad76:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 800ad78:	4615      	mov	r5, r2
 800ad7a:	b962      	cbnz	r2, 800ad96 <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	f7ff ffd9 	bl	800ad34 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ad82:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800ad86:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ad88:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 800ad8a:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ad8e:	60a6      	str	r6, [r4, #8]
}
 800ad90:	2001      	movs	r0, #1
 800ad92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ad96:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800ad9a:	eba1 0708 	sub.w	r7, r1, r8
 800ad9e:	4638      	mov	r0, r7
 800ada0:	f7ff ffc8 	bl	800ad34 <getScalingFactor>
 800ada4:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800ada6:	4640      	mov	r0, r8
 800ada8:	f7ff ffc4 	bl	800ad34 <getScalingFactor>
 800adac:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800adae:	4630      	mov	r0, r6
 800adb0:	f7ff ffc0 	bl	800ad34 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800adb4:	45ca      	cmp	sl, r9
 800adb6:	d318      	bcc.n	800adea <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 800adb8:	4548      	cmp	r0, r9
 800adba:	bf28      	it	cs
 800adbc:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800adbe:	fb08 f300 	mul.w	r3, r8, r0
 800adc2:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800adc4:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 800adc6:	4a0b      	ldr	r2, [pc, #44]	@ (800adf4 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 800adc8:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800adca:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 800adce:	fba2 2303 	umull	r2, r3, r2, r3
 800add2:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800add4:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800add6:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 800adda:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800addc:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 800ade0:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 800ade4:	2001      	movs	r0, #1
 800ade6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 800adea:	4550      	cmp	r0, sl
 800adec:	bf28      	it	cs
 800adee:	4650      	movcs	r0, sl
 800adf0:	e7e5      	b.n	800adbe <REMNG_ExecRamp+0x52>
 800adf2:	bf00      	nop
 800adf4:	10624dd3 	.word	0x10624dd3

0800adf8 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 800adf8:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 800adfa:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800adfc:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 800adfe:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 800ae02:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 800ae06:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 800ae08:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 800ae0c:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800ae0e:	b1f9      	cbz	r1, 800ae50 <RUC_Init+0x58>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800ae10:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800ae12:	b313      	cbz	r3, 800ae5a <RUC_Init+0x62>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800ae14:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800ae16:	b31b      	cbz	r3, 800ae60 <RUC_Init+0x68>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800ae18:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800ae1a:	b323      	cbz	r3, 800ae66 <RUC_Init+0x6e>
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	f04f 0c05 	mov.w	ip, #5
 800ae22:	2204      	movs	r2, #4
 800ae24:	b1b3      	cbz	r3, 800ae54 <RUC_Init+0x5c>
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800ae26:	8803      	ldrh	r3, [r0, #0]
 800ae28:	4910      	ldr	r1, [pc, #64]	@ (800ae6c <RUC_Init+0x74>)
 800ae2a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800ae2e:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800ae32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800ae36:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800ae3a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ae3e:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800ae40:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800ae42:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 800ae44:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800ae48:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800ae4c:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 800ae50:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800ae54:	f10c 32ff 	add.w	r2, ip, #4294967295
 800ae58:	e7e5      	b.n	800ae26 <RUC_Init+0x2e>
      bPhase++;
 800ae5a:	f04f 0c02 	mov.w	ip, #2
 800ae5e:	e7f9      	b.n	800ae54 <RUC_Init+0x5c>
 800ae60:	f04f 0c03 	mov.w	ip, #3
 800ae64:	e7f6      	b.n	800ae54 <RUC_Init+0x5c>
 800ae66:	f04f 0c04 	mov.w	ip, #4
 800ae6a:	e7f3      	b.n	800ae54 <RUC_Init+0x5c>
 800ae6c:	10624dd3 	.word	0x10624dd3

0800ae70 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800ae70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae74:	4604      	mov	r4, r0

    pHandle->hDirection = hMotorDirection;
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 800ae76:	2600      	movs	r6, #0
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800ae78:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    pHandle->bStageCnt = 0U;
 800ae7c:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 800ae80:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800ae84:	6ea7      	ldr	r7, [r4, #104]	@ 0x68
    pHandle->hDirection = hMotorDirection;
 800ae86:	80c1      	strh	r1, [r0, #6]
    pHandle->OTFSCLowside = false;
 800ae88:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 800ae8c:	4640      	mov	r0, r8
{
 800ae8e:	460d      	mov	r5, r1
    VSS_Clear(pVSS);
 800ae90:	f000 fc3e 	bl	800b710 <VSS_Clear>

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800ae94:	2104      	movs	r1, #4
 800ae96:	4638      	mov	r0, r7
 800ae98:	f000 f8e0 	bl	800b05c <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800ae9c:	8863      	ldrh	r3, [r4, #2]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800ae9e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aea2:	b2ad      	uxth	r5, r5
 800aea4:	fb13 f305 	smulbb	r3, r3, r5
 800aea8:	b21b      	sxth	r3, r3
    pHandle->hElAngleAccu = hMecAngle;
 800aeaa:	f8a8 3030 	strh.w	r3, [r8, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 800aeae:	f8a8 3004 	strh.w	r3, [r8, #4]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800aeb2:	4631      	mov	r1, r6
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800aeb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeb8:	4638      	mov	r0, r7
 800aeba:	f8a8 3006 	strh.w	r3, [r8, #6]
 800aebe:	4632      	mov	r2, r6
 800aec0:	f000 f8d0 	bl	800b064 <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800aec4:	8a21      	ldrh	r1, [r4, #16]
 800aec6:	89a2      	ldrh	r2, [r4, #12]
 800aec8:	fb11 f105 	smulbb	r1, r1, r5
 800aecc:	b209      	sxth	r1, r1
 800aece:	4638      	mov	r0, r7
 800aed0:	f000 f8c8 	bl	800b064 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800aed4:	89e1      	ldrh	r1, [r4, #14]
 800aed6:	89a2      	ldrh	r2, [r4, #12]
 800aed8:	fb11 f105 	smulbb	r1, r1, r5
 800aedc:	b209      	sxth	r1, r1
 800aede:	4640      	mov	r0, r8
 800aee0:	f000 fccc 	bl	800b87c <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800aee4:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800aee6:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 800aee8:	4a06      	ldr	r2, [pc, #24]	@ (800af04 <RUC_Clear+0x94>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 800aeea:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800aeee:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800aef2:	fba2 2303 	umull	r2, r3, r2, r3
 800aef6:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800aef8:	6962      	ldr	r2, [r4, #20]
 800aefa:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 800aefc:	3301      	adds	r3, #1
 800aefe:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800af00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af04:	10624dd3 	.word	0x10624dd3

0800af08 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800af08:	8883      	ldrh	r3, [r0, #4]
{
 800af0a:	b510      	push	{r4, lr}
 800af0c:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800af0e:	bb4b      	cbnz	r3, 800af64 <RUC_Exec+0x5c>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800af10:	68a0      	ldr	r0, [r4, #8]
 800af12:	b330      	cbz	r0, 800af62 <RUC_Exec+0x5a>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800af14:	8881      	ldrh	r1, [r0, #4]
 800af16:	88e3      	ldrh	r3, [r4, #6]
 800af18:	8802      	ldrh	r2, [r0, #0]
 800af1a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800af1c:	fb11 f103 	smulbb	r1, r1, r3
 800af20:	b209      	sxth	r1, r1
 800af22:	f000 f89f 	bl	800b064 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800af26:	68a3      	ldr	r3, [r4, #8]
 800af28:	88e0      	ldrh	r0, [r4, #6]
 800af2a:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800af2c:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800af2e:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800af32:	b209      	sxth	r1, r1
 800af34:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800af36:	f000 fca1 	bl	800b87c <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800af3a:	68a2      	ldr	r2, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800af3c:	f8b4 c000 	ldrh.w	ip, [r4]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800af40:	8813      	ldrh	r3, [r2, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800af42:	490c      	ldr	r1, [pc, #48]	@ (800af74 <RUC_Exec+0x6c>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800af44:	6890      	ldr	r0, [r2, #8]

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 800af46:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800af4a:	60a0      	str	r0, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800af4c:	fb0c f303 	mul.w	r3, ip, r3
 800af50:	fba1 1303 	umull	r1, r3, r1, r3
 800af54:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 800af56:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800af58:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800af5a:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800af5c:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 800af60:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800af62:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 800af64:	3b01      	subs	r3, #1
 800af66:	b29b      	uxth	r3, r3
 800af68:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d0d0      	beq.n	800af10 <RUC_Exec+0x8>
  bool retVal = true;
 800af6e:	2001      	movs	r0, #1
}
 800af70:	bd10      	pop	{r4, pc}
 800af72:	bf00      	nop
 800af74:	10624dd3 	.word	0x10624dd3

0800af78 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800af78:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800af7c:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800af80:	4282      	cmp	r2, r0
 800af82:	bf34      	ite	cc
 800af84:	2000      	movcc	r0, #0
 800af86:	2001      	movcs	r0, #1
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop

0800af8c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800af8c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop

0800af94 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800af94:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800af98:	4603      	mov	r3, r0
 800af9a:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800af9c:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800afa0:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800afa4:	bfb8      	it	lt
 800afa6:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800afa8:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800afac:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800afae:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800afb0:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 800afb2:	bfb8      	it	lt
 800afb4:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800afb6:	458c      	cmp	ip, r1
 800afb8:	d818      	bhi.n	800afec <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800afba:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800afbe:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 800afc2:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800afc6:	bfb8      	it	lt
 800afc8:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800afcc:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800afd0:	bfb8      	it	lt
 800afd2:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800afd6:	45e6      	cmp	lr, ip
 800afd8:	d308      	bcc.n	800afec <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800afda:	428c      	cmp	r4, r1
 800afdc:	d306      	bcc.n	800afec <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800afde:	4290      	cmp	r0, r2
 800afe0:	d809      	bhi.n	800aff6 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800afe2:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800afe4:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800afe6:	bf18      	it	ne
 800afe8:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800afea:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800afec:	4290      	cmp	r0, r2
 800afee:	d9f8      	bls.n	800afe2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800aff0:	3201      	adds	r2, #1
 800aff2:	b2d2      	uxtb	r2, r2
 800aff4:	e7f5      	b.n	800afe2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800aff6:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800aff8:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800affa:	2001      	movs	r0, #1
}
 800affc:	bd10      	pop	{r4, pc}
 800affe:	bf00      	nop

0800b000 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800b000:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800b004:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800b008:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800b00c:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800b010:	b200      	sxth	r0, r0
 800b012:	4770      	bx	lr

0800b014 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 800b014:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800b016:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800b01a:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800b01c:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->Mode = pHandle->ModeDefault;
 800b020:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 800b024:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800b026:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800b028:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800b02c:	0409      	lsls	r1, r1, #16
 800b02e:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 800b032:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b034:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 800b038:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800b03a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800b03c:	6183      	str	r3, [r0, #24]
}
 800b03e:	4770      	bx	lr

0800b040 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800b040:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b042:	4770      	bx	lr

0800b044 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b044:	7803      	ldrb	r3, [r0, #0]
 800b046:	2b03      	cmp	r3, #3
 800b048:	d000      	beq.n	800b04c <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b04a:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800b04c:	6900      	ldr	r0, [r0, #16]
 800b04e:	2100      	movs	r1, #0
 800b050:	f7fe bdea 	b.w	8009c28 <PID_SetIntegralTerm>

0800b054 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800b054:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop

0800b05c <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800b05c:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800b05e:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800b060:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b062:	4770      	bx	lr

0800b064 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800b064:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b066:	7803      	ldrb	r3, [r0, #0]
 800b068:	2b04      	cmp	r3, #4
 800b06a:	d019      	beq.n	800b0a0 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800b06c:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 800b070:	458c      	cmp	ip, r1
 800b072:	da03      	bge.n	800b07c <STC_ExecRamp+0x18>
 800b074:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800b076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b07a:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800b07c:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 800b080:	428c      	cmp	r4, r1
 800b082:	dcf7      	bgt.n	800b074 <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800b084:	8c04      	ldrh	r4, [r0, #32]
 800b086:	428c      	cmp	r4, r1
 800b088:	dd03      	ble.n	800b092 <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800b08a:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 800b08e:	428c      	cmp	r4, r1
 800b090:	dbf0      	blt.n	800b074 <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800b092:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800b094:	b9aa      	cbnz	r2, 800b0c2 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800b096:	2b03      	cmp	r3, #3
 800b098:	d10a      	bne.n	800b0b0 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800b09a:	0409      	lsls	r1, r1, #16
 800b09c:	6041      	str	r1, [r0, #4]
 800b09e:	e009      	b.n	800b0b4 <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800b0a0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800b0a2:	428b      	cmp	r3, r1
 800b0a4:	dbe6      	blt.n	800b074 <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800b0a6:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 800b0aa:	428b      	cmp	r3, r1
 800b0ac:	dce2      	bgt.n	800b074 <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 800b0ae:	b9e2      	cbnz	r2, 800b0ea <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800b0b0:	0409      	lsls	r1, r1, #16
 800b0b2:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 800b0b8:	6183      	str	r3, [r0, #24]
{
 800b0ba:	2001      	movs	r0, #1
}
 800b0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0c0:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800b0c2:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800b0c6:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 800b0c8:	4c09      	ldr	r4, [pc, #36]	@ (800b0f0 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 800b0ca:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800b0cc:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 800b0d0:	fba4 4303 	umull	r4, r3, r4, r3
 800b0d4:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800b0d6:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800b0d8:	eba1 0c0c 	sub.w	ip, r1, ip
 800b0dc:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 800b0e0:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800b0e2:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 800b0e6:	6182      	str	r2, [r0, #24]
 800b0e8:	e7e7      	b.n	800b0ba <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 800b0ea:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 800b0ee:	e7ea      	b.n	800b0c6 <STC_ExecRamp+0x62>
 800b0f0:	10624dd3 	.word	0x10624dd3

0800b0f4 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b0f4:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b0f6:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800b0f8:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b0fa:	2a04      	cmp	r2, #4
{
 800b0fc:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b0fe:	d012      	beq.n	800b126 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 800b100:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800b102:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800b104:	d908      	bls.n	800b118 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800b106:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800b108:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800b10a:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800b10c:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800b10e:	2a03      	cmp	r2, #3
 800b110:	d011      	beq.n	800b136 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800b112:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800b114:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800b116:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800b118:	d1f9      	bne.n	800b10e <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b11a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800b11e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b120:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800b122:	60c3      	str	r3, [r0, #12]
 800b124:	e7f3      	b.n	800b10e <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800b126:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 800b128:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800b12a:	d911      	bls.n	800b150 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 800b12c:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 800b12e:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800b130:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800b132:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b134:	e7ed      	b.n	800b112 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800b136:	6960      	ldr	r0, [r4, #20]
 800b138:	f7ff ff28 	bl	800af8c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800b13c:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800b140:	b209      	sxth	r1, r1
 800b142:	6920      	ldr	r0, [r4, #16]
 800b144:	f7fe fda4 	bl	8009c90 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800b148:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800b14a:	0405      	lsls	r5, r0, #16
 800b14c:	60a5      	str	r5, [r4, #8]
}
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800b150:	d1df      	bne.n	800b112 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b152:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800b156:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b158:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800b15a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b15c:	e7d9      	b.n	800b112 <STC_CalcTorqueReference+0x1e>
 800b15e:	bf00      	nop

0800b160 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800b160:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop

0800b168 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 800b168:	f8d0 002e 	ldr.w	r0, [r0, #46]	@ 0x2e
{
 800b16c:	b082      	sub	sp, #8
}
 800b16e:	b002      	add	sp, #8
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop

0800b174 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b174:	b510      	push	{r4, lr}
 800b176:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800b178:	6940      	ldr	r0, [r0, #20]
 800b17a:	f7ff ff07 	bl	800af8c <SPD_GetAvrgMecSpeedUnit>
 800b17e:	0400      	lsls	r0, r0, #16
 800b180:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b182:	bd10      	pop	{r4, pc}

0800b184 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800b188:	4604      	mov	r4, r0
{
 800b18a:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800b18c:	2800      	cmp	r0, #0
 800b18e:	f000 80cf 	beq.w	800b330 <STO_PLL_CalcElAngle+0x1ac>
 800b192:	2900      	cmp	r1, #0
 800b194:	f000 80cf 	beq.w	800b336 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800b198:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800b19c:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 800b19e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800b1a2:	429f      	cmp	r7, r3
 800b1a4:	f340 80d1 	ble.w	800b34a <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800b1a8:	6683      	str	r3, [r0, #104]	@ 0x68
 800b1aa:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800b1ac:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800b1b0:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800b1b2:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800b1b6:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800b1b8:	9201      	str	r2, [sp, #4]
 800b1ba:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800b1be:	f2c0 80c1 	blt.w	800b344 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800b1c2:	425b      	negs	r3, r3
 800b1c4:	429e      	cmp	r6, r3
 800b1c6:	f340 80bd 	ble.w	800b344 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b1ca:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 800b1ce:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 800b1d2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800b1d6:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b1da:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800b1dc:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b1e0:	f340 80b9 	ble.w	800b356 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800b1e4:	6623      	str	r3, [r4, #96]	@ 0x60
 800b1e6:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b1e8:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 800b1ec:	4543      	cmp	r3, r8
 800b1ee:	f2c0 80a6 	blt.w	800b33e <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800b1f2:	425b      	negs	r3, r3
 800b1f4:	4598      	cmp	r8, r3
 800b1f6:	f340 80a2 	ble.w	800b33e <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b1fa:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800b1fc:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b200:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b202:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800b206:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b20a:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800b20e:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b212:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800b216:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b21a:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800b21c:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800b220:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800b224:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b228:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b22a:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b22c:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b22e:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b230:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b232:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800b236:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b23a:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800b23e:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800b242:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b246:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800b248:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 800b24c:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800b24e:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800b252:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800b256:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b25a:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800b25c:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 800b260:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800b264:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b268:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800b26c:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800b26e:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800b272:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800b276:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b27a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 800b27c:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800b280:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800b284:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800b288:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 800b28c:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800b290:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b294:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b298:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800b29c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800b2a0:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800b2a4:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 800b2a8:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 800b2ac:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800b2b0:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d154      	bne.n	800b362 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800b2be:	bfa8      	it	ge
 800b2c0:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800b2c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800b2c8:	f7f7 f890 	bl	80023ec <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800b2cc:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800b2ce:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800b2d2:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800b2d6:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800b2d8:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800b2dc:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800b2e0:	f340 31cf 	sbfx	r1, r0, #15, #16
 800b2e4:	f345 35cf 	sbfx	r5, r5, #15, #16
 800b2e8:	1a69      	subs	r1, r5, r1
 800b2ea:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800b2ee:	f7fe fccf 	bl	8009c90 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800b2f2:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800b2f6:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800b2fa:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800b300:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800b302:	bf12      	itee	ne
 800b304:	461a      	movne	r2, r3
 800b306:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 800b308:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800b30a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800b30e:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 800b312:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800b316:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800b31a:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800b31e:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 800b320:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800b322:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800b324:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 800b328:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800b32a:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800b32e:	80a0      	strh	r0, [r4, #4]
}
 800b330:	b009      	add	sp, #36	@ 0x24
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800b336:	4608      	mov	r0, r1
}
 800b338:	b009      	add	sp, #36	@ 0x24
 800b33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800b33e:	6663      	str	r3, [r4, #100]	@ 0x64
 800b340:	4698      	mov	r8, r3
 800b342:	e75a      	b.n	800b1fa <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800b344:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800b346:	461e      	mov	r6, r3
 800b348:	e73f      	b.n	800b1ca <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800b34a:	425a      	negs	r2, r3
 800b34c:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800b34e:	bfdc      	itt	le
 800b350:	6682      	strle	r2, [r0, #104]	@ 0x68
 800b352:	4617      	movle	r7, r2
 800b354:	e72a      	b.n	800b1ac <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800b356:	425a      	negs	r2, r3
 800b358:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800b35a:	bfdc      	itt	le
 800b35c:	6622      	strle	r2, [r4, #96]	@ 0x60
 800b35e:	4691      	movle	r9, r2
 800b360:	e742      	b.n	800b1e8 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800b362:	fa1f fa83 	uxth.w	sl, r3
 800b366:	e7ad      	b.n	800b2c4 <STO_PLL_CalcElAngle+0x140>

0800b368 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800b368:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800b36a:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b36e:	2d00      	cmp	r5, #0
 800b370:	f000 809b 	beq.w	800b4aa <STO_PLL_CalcAvrgMecSpeedUnit+0x142>
 800b374:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 800b378:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 800b37c:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800b37e:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800b382:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b386:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800b388:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b38a:	d1fa      	bne.n	800b382 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800b38c:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 800b390:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800b394:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800b398:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b39c:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 800b39e:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b3a2:	d1f7      	bne.n	800b394 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800b3a4:	fb9c f2f5 	sdiv	r2, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800b3a8:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800b3ac:	17de      	asrs	r6, r3, #31
 800b3ae:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800b3b2:	8b45      	ldrh	r5, [r0, #26]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800b3b4:	fbac 4303 	umull	r4, r3, ip, r3
 800b3b8:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 800b3bc:	09e4      	lsrs	r4, r4, #7
 800b3be:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800b3c2:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800b3c4:	f890 6104 	ldrb.w	r6, [r0, #260]	@ 0x104
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800b3c8:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800b3cc:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800b3ce:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800b3d2:	bfd8      	it	le
 800b3d4:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800b3d8:	69c5      	ldr	r5, [r0, #28]
 800b3da:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800b3de:	bfc8      	it	gt
 800b3e0:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b3e4:	7845      	ldrb	r5, [r0, #1]
 800b3e6:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800b3ea:	b21d      	sxth	r5, r3
 800b3ec:	800d      	strh	r5, [r1, #0]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800b3ee:	2700      	movs	r7, #0
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800b3f0:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800b3f2:	f880 c0f5 	strb.w	ip, [r0, #245]	@ 0xf5
    if (false == pHandle->IsAlgorithmConverged)
 800b3f6:	f890 50f8 	ldrb.w	r5, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800b3fa:	b996      	cbnz	r6, 800b422 <STO_PLL_CalcAvrgMecSpeedUnit+0xba>
    if (false == pHandle->IsAlgorithmConverged)
 800b3fc:	2d00      	cmp	r5, #0
 800b3fe:	d049      	beq.n	800b494 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800b400:	4294      	cmp	r4, r2
 800b402:	dc44      	bgt.n	800b48e <STO_PLL_CalcAvrgMecSpeedUnit+0x126>
        pHandle->ReliabilityCounter++;
 800b404:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800b408:	78c2      	ldrb	r2, [r0, #3]
        pHandle->ReliabilityCounter++;
 800b40a:	3301      	adds	r3, #1
 800b40c:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800b40e:	4293      	cmp	r3, r2
        pHandle->ReliabilityCounter++;
 800b410:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800b414:	d33e      	bcc.n	800b494 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
          pHandle->ReliabilityCounter = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800b41c:	7002      	strb	r2, [r0, #0]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800b422:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800b424:	f8b0 611a 	ldrh.w	r6, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800b428:	bfb8      	it	lt
 800b42a:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800b42c:	429e      	cmp	r6, r3
 800b42e:	dd35      	ble.n	800b49c <STO_PLL_CalcAvrgMecSpeedUnit+0x134>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800b430:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800b434:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 800b438:	fb06 fc06 	mul.w	ip, r6, r6
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800b43c:	f890 6118 	ldrb.w	r6, [r0, #280]	@ 0x118
        wObsBemfSq += wObsBemf * wObsBemf;
 800b440:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800b444:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800b448:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800b44c:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800b450:	fb03 f606 	mul.w	r6, r3, r6
 800b454:	2e00      	cmp	r6, #0
 800b456:	bfb8      	it	lt
 800b458:	363f      	addlt	r6, #63	@ 0x3f
 800b45a:	11b6      	asrs	r6, r6, #6
        wEstBemfSq *= wEstBemf;
 800b45c:	fb06 f303 	mul.w	r3, r6, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800b460:	2b00      	cmp	r3, #0
 800b462:	461e      	mov	r6, r3
 800b464:	f890 c117 	ldrb.w	ip, [r0, #279]	@ 0x117
 800b468:	bfb8      	it	lt
 800b46a:	f103 063f 	addlt.w	r6, r3, #63	@ 0x3f
 800b46e:	11b6      	asrs	r6, r6, #6
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800b470:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800b474:	fb0c 3316 	mls	r3, ip, r6, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800b478:	429f      	cmp	r7, r3
 800b47a:	bfd4      	ite	le
 800b47c:	2600      	movle	r6, #0
 800b47e:	2601      	movgt	r6, #1
 800b480:	f880 60f9 	strb.w	r6, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800b484:	b135      	cbz	r5, 800b494 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800b486:	4294      	cmp	r4, r2
 800b488:	ddbc      	ble.n	800b404 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800b48a:	429f      	cmp	r7, r3
 800b48c:	ddba      	ble.n	800b404 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
        pHandle->ReliabilityCounter = 0U;
 800b48e:	2300      	movs	r3, #0
 800b490:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800b494:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800b498:	f7ff bd7c 	b.w	800af94 <SPD_IsMecSpeedReliable>
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800b49c:	e9c0 773f 	strd	r7, r7, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800b4a0:	f880 70f9 	strb.w	r7, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800b4a4:	2d00      	cmp	r5, #0
 800b4a6:	d1ad      	bne.n	800b404 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800b4a8:	e7f4      	b.n	800b494 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	462b      	mov	r3, r5
 800b4ae:	462e      	mov	r6, r5
 800b4b0:	46ae      	mov	lr, r5
 800b4b2:	e77c      	b.n	800b3ae <STO_PLL_CalcAvrgMecSpeedUnit+0x46>

0800b4b4 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800b4b4:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800b4b8:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800b4bc:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800b4c0:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 800b4c4:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800b4c6:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800b4ca:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800b4ce:	ebac 0101 	sub.w	r1, ip, r1
 800b4d2:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800b4d4:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 800b4d6:	b959      	cbnz	r1, 800b4f0 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800b4d8:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 800b4dc:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800b4de:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 800b4e2:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800b4e6:	4113      	asrs	r3, r2
}
 800b4e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800b4ec:	81c3      	strh	r3, [r0, #14]
}
 800b4ee:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800b4f0:	440a      	add	r2, r1
 800b4f2:	b291      	uxth	r1, r2
 800b4f4:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800b4f6:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800b4f8:	bfdc      	itt	le
 800b4fa:	eba1 010c 	suble.w	r1, r1, ip
 800b4fe:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800b500:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800b504:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 800b508:	1a9b      	subs	r3, r3, r2
 800b50a:	e7e8      	b.n	800b4de <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

0800b50c <STO_PLL_Clear>:
{
 800b50c:	b510      	push	{r4, lr}
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800b50e:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800b512:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800b514:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 800b518:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800b51c:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 800b520:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800b522:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800b524:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800b526:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 800b52a:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800b52e:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 800b532:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800b536:	b11a      	cbz	r2, 800b540 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800b538:	0052      	lsls	r2, r2, #1
 800b53a:	3074      	adds	r0, #116	@ 0x74
 800b53c:	f001 f977 	bl	800c82e <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800b540:	2100      	movs	r1, #0
 800b542:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800b546:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800b54a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 800b54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800b552:	f7fe bb69 	b.w	8009c28 <PID_SetIntegralTerm>
 800b556:	bf00      	nop

0800b558 <STO_PLL_Init>:
{
 800b558:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800b55a:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800b55e:	4b19      	ldr	r3, [pc, #100]	@ (800b5c4 <STO_PLL_Init+0x6c>)
 800b560:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800b564:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 800b568:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800b56a:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800b56c:	fb93 f3fe 	sdiv	r3, r3, lr
 800b570:	b21b      	sxth	r3, r3
{
 800b572:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800b574:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 800b578:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800b57a:	b30b      	cbz	r3, 800b5c0 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 800b57c:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800b57e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800b582:	f102 0c01 	add.w	ip, r2, #1
 800b586:	105b      	asrs	r3, r3, #1
 800b588:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800b58a:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800b58e:	fa1f f28c 	uxth.w	r2, ip
 800b592:	d1f4      	bne.n	800b57e <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 800b594:	b20a      	sxth	r2, r1
 800b596:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800b598:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800b59c:	480a      	ldr	r0, [pc, #40]	@ (800b5c8 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800b59e:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800b5a0:	17cb      	asrs	r3, r1, #31
 800b5a2:	fb80 0101 	smull	r0, r1, r0, r1
 800b5a6:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800b5aa:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f7ff ffad 	bl	800b50c <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800b5b2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800b5b6:	f7fe fb23 	bl	8009c00 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	8263      	strh	r3, [r4, #18]
}
 800b5be:	bd10      	pop	{r4, pc}
 800b5c0:	4671      	mov	r1, lr
 800b5c2:	e7eb      	b.n	800b59c <STO_PLL_Init+0x44>
 800b5c4:	000fea5e 	.word	0x000fea5e
 800b5c8:	06488dc5 	.word	0x06488dc5

0800b5cc <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 800b5cc:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 800b5d0:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 800b5d2:	b112      	cbz	r2, 800b5da <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b5d4:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800b5d8:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 800b5da:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 800b5de:	b128      	cbz	r0, 800b5ec <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800b5e0:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800b5e2:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800b5e4:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800b5e8:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800b5ea:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800b5ec:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b5f0:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 800b5f4:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800b5f6:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 800b5fa:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800b5fe:	4614      	mov	r4, r2
      if (wtemp > 0)
 800b600:	dd38      	ble.n	800b674 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 800b602:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800b606:	bfbc      	itt	lt
 800b608:	f1cc 0c00 	rsblt	ip, ip, #0
 800b60c:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 800b610:	2a00      	cmp	r2, #0
 800b612:	db34      	blt.n	800b67e <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 800b614:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800b618:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800b61c:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800b620:	b349      	cbz	r1, 800b676 <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800b622:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 800b626:	fa1f f18c 	uxth.w	r1, ip
 800b62a:	428d      	cmp	r5, r1
 800b62c:	d223      	bcs.n	800b676 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800b62e:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800b632:	2a00      	cmp	r2, #0
 800b634:	bfb8      	it	lt
 800b636:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800b638:	f342 120f 	sbfx	r2, r2, #4, #16
 800b63c:	4594      	cmp	ip, r2
 800b63e:	db1a      	blt.n	800b676 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800b640:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800b644:	f1be 0f00 	cmp.w	lr, #0
 800b648:	bfb8      	it	lt
 800b64a:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800b64e:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 800b652:	45f4      	cmp	ip, lr
 800b654:	dc0f      	bgt.n	800b676 <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 800b656:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800b65a:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 800b65e:	3201      	adds	r2, #1
 800b660:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800b662:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800b664:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800b668:	d804      	bhi.n	800b674 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 800b66a:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800b66c:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800b66e:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800b672:	701a      	strb	r2, [r3, #0]
}
 800b674:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 800b676:	2200      	movs	r2, #0
 800b678:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 800b67c:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800b67e:	4252      	negs	r2, r2
 800b680:	b212      	sxth	r2, r2
 800b682:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 800b684:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800b688:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 800b68c:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800b68e:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800b692:	2900      	cmp	r1, #0
 800b694:	d0ef      	beq.n	800b676 <STO_PLL_IsObserverConverged+0xaa>
 800b696:	e7c4      	b.n	800b622 <STO_PLL_IsObserverConverged+0x56>

0800b698 <STO_PLL_GetEstimatedBemf>:
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
}
 800b698:	6f00      	ldr	r0, [r0, #112]	@ 0x70
{
 800b69a:	b082      	sub	sp, #8
}
 800b69c:	b002      	add	sp, #8
 800b69e:	4770      	bx	lr

0800b6a0 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800b6a0:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800b6a2:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b6a4:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800b6a8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b6ac:	410a      	asrs	r2, r1
  return (iaux);
 800b6ae:	410b      	asrs	r3, r1
 800b6b0:	b292      	uxth	r2, r2
 800b6b2:	f362 000f 	bfi	r0, r2, #0, #16
 800b6b6:	b29b      	uxth	r3, r3
{
 800b6b8:	b082      	sub	sp, #8
  return (iaux);
 800b6ba:	f363 401f 	bfi	r0, r3, #16, #16
}
 800b6be:	b002      	add	sp, #8
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop

0800b6c4 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800b6c4:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800b6c8:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800b6ca:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800b6ce:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop

0800b6d4 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800b6d4:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 800b6d6:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop

0800b6dc <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800b6dc:	6800      	ldr	r0, [r0, #0]
 800b6de:	2100      	movs	r1, #0
 800b6e0:	3034      	adds	r0, #52	@ 0x34
 800b6e2:	f7fe baa1 	b.w	8009c28 <PID_SetIntegralTerm>
 800b6e6:	bf00      	nop

0800b6e8 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800b6e8:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800b6ea:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 800b6ee:	4770      	bx	lr

0800b6f0 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800b6f0:	6803      	ldr	r3, [r0, #0]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop

0800b6fc <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800b6fc:	6803      	ldr	r3, [r0, #0]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop

0800b708 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800b708:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop

0800b710 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b710:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b712:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b714:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800b716:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800b71a:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800b71c:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800b71e:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800b720:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800b722:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b724:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800b726:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop

0800b72c <VSS_Init>:
{
 800b72c:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800b72e:	f7ff ffef 	bl	800b710 <VSS_Clear>
}
 800b732:	bd08      	pop	{r3, pc}

0800b734 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800b734:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 800b738:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800b73a:	b11a      	cbz	r2, 800b744 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800b73c:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800b740:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800b742:	4770      	bx	lr
{
 800b744:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b746:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800b74a:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b74c:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800b74e:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b752:	785a      	ldrb	r2, [r3, #1]
 800b754:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b758:	4460      	add	r0, ip
 800b75a:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b75e:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b760:	b200      	sxth	r0, r0
 800b762:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b764:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800b766:	b1fc      	cbz	r4, 800b7a8 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800b768:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800b76c:	b1f2      	cbz	r2, 800b7ac <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800b76e:	3a01      	subs	r2, #1
 800b770:	b212      	sxth	r2, r2
 800b772:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800b774:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800b778:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800b77a:	db26      	blt.n	800b7ca <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800b77c:	eba1 0e0e 	sub.w	lr, r1, lr
 800b780:	fa0f fe8e 	sxth.w	lr, lr
 800b784:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800b786:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800b78a:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800b78e:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800b792:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800b796:	fb12 f205 	smulbb	r2, r2, r5
 800b79a:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800b79c:	db0e      	blt.n	800b7bc <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800b79e:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800b7a0:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800b7a2:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800b7a6:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800b7a8:	8098      	strh	r0, [r3, #4]
}
 800b7aa:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800b7ac:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800b7b0:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800b7b2:	2401      	movs	r4, #1
 800b7b4:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800b7b8:	8098      	strh	r0, [r3, #4]
}
 800b7ba:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800b7bc:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800b7c0:	2c00      	cmp	r4, #0
 800b7c2:	d0f1      	beq.n	800b7a8 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800b7c4:	440a      	add	r2, r1
 800b7c6:	b210      	sxth	r0, r2
 800b7c8:	e7ee      	b.n	800b7a8 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800b7ca:	ebae 0e01 	sub.w	lr, lr, r1
 800b7ce:	fa0f fe8e 	sxth.w	lr, lr
 800b7d2:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800b7d6:	e7d6      	b.n	800b786 <VSS_CalcElAngle+0x52>

0800b7d8 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800b7d8:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 800b7da:	2a01      	cmp	r2, #1
{
 800b7dc:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800b7de:	d922      	bls.n	800b826 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800b7e0:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b7e2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800b7e4:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b7e6:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b7e8:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800b7ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b7ee:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b7f0:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b7f2:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b7f6:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800b7f8:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b7fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b800:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b804:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b806:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800b80a:	b212      	sxth	r2, r2
 800b80c:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800b80e:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800b810:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800b812:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800b814:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 800b818:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800b81a:	b970      	cbnz	r0, 800b83a <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800b81c:	78da      	ldrb	r2, [r3, #3]
 800b81e:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800b820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b824:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800b826:	d00d      	beq.n	800b844 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b828:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800b82c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b830:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800b832:	bb00      	cbnz	r0, 800b876 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800b834:	78da      	ldrb	r2, [r3, #3]
 800b836:	701a      	strb	r2, [r3, #0]
}
 800b838:	4770      	bx	lr
 800b83a:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff bba8 	b.w	800af94 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800b844:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800b848:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b84c:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b84e:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800b850:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b854:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b858:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b85a:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b85e:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b862:	785a      	ldrb	r2, [r3, #1]
 800b864:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 800b868:	2000      	movs	r0, #0
 800b86a:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800b86c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b870:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800b872:	2800      	cmp	r0, #0
 800b874:	d0de      	beq.n	800b834 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800b876:	4618      	mov	r0, r3
 800b878:	f7ff bb8c 	b.w	800af94 <SPD_IsMecSpeedReliable>

0800b87c <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800b87c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b880:	b9a3      	cbnz	r3, 800b8ac <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b882:	8b43      	ldrh	r3, [r0, #26]
{
 800b884:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b886:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b888:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b88c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b890:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b894:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800b896:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800b89a:	b942      	cbnz	r2, 800b8ae <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b89c:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800b8a0:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b8a2:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800b8a6:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b8a8:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b8aa:	bd10      	pop	{r4, pc}
 800b8ac:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800b8ae:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800b8b0:	fb02 f303 	mul.w	r3, r2, r3
 800b8b4:	4a0e      	ldr	r2, [pc, #56]	@ (800b8f0 <VSS_SetMecAcceleration+0x74>)
 800b8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ba:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800b8be:	3301      	adds	r3, #1
 800b8c0:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b8c2:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800b8c6:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800b8c8:	b91b      	cbnz	r3, 800b8d2 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b8ca:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b8cc:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b8ce:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800b8d0:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b8d2:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b8d6:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800b8da:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b8de:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b8e0:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800b8e4:	fb0e f303 	mul.w	r3, lr, r3
 800b8e8:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b8ea:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b8ec:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800b8ee:	e7ef      	b.n	800b8d0 <VSS_SetMecAcceleration+0x54>
 800b8f0:	10624dd3 	.word	0x10624dd3

0800b8f4 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800b8f4:	b151      	cbz	r1, 800b90c <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800b8f6:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800b900:	b923      	cbnz	r3, 800b90c <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800b902:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800b906:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800b908:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800b90a:	4770      	bx	lr
  bool bAux = true;
 800b90c:	2001      	movs	r0, #1
 800b90e:	4770      	bx	lr

0800b910 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800b910:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop

0800b918 <__cvt>:
 800b918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b91c:	ec57 6b10 	vmov	r6, r7, d0
 800b920:	2f00      	cmp	r7, #0
 800b922:	460c      	mov	r4, r1
 800b924:	4619      	mov	r1, r3
 800b926:	463b      	mov	r3, r7
 800b928:	bfbb      	ittet	lt
 800b92a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b92e:	461f      	movlt	r7, r3
 800b930:	2300      	movge	r3, #0
 800b932:	232d      	movlt	r3, #45	@ 0x2d
 800b934:	700b      	strb	r3, [r1, #0]
 800b936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b938:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b93c:	4691      	mov	r9, r2
 800b93e:	f023 0820 	bic.w	r8, r3, #32
 800b942:	bfbc      	itt	lt
 800b944:	4632      	movlt	r2, r6
 800b946:	4616      	movlt	r6, r2
 800b948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b94c:	d005      	beq.n	800b95a <__cvt+0x42>
 800b94e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b952:	d100      	bne.n	800b956 <__cvt+0x3e>
 800b954:	3401      	adds	r4, #1
 800b956:	2102      	movs	r1, #2
 800b958:	e000      	b.n	800b95c <__cvt+0x44>
 800b95a:	2103      	movs	r1, #3
 800b95c:	ab03      	add	r3, sp, #12
 800b95e:	9301      	str	r3, [sp, #4]
 800b960:	ab02      	add	r3, sp, #8
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	ec47 6b10 	vmov	d0, r6, r7
 800b968:	4653      	mov	r3, sl
 800b96a:	4622      	mov	r2, r4
 800b96c:	f001 f87c 	bl	800ca68 <_dtoa_r>
 800b970:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b974:	4605      	mov	r5, r0
 800b976:	d119      	bne.n	800b9ac <__cvt+0x94>
 800b978:	f019 0f01 	tst.w	r9, #1
 800b97c:	d00e      	beq.n	800b99c <__cvt+0x84>
 800b97e:	eb00 0904 	add.w	r9, r0, r4
 800b982:	2200      	movs	r2, #0
 800b984:	2300      	movs	r3, #0
 800b986:	4630      	mov	r0, r6
 800b988:	4639      	mov	r1, r7
 800b98a:	f7f5 f8c5 	bl	8000b18 <__aeabi_dcmpeq>
 800b98e:	b108      	cbz	r0, 800b994 <__cvt+0x7c>
 800b990:	f8cd 900c 	str.w	r9, [sp, #12]
 800b994:	2230      	movs	r2, #48	@ 0x30
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	454b      	cmp	r3, r9
 800b99a:	d31e      	bcc.n	800b9da <__cvt+0xc2>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9a0:	1b5b      	subs	r3, r3, r5
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	b004      	add	sp, #16
 800b9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9b0:	eb00 0904 	add.w	r9, r0, r4
 800b9b4:	d1e5      	bne.n	800b982 <__cvt+0x6a>
 800b9b6:	7803      	ldrb	r3, [r0, #0]
 800b9b8:	2b30      	cmp	r3, #48	@ 0x30
 800b9ba:	d10a      	bne.n	800b9d2 <__cvt+0xba>
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2300      	movs	r3, #0
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f5 f8a8 	bl	8000b18 <__aeabi_dcmpeq>
 800b9c8:	b918      	cbnz	r0, 800b9d2 <__cvt+0xba>
 800b9ca:	f1c4 0401 	rsb	r4, r4, #1
 800b9ce:	f8ca 4000 	str.w	r4, [sl]
 800b9d2:	f8da 3000 	ldr.w	r3, [sl]
 800b9d6:	4499      	add	r9, r3
 800b9d8:	e7d3      	b.n	800b982 <__cvt+0x6a>
 800b9da:	1c59      	adds	r1, r3, #1
 800b9dc:	9103      	str	r1, [sp, #12]
 800b9de:	701a      	strb	r2, [r3, #0]
 800b9e0:	e7d9      	b.n	800b996 <__cvt+0x7e>

0800b9e2 <__exponent>:
 800b9e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	bfba      	itte	lt
 800b9e8:	4249      	neglt	r1, r1
 800b9ea:	232d      	movlt	r3, #45	@ 0x2d
 800b9ec:	232b      	movge	r3, #43	@ 0x2b
 800b9ee:	2909      	cmp	r1, #9
 800b9f0:	7002      	strb	r2, [r0, #0]
 800b9f2:	7043      	strb	r3, [r0, #1]
 800b9f4:	dd29      	ble.n	800ba4a <__exponent+0x68>
 800b9f6:	f10d 0307 	add.w	r3, sp, #7
 800b9fa:	461d      	mov	r5, r3
 800b9fc:	270a      	movs	r7, #10
 800b9fe:	461a      	mov	r2, r3
 800ba00:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba04:	fb07 1416 	mls	r4, r7, r6, r1
 800ba08:	3430      	adds	r4, #48	@ 0x30
 800ba0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba0e:	460c      	mov	r4, r1
 800ba10:	2c63      	cmp	r4, #99	@ 0x63
 800ba12:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba16:	4631      	mov	r1, r6
 800ba18:	dcf1      	bgt.n	800b9fe <__exponent+0x1c>
 800ba1a:	3130      	adds	r1, #48	@ 0x30
 800ba1c:	1e94      	subs	r4, r2, #2
 800ba1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba22:	1c41      	adds	r1, r0, #1
 800ba24:	4623      	mov	r3, r4
 800ba26:	42ab      	cmp	r3, r5
 800ba28:	d30a      	bcc.n	800ba40 <__exponent+0x5e>
 800ba2a:	f10d 0309 	add.w	r3, sp, #9
 800ba2e:	1a9b      	subs	r3, r3, r2
 800ba30:	42ac      	cmp	r4, r5
 800ba32:	bf88      	it	hi
 800ba34:	2300      	movhi	r3, #0
 800ba36:	3302      	adds	r3, #2
 800ba38:	4403      	add	r3, r0
 800ba3a:	1a18      	subs	r0, r3, r0
 800ba3c:	b003      	add	sp, #12
 800ba3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba40:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba44:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba48:	e7ed      	b.n	800ba26 <__exponent+0x44>
 800ba4a:	2330      	movs	r3, #48	@ 0x30
 800ba4c:	3130      	adds	r1, #48	@ 0x30
 800ba4e:	7083      	strb	r3, [r0, #2]
 800ba50:	70c1      	strb	r1, [r0, #3]
 800ba52:	1d03      	adds	r3, r0, #4
 800ba54:	e7f1      	b.n	800ba3a <__exponent+0x58>
	...

0800ba58 <_printf_float>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	b08d      	sub	sp, #52	@ 0x34
 800ba5e:	460c      	mov	r4, r1
 800ba60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ba64:	4616      	mov	r6, r2
 800ba66:	461f      	mov	r7, r3
 800ba68:	4605      	mov	r5, r0
 800ba6a:	f000 fee9 	bl	800c840 <_localeconv_r>
 800ba6e:	6803      	ldr	r3, [r0, #0]
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f4 fc24 	bl	80002c0 <strlen>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba80:	9005      	str	r0, [sp, #20]
 800ba82:	3307      	adds	r3, #7
 800ba84:	f023 0307 	bic.w	r3, r3, #7
 800ba88:	f103 0208 	add.w	r2, r3, #8
 800ba8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba90:	f8d4 b000 	ldr.w	fp, [r4]
 800ba94:	f8c8 2000 	str.w	r2, [r8]
 800ba98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800baa0:	9307      	str	r3, [sp, #28]
 800baa2:	f8cd 8018 	str.w	r8, [sp, #24]
 800baa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800baaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baae:	4b9c      	ldr	r3, [pc, #624]	@ (800bd20 <_printf_float+0x2c8>)
 800bab0:	f04f 32ff 	mov.w	r2, #4294967295
 800bab4:	f7f5 f862 	bl	8000b7c <__aeabi_dcmpun>
 800bab8:	bb70      	cbnz	r0, 800bb18 <_printf_float+0xc0>
 800baba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800babe:	4b98      	ldr	r3, [pc, #608]	@ (800bd20 <_printf_float+0x2c8>)
 800bac0:	f04f 32ff 	mov.w	r2, #4294967295
 800bac4:	f7f5 f83c 	bl	8000b40 <__aeabi_dcmple>
 800bac8:	bb30      	cbnz	r0, 800bb18 <_printf_float+0xc0>
 800baca:	2200      	movs	r2, #0
 800bacc:	2300      	movs	r3, #0
 800bace:	4640      	mov	r0, r8
 800bad0:	4649      	mov	r1, r9
 800bad2:	f7f5 f82b 	bl	8000b2c <__aeabi_dcmplt>
 800bad6:	b110      	cbz	r0, 800bade <_printf_float+0x86>
 800bad8:	232d      	movs	r3, #45	@ 0x2d
 800bada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bade:	4a91      	ldr	r2, [pc, #580]	@ (800bd24 <_printf_float+0x2cc>)
 800bae0:	4b91      	ldr	r3, [pc, #580]	@ (800bd28 <_printf_float+0x2d0>)
 800bae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bae6:	bf8c      	ite	hi
 800bae8:	4690      	movhi	r8, r2
 800baea:	4698      	movls	r8, r3
 800baec:	2303      	movs	r3, #3
 800baee:	6123      	str	r3, [r4, #16]
 800baf0:	f02b 0304 	bic.w	r3, fp, #4
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	f04f 0900 	mov.w	r9, #0
 800bafa:	9700      	str	r7, [sp, #0]
 800bafc:	4633      	mov	r3, r6
 800bafe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb00:	4621      	mov	r1, r4
 800bb02:	4628      	mov	r0, r5
 800bb04:	f000 f9d2 	bl	800beac <_printf_common>
 800bb08:	3001      	adds	r0, #1
 800bb0a:	f040 808d 	bne.w	800bc28 <_printf_float+0x1d0>
 800bb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb12:	b00d      	add	sp, #52	@ 0x34
 800bb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb18:	4642      	mov	r2, r8
 800bb1a:	464b      	mov	r3, r9
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f5 f82c 	bl	8000b7c <__aeabi_dcmpun>
 800bb24:	b140      	cbz	r0, 800bb38 <_printf_float+0xe0>
 800bb26:	464b      	mov	r3, r9
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bfbc      	itt	lt
 800bb2c:	232d      	movlt	r3, #45	@ 0x2d
 800bb2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb32:	4a7e      	ldr	r2, [pc, #504]	@ (800bd2c <_printf_float+0x2d4>)
 800bb34:	4b7e      	ldr	r3, [pc, #504]	@ (800bd30 <_printf_float+0x2d8>)
 800bb36:	e7d4      	b.n	800bae2 <_printf_float+0x8a>
 800bb38:	6863      	ldr	r3, [r4, #4]
 800bb3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bb3e:	9206      	str	r2, [sp, #24]
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	d13b      	bne.n	800bbbc <_printf_float+0x164>
 800bb44:	2306      	movs	r3, #6
 800bb46:	6063      	str	r3, [r4, #4]
 800bb48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	6022      	str	r2, [r4, #0]
 800bb50:	9303      	str	r3, [sp, #12]
 800bb52:	ab0a      	add	r3, sp, #40	@ 0x28
 800bb54:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bb58:	ab09      	add	r3, sp, #36	@ 0x24
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	6861      	ldr	r1, [r4, #4]
 800bb5e:	ec49 8b10 	vmov	d0, r8, r9
 800bb62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bb66:	4628      	mov	r0, r5
 800bb68:	f7ff fed6 	bl	800b918 <__cvt>
 800bb6c:	9b06      	ldr	r3, [sp, #24]
 800bb6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb70:	2b47      	cmp	r3, #71	@ 0x47
 800bb72:	4680      	mov	r8, r0
 800bb74:	d129      	bne.n	800bbca <_printf_float+0x172>
 800bb76:	1cc8      	adds	r0, r1, #3
 800bb78:	db02      	blt.n	800bb80 <_printf_float+0x128>
 800bb7a:	6863      	ldr	r3, [r4, #4]
 800bb7c:	4299      	cmp	r1, r3
 800bb7e:	dd41      	ble.n	800bc04 <_printf_float+0x1ac>
 800bb80:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb84:	fa5f fa8a 	uxtb.w	sl, sl
 800bb88:	3901      	subs	r1, #1
 800bb8a:	4652      	mov	r2, sl
 800bb8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb90:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb92:	f7ff ff26 	bl	800b9e2 <__exponent>
 800bb96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb98:	1813      	adds	r3, r2, r0
 800bb9a:	2a01      	cmp	r2, #1
 800bb9c:	4681      	mov	r9, r0
 800bb9e:	6123      	str	r3, [r4, #16]
 800bba0:	dc02      	bgt.n	800bba8 <_printf_float+0x150>
 800bba2:	6822      	ldr	r2, [r4, #0]
 800bba4:	07d2      	lsls	r2, r2, #31
 800bba6:	d501      	bpl.n	800bbac <_printf_float+0x154>
 800bba8:	3301      	adds	r3, #1
 800bbaa:	6123      	str	r3, [r4, #16]
 800bbac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0a2      	beq.n	800bafa <_printf_float+0xa2>
 800bbb4:	232d      	movs	r3, #45	@ 0x2d
 800bbb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbba:	e79e      	b.n	800bafa <_printf_float+0xa2>
 800bbbc:	9a06      	ldr	r2, [sp, #24]
 800bbbe:	2a47      	cmp	r2, #71	@ 0x47
 800bbc0:	d1c2      	bne.n	800bb48 <_printf_float+0xf0>
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1c0      	bne.n	800bb48 <_printf_float+0xf0>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e7bd      	b.n	800bb46 <_printf_float+0xee>
 800bbca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbce:	d9db      	bls.n	800bb88 <_printf_float+0x130>
 800bbd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bbd4:	d118      	bne.n	800bc08 <_printf_float+0x1b0>
 800bbd6:	2900      	cmp	r1, #0
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	dd0b      	ble.n	800bbf4 <_printf_float+0x19c>
 800bbdc:	6121      	str	r1, [r4, #16]
 800bbde:	b913      	cbnz	r3, 800bbe6 <_printf_float+0x18e>
 800bbe0:	6822      	ldr	r2, [r4, #0]
 800bbe2:	07d0      	lsls	r0, r2, #31
 800bbe4:	d502      	bpl.n	800bbec <_printf_float+0x194>
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	440b      	add	r3, r1
 800bbea:	6123      	str	r3, [r4, #16]
 800bbec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bbee:	f04f 0900 	mov.w	r9, #0
 800bbf2:	e7db      	b.n	800bbac <_printf_float+0x154>
 800bbf4:	b913      	cbnz	r3, 800bbfc <_printf_float+0x1a4>
 800bbf6:	6822      	ldr	r2, [r4, #0]
 800bbf8:	07d2      	lsls	r2, r2, #31
 800bbfa:	d501      	bpl.n	800bc00 <_printf_float+0x1a8>
 800bbfc:	3302      	adds	r3, #2
 800bbfe:	e7f4      	b.n	800bbea <_printf_float+0x192>
 800bc00:	2301      	movs	r3, #1
 800bc02:	e7f2      	b.n	800bbea <_printf_float+0x192>
 800bc04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	db05      	blt.n	800bc1a <_printf_float+0x1c2>
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	6121      	str	r1, [r4, #16]
 800bc12:	07d8      	lsls	r0, r3, #31
 800bc14:	d5ea      	bpl.n	800bbec <_printf_float+0x194>
 800bc16:	1c4b      	adds	r3, r1, #1
 800bc18:	e7e7      	b.n	800bbea <_printf_float+0x192>
 800bc1a:	2900      	cmp	r1, #0
 800bc1c:	bfd4      	ite	le
 800bc1e:	f1c1 0202 	rsble	r2, r1, #2
 800bc22:	2201      	movgt	r2, #1
 800bc24:	4413      	add	r3, r2
 800bc26:	e7e0      	b.n	800bbea <_printf_float+0x192>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	055a      	lsls	r2, r3, #21
 800bc2c:	d407      	bmi.n	800bc3e <_printf_float+0x1e6>
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	4642      	mov	r2, r8
 800bc32:	4631      	mov	r1, r6
 800bc34:	4628      	mov	r0, r5
 800bc36:	47b8      	blx	r7
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d12b      	bne.n	800bc94 <_printf_float+0x23c>
 800bc3c:	e767      	b.n	800bb0e <_printf_float+0xb6>
 800bc3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc42:	f240 80dd 	bls.w	800be00 <_printf_float+0x3a8>
 800bc46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f7f4 ff63 	bl	8000b18 <__aeabi_dcmpeq>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d033      	beq.n	800bcbe <_printf_float+0x266>
 800bc56:	4a37      	ldr	r2, [pc, #220]	@ (800bd34 <_printf_float+0x2dc>)
 800bc58:	2301      	movs	r3, #1
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	47b8      	blx	r7
 800bc60:	3001      	adds	r0, #1
 800bc62:	f43f af54 	beq.w	800bb0e <_printf_float+0xb6>
 800bc66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc6a:	4543      	cmp	r3, r8
 800bc6c:	db02      	blt.n	800bc74 <_printf_float+0x21c>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	07d8      	lsls	r0, r3, #31
 800bc72:	d50f      	bpl.n	800bc94 <_printf_float+0x23c>
 800bc74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	47b8      	blx	r7
 800bc7e:	3001      	adds	r0, #1
 800bc80:	f43f af45 	beq.w	800bb0e <_printf_float+0xb6>
 800bc84:	f04f 0900 	mov.w	r9, #0
 800bc88:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc8c:	f104 0a1a 	add.w	sl, r4, #26
 800bc90:	45c8      	cmp	r8, r9
 800bc92:	dc09      	bgt.n	800bca8 <_printf_float+0x250>
 800bc94:	6823      	ldr	r3, [r4, #0]
 800bc96:	079b      	lsls	r3, r3, #30
 800bc98:	f100 8103 	bmi.w	800bea2 <_printf_float+0x44a>
 800bc9c:	68e0      	ldr	r0, [r4, #12]
 800bc9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bca0:	4298      	cmp	r0, r3
 800bca2:	bfb8      	it	lt
 800bca4:	4618      	movlt	r0, r3
 800bca6:	e734      	b.n	800bb12 <_printf_float+0xba>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	4652      	mov	r2, sl
 800bcac:	4631      	mov	r1, r6
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b8      	blx	r7
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f43f af2b 	beq.w	800bb0e <_printf_float+0xb6>
 800bcb8:	f109 0901 	add.w	r9, r9, #1
 800bcbc:	e7e8      	b.n	800bc90 <_printf_float+0x238>
 800bcbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	dc39      	bgt.n	800bd38 <_printf_float+0x2e0>
 800bcc4:	4a1b      	ldr	r2, [pc, #108]	@ (800bd34 <_printf_float+0x2dc>)
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b8      	blx	r7
 800bcce:	3001      	adds	r0, #1
 800bcd0:	f43f af1d 	beq.w	800bb0e <_printf_float+0xb6>
 800bcd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bcd8:	ea59 0303 	orrs.w	r3, r9, r3
 800bcdc:	d102      	bne.n	800bce4 <_printf_float+0x28c>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	07d9      	lsls	r1, r3, #31
 800bce2:	d5d7      	bpl.n	800bc94 <_printf_float+0x23c>
 800bce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bce8:	4631      	mov	r1, r6
 800bcea:	4628      	mov	r0, r5
 800bcec:	47b8      	blx	r7
 800bcee:	3001      	adds	r0, #1
 800bcf0:	f43f af0d 	beq.w	800bb0e <_printf_float+0xb6>
 800bcf4:	f04f 0a00 	mov.w	sl, #0
 800bcf8:	f104 0b1a 	add.w	fp, r4, #26
 800bcfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcfe:	425b      	negs	r3, r3
 800bd00:	4553      	cmp	r3, sl
 800bd02:	dc01      	bgt.n	800bd08 <_printf_float+0x2b0>
 800bd04:	464b      	mov	r3, r9
 800bd06:	e793      	b.n	800bc30 <_printf_float+0x1d8>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	465a      	mov	r2, fp
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4628      	mov	r0, r5
 800bd10:	47b8      	blx	r7
 800bd12:	3001      	adds	r0, #1
 800bd14:	f43f aefb 	beq.w	800bb0e <_printf_float+0xb6>
 800bd18:	f10a 0a01 	add.w	sl, sl, #1
 800bd1c:	e7ee      	b.n	800bcfc <_printf_float+0x2a4>
 800bd1e:	bf00      	nop
 800bd20:	7fefffff 	.word	0x7fefffff
 800bd24:	0801043c 	.word	0x0801043c
 800bd28:	08010438 	.word	0x08010438
 800bd2c:	08010444 	.word	0x08010444
 800bd30:	08010440 	.word	0x08010440
 800bd34:	08010448 	.word	0x08010448
 800bd38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd3e:	4553      	cmp	r3, sl
 800bd40:	bfa8      	it	ge
 800bd42:	4653      	movge	r3, sl
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	4699      	mov	r9, r3
 800bd48:	dc36      	bgt.n	800bdb8 <_printf_float+0x360>
 800bd4a:	f04f 0b00 	mov.w	fp, #0
 800bd4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd52:	f104 021a 	add.w	r2, r4, #26
 800bd56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd58:	9306      	str	r3, [sp, #24]
 800bd5a:	eba3 0309 	sub.w	r3, r3, r9
 800bd5e:	455b      	cmp	r3, fp
 800bd60:	dc31      	bgt.n	800bdc6 <_printf_float+0x36e>
 800bd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd64:	459a      	cmp	sl, r3
 800bd66:	dc3a      	bgt.n	800bdde <_printf_float+0x386>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	07da      	lsls	r2, r3, #31
 800bd6c:	d437      	bmi.n	800bdde <_printf_float+0x386>
 800bd6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd70:	ebaa 0903 	sub.w	r9, sl, r3
 800bd74:	9b06      	ldr	r3, [sp, #24]
 800bd76:	ebaa 0303 	sub.w	r3, sl, r3
 800bd7a:	4599      	cmp	r9, r3
 800bd7c:	bfa8      	it	ge
 800bd7e:	4699      	movge	r9, r3
 800bd80:	f1b9 0f00 	cmp.w	r9, #0
 800bd84:	dc33      	bgt.n	800bdee <_printf_float+0x396>
 800bd86:	f04f 0800 	mov.w	r8, #0
 800bd8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd8e:	f104 0b1a 	add.w	fp, r4, #26
 800bd92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd94:	ebaa 0303 	sub.w	r3, sl, r3
 800bd98:	eba3 0309 	sub.w	r3, r3, r9
 800bd9c:	4543      	cmp	r3, r8
 800bd9e:	f77f af79 	ble.w	800bc94 <_printf_float+0x23c>
 800bda2:	2301      	movs	r3, #1
 800bda4:	465a      	mov	r2, fp
 800bda6:	4631      	mov	r1, r6
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b8      	blx	r7
 800bdac:	3001      	adds	r0, #1
 800bdae:	f43f aeae 	beq.w	800bb0e <_printf_float+0xb6>
 800bdb2:	f108 0801 	add.w	r8, r8, #1
 800bdb6:	e7ec      	b.n	800bd92 <_printf_float+0x33a>
 800bdb8:	4642      	mov	r2, r8
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b8      	blx	r7
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d1c2      	bne.n	800bd4a <_printf_float+0x2f2>
 800bdc4:	e6a3      	b.n	800bb0e <_printf_float+0xb6>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	4631      	mov	r1, r6
 800bdca:	4628      	mov	r0, r5
 800bdcc:	9206      	str	r2, [sp, #24]
 800bdce:	47b8      	blx	r7
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	f43f ae9c 	beq.w	800bb0e <_printf_float+0xb6>
 800bdd6:	9a06      	ldr	r2, [sp, #24]
 800bdd8:	f10b 0b01 	add.w	fp, fp, #1
 800bddc:	e7bb      	b.n	800bd56 <_printf_float+0x2fe>
 800bdde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	d1c0      	bne.n	800bd6e <_printf_float+0x316>
 800bdec:	e68f      	b.n	800bb0e <_printf_float+0xb6>
 800bdee:	9a06      	ldr	r2, [sp, #24]
 800bdf0:	464b      	mov	r3, r9
 800bdf2:	4442      	add	r2, r8
 800bdf4:	4631      	mov	r1, r6
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	47b8      	blx	r7
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	d1c3      	bne.n	800bd86 <_printf_float+0x32e>
 800bdfe:	e686      	b.n	800bb0e <_printf_float+0xb6>
 800be00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be04:	f1ba 0f01 	cmp.w	sl, #1
 800be08:	dc01      	bgt.n	800be0e <_printf_float+0x3b6>
 800be0a:	07db      	lsls	r3, r3, #31
 800be0c:	d536      	bpl.n	800be7c <_printf_float+0x424>
 800be0e:	2301      	movs	r3, #1
 800be10:	4642      	mov	r2, r8
 800be12:	4631      	mov	r1, r6
 800be14:	4628      	mov	r0, r5
 800be16:	47b8      	blx	r7
 800be18:	3001      	adds	r0, #1
 800be1a:	f43f ae78 	beq.w	800bb0e <_printf_float+0xb6>
 800be1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be22:	4631      	mov	r1, r6
 800be24:	4628      	mov	r0, r5
 800be26:	47b8      	blx	r7
 800be28:	3001      	adds	r0, #1
 800be2a:	f43f ae70 	beq.w	800bb0e <_printf_float+0xb6>
 800be2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be32:	2200      	movs	r2, #0
 800be34:	2300      	movs	r3, #0
 800be36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be3a:	f7f4 fe6d 	bl	8000b18 <__aeabi_dcmpeq>
 800be3e:	b9c0      	cbnz	r0, 800be72 <_printf_float+0x41a>
 800be40:	4653      	mov	r3, sl
 800be42:	f108 0201 	add.w	r2, r8, #1
 800be46:	4631      	mov	r1, r6
 800be48:	4628      	mov	r0, r5
 800be4a:	47b8      	blx	r7
 800be4c:	3001      	adds	r0, #1
 800be4e:	d10c      	bne.n	800be6a <_printf_float+0x412>
 800be50:	e65d      	b.n	800bb0e <_printf_float+0xb6>
 800be52:	2301      	movs	r3, #1
 800be54:	465a      	mov	r2, fp
 800be56:	4631      	mov	r1, r6
 800be58:	4628      	mov	r0, r5
 800be5a:	47b8      	blx	r7
 800be5c:	3001      	adds	r0, #1
 800be5e:	f43f ae56 	beq.w	800bb0e <_printf_float+0xb6>
 800be62:	f108 0801 	add.w	r8, r8, #1
 800be66:	45d0      	cmp	r8, sl
 800be68:	dbf3      	blt.n	800be52 <_printf_float+0x3fa>
 800be6a:	464b      	mov	r3, r9
 800be6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be70:	e6df      	b.n	800bc32 <_printf_float+0x1da>
 800be72:	f04f 0800 	mov.w	r8, #0
 800be76:	f104 0b1a 	add.w	fp, r4, #26
 800be7a:	e7f4      	b.n	800be66 <_printf_float+0x40e>
 800be7c:	2301      	movs	r3, #1
 800be7e:	4642      	mov	r2, r8
 800be80:	e7e1      	b.n	800be46 <_printf_float+0x3ee>
 800be82:	2301      	movs	r3, #1
 800be84:	464a      	mov	r2, r9
 800be86:	4631      	mov	r1, r6
 800be88:	4628      	mov	r0, r5
 800be8a:	47b8      	blx	r7
 800be8c:	3001      	adds	r0, #1
 800be8e:	f43f ae3e 	beq.w	800bb0e <_printf_float+0xb6>
 800be92:	f108 0801 	add.w	r8, r8, #1
 800be96:	68e3      	ldr	r3, [r4, #12]
 800be98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be9a:	1a5b      	subs	r3, r3, r1
 800be9c:	4543      	cmp	r3, r8
 800be9e:	dcf0      	bgt.n	800be82 <_printf_float+0x42a>
 800bea0:	e6fc      	b.n	800bc9c <_printf_float+0x244>
 800bea2:	f04f 0800 	mov.w	r8, #0
 800bea6:	f104 0919 	add.w	r9, r4, #25
 800beaa:	e7f4      	b.n	800be96 <_printf_float+0x43e>

0800beac <_printf_common>:
 800beac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb0:	4616      	mov	r6, r2
 800beb2:	4698      	mov	r8, r3
 800beb4:	688a      	ldr	r2, [r1, #8]
 800beb6:	690b      	ldr	r3, [r1, #16]
 800beb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bebc:	4293      	cmp	r3, r2
 800bebe:	bfb8      	it	lt
 800bec0:	4613      	movlt	r3, r2
 800bec2:	6033      	str	r3, [r6, #0]
 800bec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bec8:	4607      	mov	r7, r0
 800beca:	460c      	mov	r4, r1
 800becc:	b10a      	cbz	r2, 800bed2 <_printf_common+0x26>
 800bece:	3301      	adds	r3, #1
 800bed0:	6033      	str	r3, [r6, #0]
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	0699      	lsls	r1, r3, #26
 800bed6:	bf42      	ittt	mi
 800bed8:	6833      	ldrmi	r3, [r6, #0]
 800beda:	3302      	addmi	r3, #2
 800bedc:	6033      	strmi	r3, [r6, #0]
 800bede:	6825      	ldr	r5, [r4, #0]
 800bee0:	f015 0506 	ands.w	r5, r5, #6
 800bee4:	d106      	bne.n	800bef4 <_printf_common+0x48>
 800bee6:	f104 0a19 	add.w	sl, r4, #25
 800beea:	68e3      	ldr	r3, [r4, #12]
 800beec:	6832      	ldr	r2, [r6, #0]
 800beee:	1a9b      	subs	r3, r3, r2
 800bef0:	42ab      	cmp	r3, r5
 800bef2:	dc26      	bgt.n	800bf42 <_printf_common+0x96>
 800bef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bef8:	6822      	ldr	r2, [r4, #0]
 800befa:	3b00      	subs	r3, #0
 800befc:	bf18      	it	ne
 800befe:	2301      	movne	r3, #1
 800bf00:	0692      	lsls	r2, r2, #26
 800bf02:	d42b      	bmi.n	800bf5c <_printf_common+0xb0>
 800bf04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf08:	4641      	mov	r1, r8
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	47c8      	blx	r9
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d01e      	beq.n	800bf50 <_printf_common+0xa4>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	6922      	ldr	r2, [r4, #16]
 800bf16:	f003 0306 	and.w	r3, r3, #6
 800bf1a:	2b04      	cmp	r3, #4
 800bf1c:	bf02      	ittt	eq
 800bf1e:	68e5      	ldreq	r5, [r4, #12]
 800bf20:	6833      	ldreq	r3, [r6, #0]
 800bf22:	1aed      	subeq	r5, r5, r3
 800bf24:	68a3      	ldr	r3, [r4, #8]
 800bf26:	bf0c      	ite	eq
 800bf28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf2c:	2500      	movne	r5, #0
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	bfc4      	itt	gt
 800bf32:	1a9b      	subgt	r3, r3, r2
 800bf34:	18ed      	addgt	r5, r5, r3
 800bf36:	2600      	movs	r6, #0
 800bf38:	341a      	adds	r4, #26
 800bf3a:	42b5      	cmp	r5, r6
 800bf3c:	d11a      	bne.n	800bf74 <_printf_common+0xc8>
 800bf3e:	2000      	movs	r0, #0
 800bf40:	e008      	b.n	800bf54 <_printf_common+0xa8>
 800bf42:	2301      	movs	r3, #1
 800bf44:	4652      	mov	r2, sl
 800bf46:	4641      	mov	r1, r8
 800bf48:	4638      	mov	r0, r7
 800bf4a:	47c8      	blx	r9
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	d103      	bne.n	800bf58 <_printf_common+0xac>
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf58:	3501      	adds	r5, #1
 800bf5a:	e7c6      	b.n	800beea <_printf_common+0x3e>
 800bf5c:	18e1      	adds	r1, r4, r3
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	2030      	movs	r0, #48	@ 0x30
 800bf62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf66:	4422      	add	r2, r4
 800bf68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf70:	3302      	adds	r3, #2
 800bf72:	e7c7      	b.n	800bf04 <_printf_common+0x58>
 800bf74:	2301      	movs	r3, #1
 800bf76:	4622      	mov	r2, r4
 800bf78:	4641      	mov	r1, r8
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	47c8      	blx	r9
 800bf7e:	3001      	adds	r0, #1
 800bf80:	d0e6      	beq.n	800bf50 <_printf_common+0xa4>
 800bf82:	3601      	adds	r6, #1
 800bf84:	e7d9      	b.n	800bf3a <_printf_common+0x8e>
	...

0800bf88 <_printf_i>:
 800bf88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8c:	7e0f      	ldrb	r7, [r1, #24]
 800bf8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf90:	2f78      	cmp	r7, #120	@ 0x78
 800bf92:	4691      	mov	r9, r2
 800bf94:	4680      	mov	r8, r0
 800bf96:	460c      	mov	r4, r1
 800bf98:	469a      	mov	sl, r3
 800bf9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf9e:	d807      	bhi.n	800bfb0 <_printf_i+0x28>
 800bfa0:	2f62      	cmp	r7, #98	@ 0x62
 800bfa2:	d80a      	bhi.n	800bfba <_printf_i+0x32>
 800bfa4:	2f00      	cmp	r7, #0
 800bfa6:	f000 80d1 	beq.w	800c14c <_printf_i+0x1c4>
 800bfaa:	2f58      	cmp	r7, #88	@ 0x58
 800bfac:	f000 80b8 	beq.w	800c120 <_printf_i+0x198>
 800bfb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfb8:	e03a      	b.n	800c030 <_printf_i+0xa8>
 800bfba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfbe:	2b15      	cmp	r3, #21
 800bfc0:	d8f6      	bhi.n	800bfb0 <_printf_i+0x28>
 800bfc2:	a101      	add	r1, pc, #4	@ (adr r1, 800bfc8 <_printf_i+0x40>)
 800bfc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfc8:	0800c021 	.word	0x0800c021
 800bfcc:	0800c035 	.word	0x0800c035
 800bfd0:	0800bfb1 	.word	0x0800bfb1
 800bfd4:	0800bfb1 	.word	0x0800bfb1
 800bfd8:	0800bfb1 	.word	0x0800bfb1
 800bfdc:	0800bfb1 	.word	0x0800bfb1
 800bfe0:	0800c035 	.word	0x0800c035
 800bfe4:	0800bfb1 	.word	0x0800bfb1
 800bfe8:	0800bfb1 	.word	0x0800bfb1
 800bfec:	0800bfb1 	.word	0x0800bfb1
 800bff0:	0800bfb1 	.word	0x0800bfb1
 800bff4:	0800c133 	.word	0x0800c133
 800bff8:	0800c05f 	.word	0x0800c05f
 800bffc:	0800c0ed 	.word	0x0800c0ed
 800c000:	0800bfb1 	.word	0x0800bfb1
 800c004:	0800bfb1 	.word	0x0800bfb1
 800c008:	0800c155 	.word	0x0800c155
 800c00c:	0800bfb1 	.word	0x0800bfb1
 800c010:	0800c05f 	.word	0x0800c05f
 800c014:	0800bfb1 	.word	0x0800bfb1
 800c018:	0800bfb1 	.word	0x0800bfb1
 800c01c:	0800c0f5 	.word	0x0800c0f5
 800c020:	6833      	ldr	r3, [r6, #0]
 800c022:	1d1a      	adds	r2, r3, #4
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6032      	str	r2, [r6, #0]
 800c028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c02c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c030:	2301      	movs	r3, #1
 800c032:	e09c      	b.n	800c16e <_printf_i+0x1e6>
 800c034:	6833      	ldr	r3, [r6, #0]
 800c036:	6820      	ldr	r0, [r4, #0]
 800c038:	1d19      	adds	r1, r3, #4
 800c03a:	6031      	str	r1, [r6, #0]
 800c03c:	0606      	lsls	r6, r0, #24
 800c03e:	d501      	bpl.n	800c044 <_printf_i+0xbc>
 800c040:	681d      	ldr	r5, [r3, #0]
 800c042:	e003      	b.n	800c04c <_printf_i+0xc4>
 800c044:	0645      	lsls	r5, r0, #25
 800c046:	d5fb      	bpl.n	800c040 <_printf_i+0xb8>
 800c048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	da03      	bge.n	800c058 <_printf_i+0xd0>
 800c050:	232d      	movs	r3, #45	@ 0x2d
 800c052:	426d      	negs	r5, r5
 800c054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c058:	4858      	ldr	r0, [pc, #352]	@ (800c1bc <_printf_i+0x234>)
 800c05a:	230a      	movs	r3, #10
 800c05c:	e011      	b.n	800c082 <_printf_i+0xfa>
 800c05e:	6821      	ldr	r1, [r4, #0]
 800c060:	6833      	ldr	r3, [r6, #0]
 800c062:	0608      	lsls	r0, r1, #24
 800c064:	f853 5b04 	ldr.w	r5, [r3], #4
 800c068:	d402      	bmi.n	800c070 <_printf_i+0xe8>
 800c06a:	0649      	lsls	r1, r1, #25
 800c06c:	bf48      	it	mi
 800c06e:	b2ad      	uxthmi	r5, r5
 800c070:	2f6f      	cmp	r7, #111	@ 0x6f
 800c072:	4852      	ldr	r0, [pc, #328]	@ (800c1bc <_printf_i+0x234>)
 800c074:	6033      	str	r3, [r6, #0]
 800c076:	bf14      	ite	ne
 800c078:	230a      	movne	r3, #10
 800c07a:	2308      	moveq	r3, #8
 800c07c:	2100      	movs	r1, #0
 800c07e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c082:	6866      	ldr	r6, [r4, #4]
 800c084:	60a6      	str	r6, [r4, #8]
 800c086:	2e00      	cmp	r6, #0
 800c088:	db05      	blt.n	800c096 <_printf_i+0x10e>
 800c08a:	6821      	ldr	r1, [r4, #0]
 800c08c:	432e      	orrs	r6, r5
 800c08e:	f021 0104 	bic.w	r1, r1, #4
 800c092:	6021      	str	r1, [r4, #0]
 800c094:	d04b      	beq.n	800c12e <_printf_i+0x1a6>
 800c096:	4616      	mov	r6, r2
 800c098:	fbb5 f1f3 	udiv	r1, r5, r3
 800c09c:	fb03 5711 	mls	r7, r3, r1, r5
 800c0a0:	5dc7      	ldrb	r7, [r0, r7]
 800c0a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0a6:	462f      	mov	r7, r5
 800c0a8:	42bb      	cmp	r3, r7
 800c0aa:	460d      	mov	r5, r1
 800c0ac:	d9f4      	bls.n	800c098 <_printf_i+0x110>
 800c0ae:	2b08      	cmp	r3, #8
 800c0b0:	d10b      	bne.n	800c0ca <_printf_i+0x142>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	07df      	lsls	r7, r3, #31
 800c0b6:	d508      	bpl.n	800c0ca <_printf_i+0x142>
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	6861      	ldr	r1, [r4, #4]
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	bfde      	ittt	le
 800c0c0:	2330      	movle	r3, #48	@ 0x30
 800c0c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0ca:	1b92      	subs	r2, r2, r6
 800c0cc:	6122      	str	r2, [r4, #16]
 800c0ce:	f8cd a000 	str.w	sl, [sp]
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	aa03      	add	r2, sp, #12
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4640      	mov	r0, r8
 800c0da:	f7ff fee7 	bl	800beac <_printf_common>
 800c0de:	3001      	adds	r0, #1
 800c0e0:	d14a      	bne.n	800c178 <_printf_i+0x1f0>
 800c0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e6:	b004      	add	sp, #16
 800c0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	f043 0320 	orr.w	r3, r3, #32
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	4832      	ldr	r0, [pc, #200]	@ (800c1c0 <_printf_i+0x238>)
 800c0f6:	2778      	movs	r7, #120	@ 0x78
 800c0f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	6831      	ldr	r1, [r6, #0]
 800c100:	061f      	lsls	r7, r3, #24
 800c102:	f851 5b04 	ldr.w	r5, [r1], #4
 800c106:	d402      	bmi.n	800c10e <_printf_i+0x186>
 800c108:	065f      	lsls	r7, r3, #25
 800c10a:	bf48      	it	mi
 800c10c:	b2ad      	uxthmi	r5, r5
 800c10e:	6031      	str	r1, [r6, #0]
 800c110:	07d9      	lsls	r1, r3, #31
 800c112:	bf44      	itt	mi
 800c114:	f043 0320 	orrmi.w	r3, r3, #32
 800c118:	6023      	strmi	r3, [r4, #0]
 800c11a:	b11d      	cbz	r5, 800c124 <_printf_i+0x19c>
 800c11c:	2310      	movs	r3, #16
 800c11e:	e7ad      	b.n	800c07c <_printf_i+0xf4>
 800c120:	4826      	ldr	r0, [pc, #152]	@ (800c1bc <_printf_i+0x234>)
 800c122:	e7e9      	b.n	800c0f8 <_printf_i+0x170>
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	f023 0320 	bic.w	r3, r3, #32
 800c12a:	6023      	str	r3, [r4, #0]
 800c12c:	e7f6      	b.n	800c11c <_printf_i+0x194>
 800c12e:	4616      	mov	r6, r2
 800c130:	e7bd      	b.n	800c0ae <_printf_i+0x126>
 800c132:	6833      	ldr	r3, [r6, #0]
 800c134:	6825      	ldr	r5, [r4, #0]
 800c136:	6961      	ldr	r1, [r4, #20]
 800c138:	1d18      	adds	r0, r3, #4
 800c13a:	6030      	str	r0, [r6, #0]
 800c13c:	062e      	lsls	r6, r5, #24
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	d501      	bpl.n	800c146 <_printf_i+0x1be>
 800c142:	6019      	str	r1, [r3, #0]
 800c144:	e002      	b.n	800c14c <_printf_i+0x1c4>
 800c146:	0668      	lsls	r0, r5, #25
 800c148:	d5fb      	bpl.n	800c142 <_printf_i+0x1ba>
 800c14a:	8019      	strh	r1, [r3, #0]
 800c14c:	2300      	movs	r3, #0
 800c14e:	6123      	str	r3, [r4, #16]
 800c150:	4616      	mov	r6, r2
 800c152:	e7bc      	b.n	800c0ce <_printf_i+0x146>
 800c154:	6833      	ldr	r3, [r6, #0]
 800c156:	1d1a      	adds	r2, r3, #4
 800c158:	6032      	str	r2, [r6, #0]
 800c15a:	681e      	ldr	r6, [r3, #0]
 800c15c:	6862      	ldr	r2, [r4, #4]
 800c15e:	2100      	movs	r1, #0
 800c160:	4630      	mov	r0, r6
 800c162:	f7f4 f85d 	bl	8000220 <memchr>
 800c166:	b108      	cbz	r0, 800c16c <_printf_i+0x1e4>
 800c168:	1b80      	subs	r0, r0, r6
 800c16a:	6060      	str	r0, [r4, #4]
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	6123      	str	r3, [r4, #16]
 800c170:	2300      	movs	r3, #0
 800c172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c176:	e7aa      	b.n	800c0ce <_printf_i+0x146>
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	4632      	mov	r2, r6
 800c17c:	4649      	mov	r1, r9
 800c17e:	4640      	mov	r0, r8
 800c180:	47d0      	blx	sl
 800c182:	3001      	adds	r0, #1
 800c184:	d0ad      	beq.n	800c0e2 <_printf_i+0x15a>
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	079b      	lsls	r3, r3, #30
 800c18a:	d413      	bmi.n	800c1b4 <_printf_i+0x22c>
 800c18c:	68e0      	ldr	r0, [r4, #12]
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	4298      	cmp	r0, r3
 800c192:	bfb8      	it	lt
 800c194:	4618      	movlt	r0, r3
 800c196:	e7a6      	b.n	800c0e6 <_printf_i+0x15e>
 800c198:	2301      	movs	r3, #1
 800c19a:	4632      	mov	r2, r6
 800c19c:	4649      	mov	r1, r9
 800c19e:	4640      	mov	r0, r8
 800c1a0:	47d0      	blx	sl
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	d09d      	beq.n	800c0e2 <_printf_i+0x15a>
 800c1a6:	3501      	adds	r5, #1
 800c1a8:	68e3      	ldr	r3, [r4, #12]
 800c1aa:	9903      	ldr	r1, [sp, #12]
 800c1ac:	1a5b      	subs	r3, r3, r1
 800c1ae:	42ab      	cmp	r3, r5
 800c1b0:	dcf2      	bgt.n	800c198 <_printf_i+0x210>
 800c1b2:	e7eb      	b.n	800c18c <_printf_i+0x204>
 800c1b4:	2500      	movs	r5, #0
 800c1b6:	f104 0619 	add.w	r6, r4, #25
 800c1ba:	e7f5      	b.n	800c1a8 <_printf_i+0x220>
 800c1bc:	0801044a 	.word	0x0801044a
 800c1c0:	0801045b 	.word	0x0801045b

0800c1c4 <_scanf_float>:
 800c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	b087      	sub	sp, #28
 800c1ca:	4691      	mov	r9, r2
 800c1cc:	9303      	str	r3, [sp, #12]
 800c1ce:	688b      	ldr	r3, [r1, #8]
 800c1d0:	1e5a      	subs	r2, r3, #1
 800c1d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c1d6:	bf81      	itttt	hi
 800c1d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c1dc:	eb03 0b05 	addhi.w	fp, r3, r5
 800c1e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c1e4:	608b      	strhi	r3, [r1, #8]
 800c1e6:	680b      	ldr	r3, [r1, #0]
 800c1e8:	460a      	mov	r2, r1
 800c1ea:	f04f 0500 	mov.w	r5, #0
 800c1ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c1f2:	f842 3b1c 	str.w	r3, [r2], #28
 800c1f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c1fa:	4680      	mov	r8, r0
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	bf98      	it	ls
 800c200:	f04f 0b00 	movls.w	fp, #0
 800c204:	9201      	str	r2, [sp, #4]
 800c206:	4616      	mov	r6, r2
 800c208:	46aa      	mov	sl, r5
 800c20a:	462f      	mov	r7, r5
 800c20c:	9502      	str	r5, [sp, #8]
 800c20e:	68a2      	ldr	r2, [r4, #8]
 800c210:	b15a      	cbz	r2, 800c22a <_scanf_float+0x66>
 800c212:	f8d9 3000 	ldr.w	r3, [r9]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2b4e      	cmp	r3, #78	@ 0x4e
 800c21a:	d863      	bhi.n	800c2e4 <_scanf_float+0x120>
 800c21c:	2b40      	cmp	r3, #64	@ 0x40
 800c21e:	d83b      	bhi.n	800c298 <_scanf_float+0xd4>
 800c220:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c224:	b2c8      	uxtb	r0, r1
 800c226:	280e      	cmp	r0, #14
 800c228:	d939      	bls.n	800c29e <_scanf_float+0xda>
 800c22a:	b11f      	cbz	r7, 800c234 <_scanf_float+0x70>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c232:	6023      	str	r3, [r4, #0]
 800c234:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c238:	f1ba 0f01 	cmp.w	sl, #1
 800c23c:	f200 8114 	bhi.w	800c468 <_scanf_float+0x2a4>
 800c240:	9b01      	ldr	r3, [sp, #4]
 800c242:	429e      	cmp	r6, r3
 800c244:	f200 8105 	bhi.w	800c452 <_scanf_float+0x28e>
 800c248:	2001      	movs	r0, #1
 800c24a:	b007      	add	sp, #28
 800c24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c250:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c254:	2a0d      	cmp	r2, #13
 800c256:	d8e8      	bhi.n	800c22a <_scanf_float+0x66>
 800c258:	a101      	add	r1, pc, #4	@ (adr r1, 800c260 <_scanf_float+0x9c>)
 800c25a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c25e:	bf00      	nop
 800c260:	0800c3a9 	.word	0x0800c3a9
 800c264:	0800c22b 	.word	0x0800c22b
 800c268:	0800c22b 	.word	0x0800c22b
 800c26c:	0800c22b 	.word	0x0800c22b
 800c270:	0800c405 	.word	0x0800c405
 800c274:	0800c3df 	.word	0x0800c3df
 800c278:	0800c22b 	.word	0x0800c22b
 800c27c:	0800c22b 	.word	0x0800c22b
 800c280:	0800c3b7 	.word	0x0800c3b7
 800c284:	0800c22b 	.word	0x0800c22b
 800c288:	0800c22b 	.word	0x0800c22b
 800c28c:	0800c22b 	.word	0x0800c22b
 800c290:	0800c22b 	.word	0x0800c22b
 800c294:	0800c373 	.word	0x0800c373
 800c298:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c29c:	e7da      	b.n	800c254 <_scanf_float+0x90>
 800c29e:	290e      	cmp	r1, #14
 800c2a0:	d8c3      	bhi.n	800c22a <_scanf_float+0x66>
 800c2a2:	a001      	add	r0, pc, #4	@ (adr r0, 800c2a8 <_scanf_float+0xe4>)
 800c2a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c2a8:	0800c363 	.word	0x0800c363
 800c2ac:	0800c22b 	.word	0x0800c22b
 800c2b0:	0800c363 	.word	0x0800c363
 800c2b4:	0800c3f3 	.word	0x0800c3f3
 800c2b8:	0800c22b 	.word	0x0800c22b
 800c2bc:	0800c305 	.word	0x0800c305
 800c2c0:	0800c349 	.word	0x0800c349
 800c2c4:	0800c349 	.word	0x0800c349
 800c2c8:	0800c349 	.word	0x0800c349
 800c2cc:	0800c349 	.word	0x0800c349
 800c2d0:	0800c349 	.word	0x0800c349
 800c2d4:	0800c349 	.word	0x0800c349
 800c2d8:	0800c349 	.word	0x0800c349
 800c2dc:	0800c349 	.word	0x0800c349
 800c2e0:	0800c349 	.word	0x0800c349
 800c2e4:	2b6e      	cmp	r3, #110	@ 0x6e
 800c2e6:	d809      	bhi.n	800c2fc <_scanf_float+0x138>
 800c2e8:	2b60      	cmp	r3, #96	@ 0x60
 800c2ea:	d8b1      	bhi.n	800c250 <_scanf_float+0x8c>
 800c2ec:	2b54      	cmp	r3, #84	@ 0x54
 800c2ee:	d07b      	beq.n	800c3e8 <_scanf_float+0x224>
 800c2f0:	2b59      	cmp	r3, #89	@ 0x59
 800c2f2:	d19a      	bne.n	800c22a <_scanf_float+0x66>
 800c2f4:	2d07      	cmp	r5, #7
 800c2f6:	d198      	bne.n	800c22a <_scanf_float+0x66>
 800c2f8:	2508      	movs	r5, #8
 800c2fa:	e02f      	b.n	800c35c <_scanf_float+0x198>
 800c2fc:	2b74      	cmp	r3, #116	@ 0x74
 800c2fe:	d073      	beq.n	800c3e8 <_scanf_float+0x224>
 800c300:	2b79      	cmp	r3, #121	@ 0x79
 800c302:	e7f6      	b.n	800c2f2 <_scanf_float+0x12e>
 800c304:	6821      	ldr	r1, [r4, #0]
 800c306:	05c8      	lsls	r0, r1, #23
 800c308:	d51e      	bpl.n	800c348 <_scanf_float+0x184>
 800c30a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c30e:	6021      	str	r1, [r4, #0]
 800c310:	3701      	adds	r7, #1
 800c312:	f1bb 0f00 	cmp.w	fp, #0
 800c316:	d003      	beq.n	800c320 <_scanf_float+0x15c>
 800c318:	3201      	adds	r2, #1
 800c31a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c31e:	60a2      	str	r2, [r4, #8]
 800c320:	68a3      	ldr	r3, [r4, #8]
 800c322:	3b01      	subs	r3, #1
 800c324:	60a3      	str	r3, [r4, #8]
 800c326:	6923      	ldr	r3, [r4, #16]
 800c328:	3301      	adds	r3, #1
 800c32a:	6123      	str	r3, [r4, #16]
 800c32c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c330:	3b01      	subs	r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	f8c9 3004 	str.w	r3, [r9, #4]
 800c338:	f340 8082 	ble.w	800c440 <_scanf_float+0x27c>
 800c33c:	f8d9 3000 	ldr.w	r3, [r9]
 800c340:	3301      	adds	r3, #1
 800c342:	f8c9 3000 	str.w	r3, [r9]
 800c346:	e762      	b.n	800c20e <_scanf_float+0x4a>
 800c348:	eb1a 0105 	adds.w	r1, sl, r5
 800c34c:	f47f af6d 	bne.w	800c22a <_scanf_float+0x66>
 800c350:	6822      	ldr	r2, [r4, #0]
 800c352:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c356:	6022      	str	r2, [r4, #0]
 800c358:	460d      	mov	r5, r1
 800c35a:	468a      	mov	sl, r1
 800c35c:	f806 3b01 	strb.w	r3, [r6], #1
 800c360:	e7de      	b.n	800c320 <_scanf_float+0x15c>
 800c362:	6822      	ldr	r2, [r4, #0]
 800c364:	0610      	lsls	r0, r2, #24
 800c366:	f57f af60 	bpl.w	800c22a <_scanf_float+0x66>
 800c36a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c36e:	6022      	str	r2, [r4, #0]
 800c370:	e7f4      	b.n	800c35c <_scanf_float+0x198>
 800c372:	f1ba 0f00 	cmp.w	sl, #0
 800c376:	d10c      	bne.n	800c392 <_scanf_float+0x1ce>
 800c378:	b977      	cbnz	r7, 800c398 <_scanf_float+0x1d4>
 800c37a:	6822      	ldr	r2, [r4, #0]
 800c37c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c380:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c384:	d108      	bne.n	800c398 <_scanf_float+0x1d4>
 800c386:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c38a:	6022      	str	r2, [r4, #0]
 800c38c:	f04f 0a01 	mov.w	sl, #1
 800c390:	e7e4      	b.n	800c35c <_scanf_float+0x198>
 800c392:	f1ba 0f02 	cmp.w	sl, #2
 800c396:	d050      	beq.n	800c43a <_scanf_float+0x276>
 800c398:	2d01      	cmp	r5, #1
 800c39a:	d002      	beq.n	800c3a2 <_scanf_float+0x1de>
 800c39c:	2d04      	cmp	r5, #4
 800c39e:	f47f af44 	bne.w	800c22a <_scanf_float+0x66>
 800c3a2:	3501      	adds	r5, #1
 800c3a4:	b2ed      	uxtb	r5, r5
 800c3a6:	e7d9      	b.n	800c35c <_scanf_float+0x198>
 800c3a8:	f1ba 0f01 	cmp.w	sl, #1
 800c3ac:	f47f af3d 	bne.w	800c22a <_scanf_float+0x66>
 800c3b0:	f04f 0a02 	mov.w	sl, #2
 800c3b4:	e7d2      	b.n	800c35c <_scanf_float+0x198>
 800c3b6:	b975      	cbnz	r5, 800c3d6 <_scanf_float+0x212>
 800c3b8:	2f00      	cmp	r7, #0
 800c3ba:	f47f af37 	bne.w	800c22c <_scanf_float+0x68>
 800c3be:	6822      	ldr	r2, [r4, #0]
 800c3c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c3c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c3c8:	f040 8103 	bne.w	800c5d2 <_scanf_float+0x40e>
 800c3cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c3d0:	6022      	str	r2, [r4, #0]
 800c3d2:	2501      	movs	r5, #1
 800c3d4:	e7c2      	b.n	800c35c <_scanf_float+0x198>
 800c3d6:	2d03      	cmp	r5, #3
 800c3d8:	d0e3      	beq.n	800c3a2 <_scanf_float+0x1de>
 800c3da:	2d05      	cmp	r5, #5
 800c3dc:	e7df      	b.n	800c39e <_scanf_float+0x1da>
 800c3de:	2d02      	cmp	r5, #2
 800c3e0:	f47f af23 	bne.w	800c22a <_scanf_float+0x66>
 800c3e4:	2503      	movs	r5, #3
 800c3e6:	e7b9      	b.n	800c35c <_scanf_float+0x198>
 800c3e8:	2d06      	cmp	r5, #6
 800c3ea:	f47f af1e 	bne.w	800c22a <_scanf_float+0x66>
 800c3ee:	2507      	movs	r5, #7
 800c3f0:	e7b4      	b.n	800c35c <_scanf_float+0x198>
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	0591      	lsls	r1, r2, #22
 800c3f6:	f57f af18 	bpl.w	800c22a <_scanf_float+0x66>
 800c3fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c3fe:	6022      	str	r2, [r4, #0]
 800c400:	9702      	str	r7, [sp, #8]
 800c402:	e7ab      	b.n	800c35c <_scanf_float+0x198>
 800c404:	6822      	ldr	r2, [r4, #0]
 800c406:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c40a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c40e:	d005      	beq.n	800c41c <_scanf_float+0x258>
 800c410:	0550      	lsls	r0, r2, #21
 800c412:	f57f af0a 	bpl.w	800c22a <_scanf_float+0x66>
 800c416:	2f00      	cmp	r7, #0
 800c418:	f000 80db 	beq.w	800c5d2 <_scanf_float+0x40e>
 800c41c:	0591      	lsls	r1, r2, #22
 800c41e:	bf58      	it	pl
 800c420:	9902      	ldrpl	r1, [sp, #8]
 800c422:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c426:	bf58      	it	pl
 800c428:	1a79      	subpl	r1, r7, r1
 800c42a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c42e:	bf58      	it	pl
 800c430:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c434:	6022      	str	r2, [r4, #0]
 800c436:	2700      	movs	r7, #0
 800c438:	e790      	b.n	800c35c <_scanf_float+0x198>
 800c43a:	f04f 0a03 	mov.w	sl, #3
 800c43e:	e78d      	b.n	800c35c <_scanf_float+0x198>
 800c440:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c444:	4649      	mov	r1, r9
 800c446:	4640      	mov	r0, r8
 800c448:	4798      	blx	r3
 800c44a:	2800      	cmp	r0, #0
 800c44c:	f43f aedf 	beq.w	800c20e <_scanf_float+0x4a>
 800c450:	e6eb      	b.n	800c22a <_scanf_float+0x66>
 800c452:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c456:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c45a:	464a      	mov	r2, r9
 800c45c:	4640      	mov	r0, r8
 800c45e:	4798      	blx	r3
 800c460:	6923      	ldr	r3, [r4, #16]
 800c462:	3b01      	subs	r3, #1
 800c464:	6123      	str	r3, [r4, #16]
 800c466:	e6eb      	b.n	800c240 <_scanf_float+0x7c>
 800c468:	1e6b      	subs	r3, r5, #1
 800c46a:	2b06      	cmp	r3, #6
 800c46c:	d824      	bhi.n	800c4b8 <_scanf_float+0x2f4>
 800c46e:	2d02      	cmp	r5, #2
 800c470:	d836      	bhi.n	800c4e0 <_scanf_float+0x31c>
 800c472:	9b01      	ldr	r3, [sp, #4]
 800c474:	429e      	cmp	r6, r3
 800c476:	f67f aee7 	bls.w	800c248 <_scanf_float+0x84>
 800c47a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c47e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c482:	464a      	mov	r2, r9
 800c484:	4640      	mov	r0, r8
 800c486:	4798      	blx	r3
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	6123      	str	r3, [r4, #16]
 800c48e:	e7f0      	b.n	800c472 <_scanf_float+0x2ae>
 800c490:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c494:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c498:	464a      	mov	r2, r9
 800c49a:	4640      	mov	r0, r8
 800c49c:	4798      	blx	r3
 800c49e:	6923      	ldr	r3, [r4, #16]
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	6123      	str	r3, [r4, #16]
 800c4a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4a8:	fa5f fa8a 	uxtb.w	sl, sl
 800c4ac:	f1ba 0f02 	cmp.w	sl, #2
 800c4b0:	d1ee      	bne.n	800c490 <_scanf_float+0x2cc>
 800c4b2:	3d03      	subs	r5, #3
 800c4b4:	b2ed      	uxtb	r5, r5
 800c4b6:	1b76      	subs	r6, r6, r5
 800c4b8:	6823      	ldr	r3, [r4, #0]
 800c4ba:	05da      	lsls	r2, r3, #23
 800c4bc:	d530      	bpl.n	800c520 <_scanf_float+0x35c>
 800c4be:	055b      	lsls	r3, r3, #21
 800c4c0:	d511      	bpl.n	800c4e6 <_scanf_float+0x322>
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	429e      	cmp	r6, r3
 800c4c6:	f67f aebf 	bls.w	800c248 <_scanf_float+0x84>
 800c4ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4d2:	464a      	mov	r2, r9
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	4798      	blx	r3
 800c4d8:	6923      	ldr	r3, [r4, #16]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	6123      	str	r3, [r4, #16]
 800c4de:	e7f0      	b.n	800c4c2 <_scanf_float+0x2fe>
 800c4e0:	46aa      	mov	sl, r5
 800c4e2:	46b3      	mov	fp, r6
 800c4e4:	e7de      	b.n	800c4a4 <_scanf_float+0x2e0>
 800c4e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c4ea:	6923      	ldr	r3, [r4, #16]
 800c4ec:	2965      	cmp	r1, #101	@ 0x65
 800c4ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800c4f6:	6123      	str	r3, [r4, #16]
 800c4f8:	d00c      	beq.n	800c514 <_scanf_float+0x350>
 800c4fa:	2945      	cmp	r1, #69	@ 0x45
 800c4fc:	d00a      	beq.n	800c514 <_scanf_float+0x350>
 800c4fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c502:	464a      	mov	r2, r9
 800c504:	4640      	mov	r0, r8
 800c506:	4798      	blx	r3
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c50e:	3b01      	subs	r3, #1
 800c510:	1eb5      	subs	r5, r6, #2
 800c512:	6123      	str	r3, [r4, #16]
 800c514:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c518:	464a      	mov	r2, r9
 800c51a:	4640      	mov	r0, r8
 800c51c:	4798      	blx	r3
 800c51e:	462e      	mov	r6, r5
 800c520:	6822      	ldr	r2, [r4, #0]
 800c522:	f012 0210 	ands.w	r2, r2, #16
 800c526:	d001      	beq.n	800c52c <_scanf_float+0x368>
 800c528:	2000      	movs	r0, #0
 800c52a:	e68e      	b.n	800c24a <_scanf_float+0x86>
 800c52c:	7032      	strb	r2, [r6, #0]
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c538:	d125      	bne.n	800c586 <_scanf_float+0x3c2>
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	429f      	cmp	r7, r3
 800c53e:	d00a      	beq.n	800c556 <_scanf_float+0x392>
 800c540:	1bda      	subs	r2, r3, r7
 800c542:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c546:	429e      	cmp	r6, r3
 800c548:	bf28      	it	cs
 800c54a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c54e:	4922      	ldr	r1, [pc, #136]	@ (800c5d8 <_scanf_float+0x414>)
 800c550:	4630      	mov	r0, r6
 800c552:	f000 f907 	bl	800c764 <siprintf>
 800c556:	9901      	ldr	r1, [sp, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	4640      	mov	r0, r8
 800c55c:	f002 fc00 	bl	800ed60 <_strtod_r>
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	6821      	ldr	r1, [r4, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f011 0f02 	tst.w	r1, #2
 800c56a:	ec57 6b10 	vmov	r6, r7, d0
 800c56e:	f103 0204 	add.w	r2, r3, #4
 800c572:	d015      	beq.n	800c5a0 <_scanf_float+0x3dc>
 800c574:	9903      	ldr	r1, [sp, #12]
 800c576:	600a      	str	r2, [r1, #0]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	e9c3 6700 	strd	r6, r7, [r3]
 800c57e:	68e3      	ldr	r3, [r4, #12]
 800c580:	3301      	adds	r3, #1
 800c582:	60e3      	str	r3, [r4, #12]
 800c584:	e7d0      	b.n	800c528 <_scanf_float+0x364>
 800c586:	9b04      	ldr	r3, [sp, #16]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d0e4      	beq.n	800c556 <_scanf_float+0x392>
 800c58c:	9905      	ldr	r1, [sp, #20]
 800c58e:	230a      	movs	r3, #10
 800c590:	3101      	adds	r1, #1
 800c592:	4640      	mov	r0, r8
 800c594:	f002 fc64 	bl	800ee60 <_strtol_r>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	9e05      	ldr	r6, [sp, #20]
 800c59c:	1ac2      	subs	r2, r0, r3
 800c59e:	e7d0      	b.n	800c542 <_scanf_float+0x37e>
 800c5a0:	f011 0f04 	tst.w	r1, #4
 800c5a4:	9903      	ldr	r1, [sp, #12]
 800c5a6:	600a      	str	r2, [r1, #0]
 800c5a8:	d1e6      	bne.n	800c578 <_scanf_float+0x3b4>
 800c5aa:	681d      	ldr	r5, [r3, #0]
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f4 fae2 	bl	8000b7c <__aeabi_dcmpun>
 800c5b8:	b128      	cbz	r0, 800c5c6 <_scanf_float+0x402>
 800c5ba:	4808      	ldr	r0, [pc, #32]	@ (800c5dc <_scanf_float+0x418>)
 800c5bc:	f000 f9c6 	bl	800c94c <nanf>
 800c5c0:	ed85 0a00 	vstr	s0, [r5]
 800c5c4:	e7db      	b.n	800c57e <_scanf_float+0x3ba>
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	f7f4 fb35 	bl	8000c38 <__aeabi_d2f>
 800c5ce:	6028      	str	r0, [r5, #0]
 800c5d0:	e7d5      	b.n	800c57e <_scanf_float+0x3ba>
 800c5d2:	2700      	movs	r7, #0
 800c5d4:	e62e      	b.n	800c234 <_scanf_float+0x70>
 800c5d6:	bf00      	nop
 800c5d8:	0801046c 	.word	0x0801046c
 800c5dc:	080105ad 	.word	0x080105ad

0800c5e0 <std>:
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	b510      	push	{r4, lr}
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	e9c0 3300 	strd	r3, r3, [r0]
 800c5ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5ee:	6083      	str	r3, [r0, #8]
 800c5f0:	8181      	strh	r1, [r0, #12]
 800c5f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5f4:	81c2      	strh	r2, [r0, #14]
 800c5f6:	6183      	str	r3, [r0, #24]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	2208      	movs	r2, #8
 800c5fc:	305c      	adds	r0, #92	@ 0x5c
 800c5fe:	f000 f916 	bl	800c82e <memset>
 800c602:	4b0d      	ldr	r3, [pc, #52]	@ (800c638 <std+0x58>)
 800c604:	6263      	str	r3, [r4, #36]	@ 0x24
 800c606:	4b0d      	ldr	r3, [pc, #52]	@ (800c63c <std+0x5c>)
 800c608:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c60a:	4b0d      	ldr	r3, [pc, #52]	@ (800c640 <std+0x60>)
 800c60c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c60e:	4b0d      	ldr	r3, [pc, #52]	@ (800c644 <std+0x64>)
 800c610:	6323      	str	r3, [r4, #48]	@ 0x30
 800c612:	4b0d      	ldr	r3, [pc, #52]	@ (800c648 <std+0x68>)
 800c614:	6224      	str	r4, [r4, #32]
 800c616:	429c      	cmp	r4, r3
 800c618:	d006      	beq.n	800c628 <std+0x48>
 800c61a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c61e:	4294      	cmp	r4, r2
 800c620:	d002      	beq.n	800c628 <std+0x48>
 800c622:	33d0      	adds	r3, #208	@ 0xd0
 800c624:	429c      	cmp	r4, r3
 800c626:	d105      	bne.n	800c634 <std+0x54>
 800c628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c630:	f000 b97a 	b.w	800c928 <__retarget_lock_init_recursive>
 800c634:	bd10      	pop	{r4, pc}
 800c636:	bf00      	nop
 800c638:	0800c7a9 	.word	0x0800c7a9
 800c63c:	0800c7cb 	.word	0x0800c7cb
 800c640:	0800c803 	.word	0x0800c803
 800c644:	0800c827 	.word	0x0800c827
 800c648:	20001f58 	.word	0x20001f58

0800c64c <stdio_exit_handler>:
 800c64c:	4a02      	ldr	r2, [pc, #8]	@ (800c658 <stdio_exit_handler+0xc>)
 800c64e:	4903      	ldr	r1, [pc, #12]	@ (800c65c <stdio_exit_handler+0x10>)
 800c650:	4803      	ldr	r0, [pc, #12]	@ (800c660 <stdio_exit_handler+0x14>)
 800c652:	f000 b869 	b.w	800c728 <_fwalk_sglue>
 800c656:	bf00      	nop
 800c658:	2000050c 	.word	0x2000050c
 800c65c:	0800f21d 	.word	0x0800f21d
 800c660:	2000051c 	.word	0x2000051c

0800c664 <cleanup_stdio>:
 800c664:	6841      	ldr	r1, [r0, #4]
 800c666:	4b0c      	ldr	r3, [pc, #48]	@ (800c698 <cleanup_stdio+0x34>)
 800c668:	4299      	cmp	r1, r3
 800c66a:	b510      	push	{r4, lr}
 800c66c:	4604      	mov	r4, r0
 800c66e:	d001      	beq.n	800c674 <cleanup_stdio+0x10>
 800c670:	f002 fdd4 	bl	800f21c <_fflush_r>
 800c674:	68a1      	ldr	r1, [r4, #8]
 800c676:	4b09      	ldr	r3, [pc, #36]	@ (800c69c <cleanup_stdio+0x38>)
 800c678:	4299      	cmp	r1, r3
 800c67a:	d002      	beq.n	800c682 <cleanup_stdio+0x1e>
 800c67c:	4620      	mov	r0, r4
 800c67e:	f002 fdcd 	bl	800f21c <_fflush_r>
 800c682:	68e1      	ldr	r1, [r4, #12]
 800c684:	4b06      	ldr	r3, [pc, #24]	@ (800c6a0 <cleanup_stdio+0x3c>)
 800c686:	4299      	cmp	r1, r3
 800c688:	d004      	beq.n	800c694 <cleanup_stdio+0x30>
 800c68a:	4620      	mov	r0, r4
 800c68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c690:	f002 bdc4 	b.w	800f21c <_fflush_r>
 800c694:	bd10      	pop	{r4, pc}
 800c696:	bf00      	nop
 800c698:	20001f58 	.word	0x20001f58
 800c69c:	20001fc0 	.word	0x20001fc0
 800c6a0:	20002028 	.word	0x20002028

0800c6a4 <global_stdio_init.part.0>:
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6d4 <global_stdio_init.part.0+0x30>)
 800c6a8:	4c0b      	ldr	r4, [pc, #44]	@ (800c6d8 <global_stdio_init.part.0+0x34>)
 800c6aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c6dc <global_stdio_init.part.0+0x38>)
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	2104      	movs	r1, #4
 800c6b4:	f7ff ff94 	bl	800c5e0 <std>
 800c6b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c6bc:	2201      	movs	r2, #1
 800c6be:	2109      	movs	r1, #9
 800c6c0:	f7ff ff8e 	bl	800c5e0 <std>
 800c6c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6c8:	2202      	movs	r2, #2
 800c6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6ce:	2112      	movs	r1, #18
 800c6d0:	f7ff bf86 	b.w	800c5e0 <std>
 800c6d4:	20002090 	.word	0x20002090
 800c6d8:	20001f58 	.word	0x20001f58
 800c6dc:	0800c64d 	.word	0x0800c64d

0800c6e0 <__sfp_lock_acquire>:
 800c6e0:	4801      	ldr	r0, [pc, #4]	@ (800c6e8 <__sfp_lock_acquire+0x8>)
 800c6e2:	f000 b922 	b.w	800c92a <__retarget_lock_acquire_recursive>
 800c6e6:	bf00      	nop
 800c6e8:	20002099 	.word	0x20002099

0800c6ec <__sfp_lock_release>:
 800c6ec:	4801      	ldr	r0, [pc, #4]	@ (800c6f4 <__sfp_lock_release+0x8>)
 800c6ee:	f000 b91d 	b.w	800c92c <__retarget_lock_release_recursive>
 800c6f2:	bf00      	nop
 800c6f4:	20002099 	.word	0x20002099

0800c6f8 <__sinit>:
 800c6f8:	b510      	push	{r4, lr}
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	f7ff fff0 	bl	800c6e0 <__sfp_lock_acquire>
 800c700:	6a23      	ldr	r3, [r4, #32]
 800c702:	b11b      	cbz	r3, 800c70c <__sinit+0x14>
 800c704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c708:	f7ff bff0 	b.w	800c6ec <__sfp_lock_release>
 800c70c:	4b04      	ldr	r3, [pc, #16]	@ (800c720 <__sinit+0x28>)
 800c70e:	6223      	str	r3, [r4, #32]
 800c710:	4b04      	ldr	r3, [pc, #16]	@ (800c724 <__sinit+0x2c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1f5      	bne.n	800c704 <__sinit+0xc>
 800c718:	f7ff ffc4 	bl	800c6a4 <global_stdio_init.part.0>
 800c71c:	e7f2      	b.n	800c704 <__sinit+0xc>
 800c71e:	bf00      	nop
 800c720:	0800c665 	.word	0x0800c665
 800c724:	20002090 	.word	0x20002090

0800c728 <_fwalk_sglue>:
 800c728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c72c:	4607      	mov	r7, r0
 800c72e:	4688      	mov	r8, r1
 800c730:	4614      	mov	r4, r2
 800c732:	2600      	movs	r6, #0
 800c734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c738:	f1b9 0901 	subs.w	r9, r9, #1
 800c73c:	d505      	bpl.n	800c74a <_fwalk_sglue+0x22>
 800c73e:	6824      	ldr	r4, [r4, #0]
 800c740:	2c00      	cmp	r4, #0
 800c742:	d1f7      	bne.n	800c734 <_fwalk_sglue+0xc>
 800c744:	4630      	mov	r0, r6
 800c746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c74a:	89ab      	ldrh	r3, [r5, #12]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d907      	bls.n	800c760 <_fwalk_sglue+0x38>
 800c750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c754:	3301      	adds	r3, #1
 800c756:	d003      	beq.n	800c760 <_fwalk_sglue+0x38>
 800c758:	4629      	mov	r1, r5
 800c75a:	4638      	mov	r0, r7
 800c75c:	47c0      	blx	r8
 800c75e:	4306      	orrs	r6, r0
 800c760:	3568      	adds	r5, #104	@ 0x68
 800c762:	e7e9      	b.n	800c738 <_fwalk_sglue+0x10>

0800c764 <siprintf>:
 800c764:	b40e      	push	{r1, r2, r3}
 800c766:	b510      	push	{r4, lr}
 800c768:	b09d      	sub	sp, #116	@ 0x74
 800c76a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c76c:	9002      	str	r0, [sp, #8]
 800c76e:	9006      	str	r0, [sp, #24]
 800c770:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c774:	480a      	ldr	r0, [pc, #40]	@ (800c7a0 <siprintf+0x3c>)
 800c776:	9107      	str	r1, [sp, #28]
 800c778:	9104      	str	r1, [sp, #16]
 800c77a:	490a      	ldr	r1, [pc, #40]	@ (800c7a4 <siprintf+0x40>)
 800c77c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c780:	9105      	str	r1, [sp, #20]
 800c782:	2400      	movs	r4, #0
 800c784:	a902      	add	r1, sp, #8
 800c786:	6800      	ldr	r0, [r0, #0]
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c78c:	f002 fbc6 	bl	800ef1c <_svfiprintf_r>
 800c790:	9b02      	ldr	r3, [sp, #8]
 800c792:	701c      	strb	r4, [r3, #0]
 800c794:	b01d      	add	sp, #116	@ 0x74
 800c796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c79a:	b003      	add	sp, #12
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	20000518 	.word	0x20000518
 800c7a4:	ffff0208 	.word	0xffff0208

0800c7a8 <__sread>:
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b0:	f000 f86c 	bl	800c88c <_read_r>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	bfab      	itete	ge
 800c7b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7ba:	89a3      	ldrhlt	r3, [r4, #12]
 800c7bc:	181b      	addge	r3, r3, r0
 800c7be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7c2:	bfac      	ite	ge
 800c7c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7c6:	81a3      	strhlt	r3, [r4, #12]
 800c7c8:	bd10      	pop	{r4, pc}

0800c7ca <__swrite>:
 800c7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ce:	461f      	mov	r7, r3
 800c7d0:	898b      	ldrh	r3, [r1, #12]
 800c7d2:	05db      	lsls	r3, r3, #23
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	4616      	mov	r6, r2
 800c7da:	d505      	bpl.n	800c7e8 <__swrite+0x1e>
 800c7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e0:	2302      	movs	r3, #2
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f000 f840 	bl	800c868 <_lseek_r>
 800c7e8:	89a3      	ldrh	r3, [r4, #12]
 800c7ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7f2:	81a3      	strh	r3, [r4, #12]
 800c7f4:	4632      	mov	r2, r6
 800c7f6:	463b      	mov	r3, r7
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fe:	f000 b857 	b.w	800c8b0 <_write_r>

0800c802 <__sseek>:
 800c802:	b510      	push	{r4, lr}
 800c804:	460c      	mov	r4, r1
 800c806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c80a:	f000 f82d 	bl	800c868 <_lseek_r>
 800c80e:	1c43      	adds	r3, r0, #1
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	bf15      	itete	ne
 800c814:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c81a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c81e:	81a3      	strheq	r3, [r4, #12]
 800c820:	bf18      	it	ne
 800c822:	81a3      	strhne	r3, [r4, #12]
 800c824:	bd10      	pop	{r4, pc}

0800c826 <__sclose>:
 800c826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c82a:	f000 b80d 	b.w	800c848 <_close_r>

0800c82e <memset>:
 800c82e:	4402      	add	r2, r0
 800c830:	4603      	mov	r3, r0
 800c832:	4293      	cmp	r3, r2
 800c834:	d100      	bne.n	800c838 <memset+0xa>
 800c836:	4770      	bx	lr
 800c838:	f803 1b01 	strb.w	r1, [r3], #1
 800c83c:	e7f9      	b.n	800c832 <memset+0x4>
	...

0800c840 <_localeconv_r>:
 800c840:	4800      	ldr	r0, [pc, #0]	@ (800c844 <_localeconv_r+0x4>)
 800c842:	4770      	bx	lr
 800c844:	20000658 	.word	0x20000658

0800c848 <_close_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d06      	ldr	r5, [pc, #24]	@ (800c864 <_close_r+0x1c>)
 800c84c:	2300      	movs	r3, #0
 800c84e:	4604      	mov	r4, r0
 800c850:	4608      	mov	r0, r1
 800c852:	602b      	str	r3, [r5, #0]
 800c854:	f7f8 fefe 	bl	8005654 <_close>
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	d102      	bne.n	800c862 <_close_r+0x1a>
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	b103      	cbz	r3, 800c862 <_close_r+0x1a>
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	20002094 	.word	0x20002094

0800c868 <_lseek_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4d07      	ldr	r5, [pc, #28]	@ (800c888 <_lseek_r+0x20>)
 800c86c:	4604      	mov	r4, r0
 800c86e:	4608      	mov	r0, r1
 800c870:	4611      	mov	r1, r2
 800c872:	2200      	movs	r2, #0
 800c874:	602a      	str	r2, [r5, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	f7f8 fef8 	bl	800566c <_lseek>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_lseek_r+0x1e>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_lseek_r+0x1e>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	20002094 	.word	0x20002094

0800c88c <_read_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	@ (800c8ac <_read_r+0x20>)
 800c890:	4604      	mov	r4, r0
 800c892:	4608      	mov	r0, r1
 800c894:	4611      	mov	r1, r2
 800c896:	2200      	movs	r2, #0
 800c898:	602a      	str	r2, [r5, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f7f8 febe 	bl	800561c <_read>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_read_r+0x1e>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_read_r+0x1e>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	20002094 	.word	0x20002094

0800c8b0 <_write_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	@ (800c8d0 <_write_r+0x20>)
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	4608      	mov	r0, r1
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	602a      	str	r2, [r5, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f7f8 feba 	bl	8005638 <_write>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d102      	bne.n	800c8ce <_write_r+0x1e>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	b103      	cbz	r3, 800c8ce <_write_r+0x1e>
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	20002094 	.word	0x20002094

0800c8d4 <__errno>:
 800c8d4:	4b01      	ldr	r3, [pc, #4]	@ (800c8dc <__errno+0x8>)
 800c8d6:	6818      	ldr	r0, [r3, #0]
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	20000518 	.word	0x20000518

0800c8e0 <__libc_init_array>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	4d0d      	ldr	r5, [pc, #52]	@ (800c918 <__libc_init_array+0x38>)
 800c8e4:	4c0d      	ldr	r4, [pc, #52]	@ (800c91c <__libc_init_array+0x3c>)
 800c8e6:	1b64      	subs	r4, r4, r5
 800c8e8:	10a4      	asrs	r4, r4, #2
 800c8ea:	2600      	movs	r6, #0
 800c8ec:	42a6      	cmp	r6, r4
 800c8ee:	d109      	bne.n	800c904 <__libc_init_array+0x24>
 800c8f0:	4d0b      	ldr	r5, [pc, #44]	@ (800c920 <__libc_init_array+0x40>)
 800c8f2:	4c0c      	ldr	r4, [pc, #48]	@ (800c924 <__libc_init_array+0x44>)
 800c8f4:	f003 fb76 	bl	800ffe4 <_init>
 800c8f8:	1b64      	subs	r4, r4, r5
 800c8fa:	10a4      	asrs	r4, r4, #2
 800c8fc:	2600      	movs	r6, #0
 800c8fe:	42a6      	cmp	r6, r4
 800c900:	d105      	bne.n	800c90e <__libc_init_array+0x2e>
 800c902:	bd70      	pop	{r4, r5, r6, pc}
 800c904:	f855 3b04 	ldr.w	r3, [r5], #4
 800c908:	4798      	blx	r3
 800c90a:	3601      	adds	r6, #1
 800c90c:	e7ee      	b.n	800c8ec <__libc_init_array+0xc>
 800c90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c912:	4798      	blx	r3
 800c914:	3601      	adds	r6, #1
 800c916:	e7f2      	b.n	800c8fe <__libc_init_array+0x1e>
 800c918:	0801086c 	.word	0x0801086c
 800c91c:	0801086c 	.word	0x0801086c
 800c920:	0801086c 	.word	0x0801086c
 800c924:	08010870 	.word	0x08010870

0800c928 <__retarget_lock_init_recursive>:
 800c928:	4770      	bx	lr

0800c92a <__retarget_lock_acquire_recursive>:
 800c92a:	4770      	bx	lr

0800c92c <__retarget_lock_release_recursive>:
 800c92c:	4770      	bx	lr

0800c92e <memcpy>:
 800c92e:	440a      	add	r2, r1
 800c930:	4291      	cmp	r1, r2
 800c932:	f100 33ff 	add.w	r3, r0, #4294967295
 800c936:	d100      	bne.n	800c93a <memcpy+0xc>
 800c938:	4770      	bx	lr
 800c93a:	b510      	push	{r4, lr}
 800c93c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c940:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c944:	4291      	cmp	r1, r2
 800c946:	d1f9      	bne.n	800c93c <memcpy+0xe>
 800c948:	bd10      	pop	{r4, pc}
	...

0800c94c <nanf>:
 800c94c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c954 <nanf+0x8>
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	7fc00000 	.word	0x7fc00000

0800c958 <quorem>:
 800c958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	6903      	ldr	r3, [r0, #16]
 800c95e:	690c      	ldr	r4, [r1, #16]
 800c960:	42a3      	cmp	r3, r4
 800c962:	4607      	mov	r7, r0
 800c964:	db7e      	blt.n	800ca64 <quorem+0x10c>
 800c966:	3c01      	subs	r4, #1
 800c968:	f101 0814 	add.w	r8, r1, #20
 800c96c:	00a3      	lsls	r3, r4, #2
 800c96e:	f100 0514 	add.w	r5, r0, #20
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c978:	9301      	str	r3, [sp, #4]
 800c97a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c97e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c982:	3301      	adds	r3, #1
 800c984:	429a      	cmp	r2, r3
 800c986:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c98a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c98e:	d32e      	bcc.n	800c9ee <quorem+0x96>
 800c990:	f04f 0a00 	mov.w	sl, #0
 800c994:	46c4      	mov	ip, r8
 800c996:	46ae      	mov	lr, r5
 800c998:	46d3      	mov	fp, sl
 800c99a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c99e:	b298      	uxth	r0, r3
 800c9a0:	fb06 a000 	mla	r0, r6, r0, sl
 800c9a4:	0c02      	lsrs	r2, r0, #16
 800c9a6:	0c1b      	lsrs	r3, r3, #16
 800c9a8:	fb06 2303 	mla	r3, r6, r3, r2
 800c9ac:	f8de 2000 	ldr.w	r2, [lr]
 800c9b0:	b280      	uxth	r0, r0
 800c9b2:	b292      	uxth	r2, r2
 800c9b4:	1a12      	subs	r2, r2, r0
 800c9b6:	445a      	add	r2, fp
 800c9b8:	f8de 0000 	ldr.w	r0, [lr]
 800c9bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c9c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c9ca:	b292      	uxth	r2, r2
 800c9cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c9d0:	45e1      	cmp	r9, ip
 800c9d2:	f84e 2b04 	str.w	r2, [lr], #4
 800c9d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c9da:	d2de      	bcs.n	800c99a <quorem+0x42>
 800c9dc:	9b00      	ldr	r3, [sp, #0]
 800c9de:	58eb      	ldr	r3, [r5, r3]
 800c9e0:	b92b      	cbnz	r3, 800c9ee <quorem+0x96>
 800c9e2:	9b01      	ldr	r3, [sp, #4]
 800c9e4:	3b04      	subs	r3, #4
 800c9e6:	429d      	cmp	r5, r3
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	d32f      	bcc.n	800ca4c <quorem+0xf4>
 800c9ec:	613c      	str	r4, [r7, #16]
 800c9ee:	4638      	mov	r0, r7
 800c9f0:	f001 f9c6 	bl	800dd80 <__mcmp>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	db25      	blt.n	800ca44 <quorem+0xec>
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca00:	f8d1 c000 	ldr.w	ip, [r1]
 800ca04:	fa1f fe82 	uxth.w	lr, r2
 800ca08:	fa1f f38c 	uxth.w	r3, ip
 800ca0c:	eba3 030e 	sub.w	r3, r3, lr
 800ca10:	4403      	add	r3, r0
 800ca12:	0c12      	lsrs	r2, r2, #16
 800ca14:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca22:	45c1      	cmp	r9, r8
 800ca24:	f841 3b04 	str.w	r3, [r1], #4
 800ca28:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca2c:	d2e6      	bcs.n	800c9fc <quorem+0xa4>
 800ca2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca36:	b922      	cbnz	r2, 800ca42 <quorem+0xea>
 800ca38:	3b04      	subs	r3, #4
 800ca3a:	429d      	cmp	r5, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	d30b      	bcc.n	800ca58 <quorem+0x100>
 800ca40:	613c      	str	r4, [r7, #16]
 800ca42:	3601      	adds	r6, #1
 800ca44:	4630      	mov	r0, r6
 800ca46:	b003      	add	sp, #12
 800ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4c:	6812      	ldr	r2, [r2, #0]
 800ca4e:	3b04      	subs	r3, #4
 800ca50:	2a00      	cmp	r2, #0
 800ca52:	d1cb      	bne.n	800c9ec <quorem+0x94>
 800ca54:	3c01      	subs	r4, #1
 800ca56:	e7c6      	b.n	800c9e6 <quorem+0x8e>
 800ca58:	6812      	ldr	r2, [r2, #0]
 800ca5a:	3b04      	subs	r3, #4
 800ca5c:	2a00      	cmp	r2, #0
 800ca5e:	d1ef      	bne.n	800ca40 <quorem+0xe8>
 800ca60:	3c01      	subs	r4, #1
 800ca62:	e7ea      	b.n	800ca3a <quorem+0xe2>
 800ca64:	2000      	movs	r0, #0
 800ca66:	e7ee      	b.n	800ca46 <quorem+0xee>

0800ca68 <_dtoa_r>:
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	69c7      	ldr	r7, [r0, #28]
 800ca6e:	b097      	sub	sp, #92	@ 0x5c
 800ca70:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ca74:	ec55 4b10 	vmov	r4, r5, d0
 800ca78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ca7a:	9107      	str	r1, [sp, #28]
 800ca7c:	4681      	mov	r9, r0
 800ca7e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca80:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca82:	b97f      	cbnz	r7, 800caa4 <_dtoa_r+0x3c>
 800ca84:	2010      	movs	r0, #16
 800ca86:	f000 fe09 	bl	800d69c <malloc>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ca90:	b920      	cbnz	r0, 800ca9c <_dtoa_r+0x34>
 800ca92:	4ba9      	ldr	r3, [pc, #676]	@ (800cd38 <_dtoa_r+0x2d0>)
 800ca94:	21ef      	movs	r1, #239	@ 0xef
 800ca96:	48a9      	ldr	r0, [pc, #676]	@ (800cd3c <_dtoa_r+0x2d4>)
 800ca98:	f002 fc2e 	bl	800f2f8 <__assert_func>
 800ca9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800caa0:	6007      	str	r7, [r0, #0]
 800caa2:	60c7      	str	r7, [r0, #12]
 800caa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800caa8:	6819      	ldr	r1, [r3, #0]
 800caaa:	b159      	cbz	r1, 800cac4 <_dtoa_r+0x5c>
 800caac:	685a      	ldr	r2, [r3, #4]
 800caae:	604a      	str	r2, [r1, #4]
 800cab0:	2301      	movs	r3, #1
 800cab2:	4093      	lsls	r3, r2
 800cab4:	608b      	str	r3, [r1, #8]
 800cab6:	4648      	mov	r0, r9
 800cab8:	f000 fee6 	bl	800d888 <_Bfree>
 800cabc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cac0:	2200      	movs	r2, #0
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	1e2b      	subs	r3, r5, #0
 800cac6:	bfb9      	ittee	lt
 800cac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cacc:	9305      	strlt	r3, [sp, #20]
 800cace:	2300      	movge	r3, #0
 800cad0:	6033      	strge	r3, [r6, #0]
 800cad2:	9f05      	ldr	r7, [sp, #20]
 800cad4:	4b9a      	ldr	r3, [pc, #616]	@ (800cd40 <_dtoa_r+0x2d8>)
 800cad6:	bfbc      	itt	lt
 800cad8:	2201      	movlt	r2, #1
 800cada:	6032      	strlt	r2, [r6, #0]
 800cadc:	43bb      	bics	r3, r7
 800cade:	d112      	bne.n	800cb06 <_dtoa_r+0x9e>
 800cae0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800caec:	4323      	orrs	r3, r4
 800caee:	f000 855a 	beq.w	800d5a6 <_dtoa_r+0xb3e>
 800caf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800caf4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cd54 <_dtoa_r+0x2ec>
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f000 855c 	beq.w	800d5b6 <_dtoa_r+0xb4e>
 800cafe:	f10a 0303 	add.w	r3, sl, #3
 800cb02:	f000 bd56 	b.w	800d5b2 <_dtoa_r+0xb4a>
 800cb06:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	ec51 0b17 	vmov	r0, r1, d7
 800cb10:	2300      	movs	r3, #0
 800cb12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cb16:	f7f3 ffff 	bl	8000b18 <__aeabi_dcmpeq>
 800cb1a:	4680      	mov	r8, r0
 800cb1c:	b158      	cbz	r0, 800cb36 <_dtoa_r+0xce>
 800cb1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cb20:	2301      	movs	r3, #1
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cb26:	b113      	cbz	r3, 800cb2e <_dtoa_r+0xc6>
 800cb28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cb2a:	4b86      	ldr	r3, [pc, #536]	@ (800cd44 <_dtoa_r+0x2dc>)
 800cb2c:	6013      	str	r3, [r2, #0]
 800cb2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cd58 <_dtoa_r+0x2f0>
 800cb32:	f000 bd40 	b.w	800d5b6 <_dtoa_r+0xb4e>
 800cb36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cb3a:	aa14      	add	r2, sp, #80	@ 0x50
 800cb3c:	a915      	add	r1, sp, #84	@ 0x54
 800cb3e:	4648      	mov	r0, r9
 800cb40:	f001 fa3e 	bl	800dfc0 <__d2b>
 800cb44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cb48:	9002      	str	r0, [sp, #8]
 800cb4a:	2e00      	cmp	r6, #0
 800cb4c:	d078      	beq.n	800cc40 <_dtoa_r+0x1d8>
 800cb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cb54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cb5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cb64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cb68:	4619      	mov	r1, r3
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4b76      	ldr	r3, [pc, #472]	@ (800cd48 <_dtoa_r+0x2e0>)
 800cb6e:	f7f3 fbb3 	bl	80002d8 <__aeabi_dsub>
 800cb72:	a36b      	add	r3, pc, #428	@ (adr r3, 800cd20 <_dtoa_r+0x2b8>)
 800cb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb78:	f7f3 fd66 	bl	8000648 <__aeabi_dmul>
 800cb7c:	a36a      	add	r3, pc, #424	@ (adr r3, 800cd28 <_dtoa_r+0x2c0>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	f7f3 fbab 	bl	80002dc <__adddf3>
 800cb86:	4604      	mov	r4, r0
 800cb88:	4630      	mov	r0, r6
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	f7f3 fcf2 	bl	8000574 <__aeabi_i2d>
 800cb90:	a367      	add	r3, pc, #412	@ (adr r3, 800cd30 <_dtoa_r+0x2c8>)
 800cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb96:	f7f3 fd57 	bl	8000648 <__aeabi_dmul>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	4620      	mov	r0, r4
 800cba0:	4629      	mov	r1, r5
 800cba2:	f7f3 fb9b 	bl	80002dc <__adddf3>
 800cba6:	4604      	mov	r4, r0
 800cba8:	460d      	mov	r5, r1
 800cbaa:	f7f3 fffd 	bl	8000ba8 <__aeabi_d2iz>
 800cbae:	2200      	movs	r2, #0
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f7f3 ffb8 	bl	8000b2c <__aeabi_dcmplt>
 800cbbc:	b140      	cbz	r0, 800cbd0 <_dtoa_r+0x168>
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	f7f3 fcd8 	bl	8000574 <__aeabi_i2d>
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	462b      	mov	r3, r5
 800cbc8:	f7f3 ffa6 	bl	8000b18 <__aeabi_dcmpeq>
 800cbcc:	b900      	cbnz	r0, 800cbd0 <_dtoa_r+0x168>
 800cbce:	3f01      	subs	r7, #1
 800cbd0:	2f16      	cmp	r7, #22
 800cbd2:	d852      	bhi.n	800cc7a <_dtoa_r+0x212>
 800cbd4:	4b5d      	ldr	r3, [pc, #372]	@ (800cd4c <_dtoa_r+0x2e4>)
 800cbd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cbe2:	f7f3 ffa3 	bl	8000b2c <__aeabi_dcmplt>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d049      	beq.n	800cc7e <_dtoa_r+0x216>
 800cbea:	3f01      	subs	r7, #1
 800cbec:	2300      	movs	r3, #0
 800cbee:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cbf2:	1b9b      	subs	r3, r3, r6
 800cbf4:	1e5a      	subs	r2, r3, #1
 800cbf6:	bf45      	ittet	mi
 800cbf8:	f1c3 0301 	rsbmi	r3, r3, #1
 800cbfc:	9300      	strmi	r3, [sp, #0]
 800cbfe:	2300      	movpl	r3, #0
 800cc00:	2300      	movmi	r3, #0
 800cc02:	9206      	str	r2, [sp, #24]
 800cc04:	bf54      	ite	pl
 800cc06:	9300      	strpl	r3, [sp, #0]
 800cc08:	9306      	strmi	r3, [sp, #24]
 800cc0a:	2f00      	cmp	r7, #0
 800cc0c:	db39      	blt.n	800cc82 <_dtoa_r+0x21a>
 800cc0e:	9b06      	ldr	r3, [sp, #24]
 800cc10:	970d      	str	r7, [sp, #52]	@ 0x34
 800cc12:	443b      	add	r3, r7
 800cc14:	9306      	str	r3, [sp, #24]
 800cc16:	2300      	movs	r3, #0
 800cc18:	9308      	str	r3, [sp, #32]
 800cc1a:	9b07      	ldr	r3, [sp, #28]
 800cc1c:	2b09      	cmp	r3, #9
 800cc1e:	d863      	bhi.n	800cce8 <_dtoa_r+0x280>
 800cc20:	2b05      	cmp	r3, #5
 800cc22:	bfc4      	itt	gt
 800cc24:	3b04      	subgt	r3, #4
 800cc26:	9307      	strgt	r3, [sp, #28]
 800cc28:	9b07      	ldr	r3, [sp, #28]
 800cc2a:	f1a3 0302 	sub.w	r3, r3, #2
 800cc2e:	bfcc      	ite	gt
 800cc30:	2400      	movgt	r4, #0
 800cc32:	2401      	movle	r4, #1
 800cc34:	2b03      	cmp	r3, #3
 800cc36:	d863      	bhi.n	800cd00 <_dtoa_r+0x298>
 800cc38:	e8df f003 	tbb	[pc, r3]
 800cc3c:	2b375452 	.word	0x2b375452
 800cc40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cc44:	441e      	add	r6, r3
 800cc46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cc4a:	2b20      	cmp	r3, #32
 800cc4c:	bfc1      	itttt	gt
 800cc4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cc52:	409f      	lslgt	r7, r3
 800cc54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cc58:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cc5c:	bfd6      	itet	le
 800cc5e:	f1c3 0320 	rsble	r3, r3, #32
 800cc62:	ea47 0003 	orrgt.w	r0, r7, r3
 800cc66:	fa04 f003 	lslle.w	r0, r4, r3
 800cc6a:	f7f3 fc73 	bl	8000554 <__aeabi_ui2d>
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cc74:	3e01      	subs	r6, #1
 800cc76:	9212      	str	r2, [sp, #72]	@ 0x48
 800cc78:	e776      	b.n	800cb68 <_dtoa_r+0x100>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e7b7      	b.n	800cbee <_dtoa_r+0x186>
 800cc7e:	9010      	str	r0, [sp, #64]	@ 0x40
 800cc80:	e7b6      	b.n	800cbf0 <_dtoa_r+0x188>
 800cc82:	9b00      	ldr	r3, [sp, #0]
 800cc84:	1bdb      	subs	r3, r3, r7
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	427b      	negs	r3, r7
 800cc8a:	9308      	str	r3, [sp, #32]
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cc90:	e7c3      	b.n	800cc1a <_dtoa_r+0x1b2>
 800cc92:	2301      	movs	r3, #1
 800cc94:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc98:	eb07 0b03 	add.w	fp, r7, r3
 800cc9c:	f10b 0301 	add.w	r3, fp, #1
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	9303      	str	r3, [sp, #12]
 800cca4:	bfb8      	it	lt
 800cca6:	2301      	movlt	r3, #1
 800cca8:	e006      	b.n	800ccb8 <_dtoa_r+0x250>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	dd28      	ble.n	800cd06 <_dtoa_r+0x29e>
 800ccb4:	469b      	mov	fp, r3
 800ccb6:	9303      	str	r3, [sp, #12]
 800ccb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	2204      	movs	r2, #4
 800ccc0:	f102 0514 	add.w	r5, r2, #20
 800ccc4:	429d      	cmp	r5, r3
 800ccc6:	d926      	bls.n	800cd16 <_dtoa_r+0x2ae>
 800ccc8:	6041      	str	r1, [r0, #4]
 800ccca:	4648      	mov	r0, r9
 800cccc:	f000 fd9c 	bl	800d808 <_Balloc>
 800ccd0:	4682      	mov	sl, r0
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d142      	bne.n	800cd5c <_dtoa_r+0x2f4>
 800ccd6:	4b1e      	ldr	r3, [pc, #120]	@ (800cd50 <_dtoa_r+0x2e8>)
 800ccd8:	4602      	mov	r2, r0
 800ccda:	f240 11af 	movw	r1, #431	@ 0x1af
 800ccde:	e6da      	b.n	800ca96 <_dtoa_r+0x2e>
 800cce0:	2300      	movs	r3, #0
 800cce2:	e7e3      	b.n	800ccac <_dtoa_r+0x244>
 800cce4:	2300      	movs	r3, #0
 800cce6:	e7d5      	b.n	800cc94 <_dtoa_r+0x22c>
 800cce8:	2401      	movs	r4, #1
 800ccea:	2300      	movs	r3, #0
 800ccec:	9307      	str	r3, [sp, #28]
 800ccee:	9409      	str	r4, [sp, #36]	@ 0x24
 800ccf0:	f04f 3bff 	mov.w	fp, #4294967295
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f8cd b00c 	str.w	fp, [sp, #12]
 800ccfa:	2312      	movs	r3, #18
 800ccfc:	920c      	str	r2, [sp, #48]	@ 0x30
 800ccfe:	e7db      	b.n	800ccb8 <_dtoa_r+0x250>
 800cd00:	2301      	movs	r3, #1
 800cd02:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd04:	e7f4      	b.n	800ccf0 <_dtoa_r+0x288>
 800cd06:	f04f 0b01 	mov.w	fp, #1
 800cd0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800cd0e:	465b      	mov	r3, fp
 800cd10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cd14:	e7d0      	b.n	800ccb8 <_dtoa_r+0x250>
 800cd16:	3101      	adds	r1, #1
 800cd18:	0052      	lsls	r2, r2, #1
 800cd1a:	e7d1      	b.n	800ccc0 <_dtoa_r+0x258>
 800cd1c:	f3af 8000 	nop.w
 800cd20:	636f4361 	.word	0x636f4361
 800cd24:	3fd287a7 	.word	0x3fd287a7
 800cd28:	8b60c8b3 	.word	0x8b60c8b3
 800cd2c:	3fc68a28 	.word	0x3fc68a28
 800cd30:	509f79fb 	.word	0x509f79fb
 800cd34:	3fd34413 	.word	0x3fd34413
 800cd38:	0801047e 	.word	0x0801047e
 800cd3c:	08010495 	.word	0x08010495
 800cd40:	7ff00000 	.word	0x7ff00000
 800cd44:	08010449 	.word	0x08010449
 800cd48:	3ff80000 	.word	0x3ff80000
 800cd4c:	08010648 	.word	0x08010648
 800cd50:	080104ed 	.word	0x080104ed
 800cd54:	0801047a 	.word	0x0801047a
 800cd58:	08010448 	.word	0x08010448
 800cd5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd60:	6018      	str	r0, [r3, #0]
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	2b0e      	cmp	r3, #14
 800cd66:	f200 80a1 	bhi.w	800ceac <_dtoa_r+0x444>
 800cd6a:	2c00      	cmp	r4, #0
 800cd6c:	f000 809e 	beq.w	800ceac <_dtoa_r+0x444>
 800cd70:	2f00      	cmp	r7, #0
 800cd72:	dd33      	ble.n	800cddc <_dtoa_r+0x374>
 800cd74:	4b9c      	ldr	r3, [pc, #624]	@ (800cfe8 <_dtoa_r+0x580>)
 800cd76:	f007 020f 	and.w	r2, r7, #15
 800cd7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd7e:	ed93 7b00 	vldr	d7, [r3]
 800cd82:	05f8      	lsls	r0, r7, #23
 800cd84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cd88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cd8c:	d516      	bpl.n	800cdbc <_dtoa_r+0x354>
 800cd8e:	4b97      	ldr	r3, [pc, #604]	@ (800cfec <_dtoa_r+0x584>)
 800cd90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cd94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd98:	f7f3 fd80 	bl	800089c <__aeabi_ddiv>
 800cd9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cda0:	f004 040f 	and.w	r4, r4, #15
 800cda4:	2603      	movs	r6, #3
 800cda6:	4d91      	ldr	r5, [pc, #580]	@ (800cfec <_dtoa_r+0x584>)
 800cda8:	b954      	cbnz	r4, 800cdc0 <_dtoa_r+0x358>
 800cdaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cdae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdb2:	f7f3 fd73 	bl	800089c <__aeabi_ddiv>
 800cdb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdba:	e028      	b.n	800ce0e <_dtoa_r+0x3a6>
 800cdbc:	2602      	movs	r6, #2
 800cdbe:	e7f2      	b.n	800cda6 <_dtoa_r+0x33e>
 800cdc0:	07e1      	lsls	r1, r4, #31
 800cdc2:	d508      	bpl.n	800cdd6 <_dtoa_r+0x36e>
 800cdc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cdc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cdcc:	f7f3 fc3c 	bl	8000648 <__aeabi_dmul>
 800cdd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cdd4:	3601      	adds	r6, #1
 800cdd6:	1064      	asrs	r4, r4, #1
 800cdd8:	3508      	adds	r5, #8
 800cdda:	e7e5      	b.n	800cda8 <_dtoa_r+0x340>
 800cddc:	f000 80af 	beq.w	800cf3e <_dtoa_r+0x4d6>
 800cde0:	427c      	negs	r4, r7
 800cde2:	4b81      	ldr	r3, [pc, #516]	@ (800cfe8 <_dtoa_r+0x580>)
 800cde4:	4d81      	ldr	r5, [pc, #516]	@ (800cfec <_dtoa_r+0x584>)
 800cde6:	f004 020f 	and.w	r2, r4, #15
 800cdea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cdf6:	f7f3 fc27 	bl	8000648 <__aeabi_dmul>
 800cdfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdfe:	1124      	asrs	r4, r4, #4
 800ce00:	2300      	movs	r3, #0
 800ce02:	2602      	movs	r6, #2
 800ce04:	2c00      	cmp	r4, #0
 800ce06:	f040 808f 	bne.w	800cf28 <_dtoa_r+0x4c0>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1d3      	bne.n	800cdb6 <_dtoa_r+0x34e>
 800ce0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f000 8094 	beq.w	800cf42 <_dtoa_r+0x4da>
 800ce1a:	4b75      	ldr	r3, [pc, #468]	@ (800cff0 <_dtoa_r+0x588>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4620      	mov	r0, r4
 800ce20:	4629      	mov	r1, r5
 800ce22:	f7f3 fe83 	bl	8000b2c <__aeabi_dcmplt>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	f000 808b 	beq.w	800cf42 <_dtoa_r+0x4da>
 800ce2c:	9b03      	ldr	r3, [sp, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 8087 	beq.w	800cf42 <_dtoa_r+0x4da>
 800ce34:	f1bb 0f00 	cmp.w	fp, #0
 800ce38:	dd34      	ble.n	800cea4 <_dtoa_r+0x43c>
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	4b6d      	ldr	r3, [pc, #436]	@ (800cff4 <_dtoa_r+0x58c>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	4629      	mov	r1, r5
 800ce42:	f7f3 fc01 	bl	8000648 <__aeabi_dmul>
 800ce46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce4a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ce4e:	3601      	adds	r6, #1
 800ce50:	465c      	mov	r4, fp
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7f3 fb8e 	bl	8000574 <__aeabi_i2d>
 800ce58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce5c:	f7f3 fbf4 	bl	8000648 <__aeabi_dmul>
 800ce60:	4b65      	ldr	r3, [pc, #404]	@ (800cff8 <_dtoa_r+0x590>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	f7f3 fa3a 	bl	80002dc <__adddf3>
 800ce68:	4605      	mov	r5, r0
 800ce6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ce6e:	2c00      	cmp	r4, #0
 800ce70:	d16a      	bne.n	800cf48 <_dtoa_r+0x4e0>
 800ce72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce76:	4b61      	ldr	r3, [pc, #388]	@ (800cffc <_dtoa_r+0x594>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f7f3 fa2d 	bl	80002d8 <__aeabi_dsub>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce86:	462a      	mov	r2, r5
 800ce88:	4633      	mov	r3, r6
 800ce8a:	f7f3 fe6d 	bl	8000b68 <__aeabi_dcmpgt>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f040 8298 	bne.w	800d3c4 <_dtoa_r+0x95c>
 800ce94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ce9e:	f7f3 fe45 	bl	8000b2c <__aeabi_dcmplt>
 800cea2:	bb38      	cbnz	r0, 800cef4 <_dtoa_r+0x48c>
 800cea4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cea8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ceac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f2c0 8157 	blt.w	800d162 <_dtoa_r+0x6fa>
 800ceb4:	2f0e      	cmp	r7, #14
 800ceb6:	f300 8154 	bgt.w	800d162 <_dtoa_r+0x6fa>
 800ceba:	4b4b      	ldr	r3, [pc, #300]	@ (800cfe8 <_dtoa_r+0x580>)
 800cebc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cec0:	ed93 7b00 	vldr	d7, [r3]
 800cec4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	ed8d 7b00 	vstr	d7, [sp]
 800cecc:	f280 80e5 	bge.w	800d09a <_dtoa_r+0x632>
 800ced0:	9b03      	ldr	r3, [sp, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f300 80e1 	bgt.w	800d09a <_dtoa_r+0x632>
 800ced8:	d10c      	bne.n	800cef4 <_dtoa_r+0x48c>
 800ceda:	4b48      	ldr	r3, [pc, #288]	@ (800cffc <_dtoa_r+0x594>)
 800cedc:	2200      	movs	r2, #0
 800cede:	ec51 0b17 	vmov	r0, r1, d7
 800cee2:	f7f3 fbb1 	bl	8000648 <__aeabi_dmul>
 800cee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ceea:	f7f3 fe33 	bl	8000b54 <__aeabi_dcmpge>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	f000 8266 	beq.w	800d3c0 <_dtoa_r+0x958>
 800cef4:	2400      	movs	r4, #0
 800cef6:	4625      	mov	r5, r4
 800cef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cefa:	4656      	mov	r6, sl
 800cefc:	ea6f 0803 	mvn.w	r8, r3
 800cf00:	2700      	movs	r7, #0
 800cf02:	4621      	mov	r1, r4
 800cf04:	4648      	mov	r0, r9
 800cf06:	f000 fcbf 	bl	800d888 <_Bfree>
 800cf0a:	2d00      	cmp	r5, #0
 800cf0c:	f000 80bd 	beq.w	800d08a <_dtoa_r+0x622>
 800cf10:	b12f      	cbz	r7, 800cf1e <_dtoa_r+0x4b6>
 800cf12:	42af      	cmp	r7, r5
 800cf14:	d003      	beq.n	800cf1e <_dtoa_r+0x4b6>
 800cf16:	4639      	mov	r1, r7
 800cf18:	4648      	mov	r0, r9
 800cf1a:	f000 fcb5 	bl	800d888 <_Bfree>
 800cf1e:	4629      	mov	r1, r5
 800cf20:	4648      	mov	r0, r9
 800cf22:	f000 fcb1 	bl	800d888 <_Bfree>
 800cf26:	e0b0      	b.n	800d08a <_dtoa_r+0x622>
 800cf28:	07e2      	lsls	r2, r4, #31
 800cf2a:	d505      	bpl.n	800cf38 <_dtoa_r+0x4d0>
 800cf2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf30:	f7f3 fb8a 	bl	8000648 <__aeabi_dmul>
 800cf34:	3601      	adds	r6, #1
 800cf36:	2301      	movs	r3, #1
 800cf38:	1064      	asrs	r4, r4, #1
 800cf3a:	3508      	adds	r5, #8
 800cf3c:	e762      	b.n	800ce04 <_dtoa_r+0x39c>
 800cf3e:	2602      	movs	r6, #2
 800cf40:	e765      	b.n	800ce0e <_dtoa_r+0x3a6>
 800cf42:	9c03      	ldr	r4, [sp, #12]
 800cf44:	46b8      	mov	r8, r7
 800cf46:	e784      	b.n	800ce52 <_dtoa_r+0x3ea>
 800cf48:	4b27      	ldr	r3, [pc, #156]	@ (800cfe8 <_dtoa_r+0x580>)
 800cf4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf54:	4454      	add	r4, sl
 800cf56:	2900      	cmp	r1, #0
 800cf58:	d054      	beq.n	800d004 <_dtoa_r+0x59c>
 800cf5a:	4929      	ldr	r1, [pc, #164]	@ (800d000 <_dtoa_r+0x598>)
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	f7f3 fc9d 	bl	800089c <__aeabi_ddiv>
 800cf62:	4633      	mov	r3, r6
 800cf64:	462a      	mov	r2, r5
 800cf66:	f7f3 f9b7 	bl	80002d8 <__aeabi_dsub>
 800cf6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cf6e:	4656      	mov	r6, sl
 800cf70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf74:	f7f3 fe18 	bl	8000ba8 <__aeabi_d2iz>
 800cf78:	4605      	mov	r5, r0
 800cf7a:	f7f3 fafb 	bl	8000574 <__aeabi_i2d>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf86:	f7f3 f9a7 	bl	80002d8 <__aeabi_dsub>
 800cf8a:	3530      	adds	r5, #48	@ 0x30
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf94:	f806 5b01 	strb.w	r5, [r6], #1
 800cf98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cf9c:	f7f3 fdc6 	bl	8000b2c <__aeabi_dcmplt>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d172      	bne.n	800d08a <_dtoa_r+0x622>
 800cfa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfa8:	4911      	ldr	r1, [pc, #68]	@ (800cff0 <_dtoa_r+0x588>)
 800cfaa:	2000      	movs	r0, #0
 800cfac:	f7f3 f994 	bl	80002d8 <__aeabi_dsub>
 800cfb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cfb4:	f7f3 fdba 	bl	8000b2c <__aeabi_dcmplt>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	f040 80b4 	bne.w	800d126 <_dtoa_r+0x6be>
 800cfbe:	42a6      	cmp	r6, r4
 800cfc0:	f43f af70 	beq.w	800cea4 <_dtoa_r+0x43c>
 800cfc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cfc8:	4b0a      	ldr	r3, [pc, #40]	@ (800cff4 <_dtoa_r+0x58c>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f7f3 fb3c 	bl	8000648 <__aeabi_dmul>
 800cfd0:	4b08      	ldr	r3, [pc, #32]	@ (800cff4 <_dtoa_r+0x58c>)
 800cfd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfdc:	f7f3 fb34 	bl	8000648 <__aeabi_dmul>
 800cfe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfe4:	e7c4      	b.n	800cf70 <_dtoa_r+0x508>
 800cfe6:	bf00      	nop
 800cfe8:	08010648 	.word	0x08010648
 800cfec:	08010620 	.word	0x08010620
 800cff0:	3ff00000 	.word	0x3ff00000
 800cff4:	40240000 	.word	0x40240000
 800cff8:	401c0000 	.word	0x401c0000
 800cffc:	40140000 	.word	0x40140000
 800d000:	3fe00000 	.word	0x3fe00000
 800d004:	4631      	mov	r1, r6
 800d006:	4628      	mov	r0, r5
 800d008:	f7f3 fb1e 	bl	8000648 <__aeabi_dmul>
 800d00c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d010:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d012:	4656      	mov	r6, sl
 800d014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d018:	f7f3 fdc6 	bl	8000ba8 <__aeabi_d2iz>
 800d01c:	4605      	mov	r5, r0
 800d01e:	f7f3 faa9 	bl	8000574 <__aeabi_i2d>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d02a:	f7f3 f955 	bl	80002d8 <__aeabi_dsub>
 800d02e:	3530      	adds	r5, #48	@ 0x30
 800d030:	f806 5b01 	strb.w	r5, [r6], #1
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	42a6      	cmp	r6, r4
 800d03a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d03e:	f04f 0200 	mov.w	r2, #0
 800d042:	d124      	bne.n	800d08e <_dtoa_r+0x626>
 800d044:	4baf      	ldr	r3, [pc, #700]	@ (800d304 <_dtoa_r+0x89c>)
 800d046:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d04a:	f7f3 f947 	bl	80002dc <__adddf3>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d056:	f7f3 fd87 	bl	8000b68 <__aeabi_dcmpgt>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d163      	bne.n	800d126 <_dtoa_r+0x6be>
 800d05e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d062:	49a8      	ldr	r1, [pc, #672]	@ (800d304 <_dtoa_r+0x89c>)
 800d064:	2000      	movs	r0, #0
 800d066:	f7f3 f937 	bl	80002d8 <__aeabi_dsub>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d072:	f7f3 fd5b 	bl	8000b2c <__aeabi_dcmplt>
 800d076:	2800      	cmp	r0, #0
 800d078:	f43f af14 	beq.w	800cea4 <_dtoa_r+0x43c>
 800d07c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d07e:	1e73      	subs	r3, r6, #1
 800d080:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d082:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d086:	2b30      	cmp	r3, #48	@ 0x30
 800d088:	d0f8      	beq.n	800d07c <_dtoa_r+0x614>
 800d08a:	4647      	mov	r7, r8
 800d08c:	e03b      	b.n	800d106 <_dtoa_r+0x69e>
 800d08e:	4b9e      	ldr	r3, [pc, #632]	@ (800d308 <_dtoa_r+0x8a0>)
 800d090:	f7f3 fada 	bl	8000648 <__aeabi_dmul>
 800d094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d098:	e7bc      	b.n	800d014 <_dtoa_r+0x5ac>
 800d09a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d09e:	4656      	mov	r6, sl
 800d0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	f7f3 fbf8 	bl	800089c <__aeabi_ddiv>
 800d0ac:	f7f3 fd7c 	bl	8000ba8 <__aeabi_d2iz>
 800d0b0:	4680      	mov	r8, r0
 800d0b2:	f7f3 fa5f 	bl	8000574 <__aeabi_i2d>
 800d0b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ba:	f7f3 fac5 	bl	8000648 <__aeabi_dmul>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d0ca:	f7f3 f905 	bl	80002d8 <__aeabi_dsub>
 800d0ce:	f806 4b01 	strb.w	r4, [r6], #1
 800d0d2:	9d03      	ldr	r5, [sp, #12]
 800d0d4:	eba6 040a 	sub.w	r4, r6, sl
 800d0d8:	42a5      	cmp	r5, r4
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	d133      	bne.n	800d148 <_dtoa_r+0x6e0>
 800d0e0:	f7f3 f8fc 	bl	80002dc <__adddf3>
 800d0e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	460d      	mov	r5, r1
 800d0ec:	f7f3 fd3c 	bl	8000b68 <__aeabi_dcmpgt>
 800d0f0:	b9c0      	cbnz	r0, 800d124 <_dtoa_r+0x6bc>
 800d0f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	f7f3 fd0d 	bl	8000b18 <__aeabi_dcmpeq>
 800d0fe:	b110      	cbz	r0, 800d106 <_dtoa_r+0x69e>
 800d100:	f018 0f01 	tst.w	r8, #1
 800d104:	d10e      	bne.n	800d124 <_dtoa_r+0x6bc>
 800d106:	9902      	ldr	r1, [sp, #8]
 800d108:	4648      	mov	r0, r9
 800d10a:	f000 fbbd 	bl	800d888 <_Bfree>
 800d10e:	2300      	movs	r3, #0
 800d110:	7033      	strb	r3, [r6, #0]
 800d112:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d114:	3701      	adds	r7, #1
 800d116:	601f      	str	r7, [r3, #0]
 800d118:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f000 824b 	beq.w	800d5b6 <_dtoa_r+0xb4e>
 800d120:	601e      	str	r6, [r3, #0]
 800d122:	e248      	b.n	800d5b6 <_dtoa_r+0xb4e>
 800d124:	46b8      	mov	r8, r7
 800d126:	4633      	mov	r3, r6
 800d128:	461e      	mov	r6, r3
 800d12a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d12e:	2a39      	cmp	r2, #57	@ 0x39
 800d130:	d106      	bne.n	800d140 <_dtoa_r+0x6d8>
 800d132:	459a      	cmp	sl, r3
 800d134:	d1f8      	bne.n	800d128 <_dtoa_r+0x6c0>
 800d136:	2230      	movs	r2, #48	@ 0x30
 800d138:	f108 0801 	add.w	r8, r8, #1
 800d13c:	f88a 2000 	strb.w	r2, [sl]
 800d140:	781a      	ldrb	r2, [r3, #0]
 800d142:	3201      	adds	r2, #1
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	e7a0      	b.n	800d08a <_dtoa_r+0x622>
 800d148:	4b6f      	ldr	r3, [pc, #444]	@ (800d308 <_dtoa_r+0x8a0>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	f7f3 fa7c 	bl	8000648 <__aeabi_dmul>
 800d150:	2200      	movs	r2, #0
 800d152:	2300      	movs	r3, #0
 800d154:	4604      	mov	r4, r0
 800d156:	460d      	mov	r5, r1
 800d158:	f7f3 fcde 	bl	8000b18 <__aeabi_dcmpeq>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d09f      	beq.n	800d0a0 <_dtoa_r+0x638>
 800d160:	e7d1      	b.n	800d106 <_dtoa_r+0x69e>
 800d162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d164:	2a00      	cmp	r2, #0
 800d166:	f000 80ea 	beq.w	800d33e <_dtoa_r+0x8d6>
 800d16a:	9a07      	ldr	r2, [sp, #28]
 800d16c:	2a01      	cmp	r2, #1
 800d16e:	f300 80cd 	bgt.w	800d30c <_dtoa_r+0x8a4>
 800d172:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d174:	2a00      	cmp	r2, #0
 800d176:	f000 80c1 	beq.w	800d2fc <_dtoa_r+0x894>
 800d17a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d17e:	9c08      	ldr	r4, [sp, #32]
 800d180:	9e00      	ldr	r6, [sp, #0]
 800d182:	9a00      	ldr	r2, [sp, #0]
 800d184:	441a      	add	r2, r3
 800d186:	9200      	str	r2, [sp, #0]
 800d188:	9a06      	ldr	r2, [sp, #24]
 800d18a:	2101      	movs	r1, #1
 800d18c:	441a      	add	r2, r3
 800d18e:	4648      	mov	r0, r9
 800d190:	9206      	str	r2, [sp, #24]
 800d192:	f000 fc77 	bl	800da84 <__i2b>
 800d196:	4605      	mov	r5, r0
 800d198:	b166      	cbz	r6, 800d1b4 <_dtoa_r+0x74c>
 800d19a:	9b06      	ldr	r3, [sp, #24]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dd09      	ble.n	800d1b4 <_dtoa_r+0x74c>
 800d1a0:	42b3      	cmp	r3, r6
 800d1a2:	9a00      	ldr	r2, [sp, #0]
 800d1a4:	bfa8      	it	ge
 800d1a6:	4633      	movge	r3, r6
 800d1a8:	1ad2      	subs	r2, r2, r3
 800d1aa:	9200      	str	r2, [sp, #0]
 800d1ac:	9a06      	ldr	r2, [sp, #24]
 800d1ae:	1af6      	subs	r6, r6, r3
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	9306      	str	r3, [sp, #24]
 800d1b4:	9b08      	ldr	r3, [sp, #32]
 800d1b6:	b30b      	cbz	r3, 800d1fc <_dtoa_r+0x794>
 800d1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 80c6 	beq.w	800d34c <_dtoa_r+0x8e4>
 800d1c0:	2c00      	cmp	r4, #0
 800d1c2:	f000 80c0 	beq.w	800d346 <_dtoa_r+0x8de>
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	4622      	mov	r2, r4
 800d1ca:	4648      	mov	r0, r9
 800d1cc:	f000 fd12 	bl	800dbf4 <__pow5mult>
 800d1d0:	9a02      	ldr	r2, [sp, #8]
 800d1d2:	4601      	mov	r1, r0
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	4648      	mov	r0, r9
 800d1d8:	f000 fc6a 	bl	800dab0 <__multiply>
 800d1dc:	9902      	ldr	r1, [sp, #8]
 800d1de:	4680      	mov	r8, r0
 800d1e0:	4648      	mov	r0, r9
 800d1e2:	f000 fb51 	bl	800d888 <_Bfree>
 800d1e6:	9b08      	ldr	r3, [sp, #32]
 800d1e8:	1b1b      	subs	r3, r3, r4
 800d1ea:	9308      	str	r3, [sp, #32]
 800d1ec:	f000 80b1 	beq.w	800d352 <_dtoa_r+0x8ea>
 800d1f0:	9a08      	ldr	r2, [sp, #32]
 800d1f2:	4641      	mov	r1, r8
 800d1f4:	4648      	mov	r0, r9
 800d1f6:	f000 fcfd 	bl	800dbf4 <__pow5mult>
 800d1fa:	9002      	str	r0, [sp, #8]
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	4648      	mov	r0, r9
 800d200:	f000 fc40 	bl	800da84 <__i2b>
 800d204:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d206:	4604      	mov	r4, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 81d8 	beq.w	800d5be <_dtoa_r+0xb56>
 800d20e:	461a      	mov	r2, r3
 800d210:	4601      	mov	r1, r0
 800d212:	4648      	mov	r0, r9
 800d214:	f000 fcee 	bl	800dbf4 <__pow5mult>
 800d218:	9b07      	ldr	r3, [sp, #28]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	4604      	mov	r4, r0
 800d21e:	f300 809f 	bgt.w	800d360 <_dtoa_r+0x8f8>
 800d222:	9b04      	ldr	r3, [sp, #16]
 800d224:	2b00      	cmp	r3, #0
 800d226:	f040 8097 	bne.w	800d358 <_dtoa_r+0x8f0>
 800d22a:	9b05      	ldr	r3, [sp, #20]
 800d22c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d230:	2b00      	cmp	r3, #0
 800d232:	f040 8093 	bne.w	800d35c <_dtoa_r+0x8f4>
 800d236:	9b05      	ldr	r3, [sp, #20]
 800d238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d23c:	0d1b      	lsrs	r3, r3, #20
 800d23e:	051b      	lsls	r3, r3, #20
 800d240:	b133      	cbz	r3, 800d250 <_dtoa_r+0x7e8>
 800d242:	9b00      	ldr	r3, [sp, #0]
 800d244:	3301      	adds	r3, #1
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	9b06      	ldr	r3, [sp, #24]
 800d24a:	3301      	adds	r3, #1
 800d24c:	9306      	str	r3, [sp, #24]
 800d24e:	2301      	movs	r3, #1
 800d250:	9308      	str	r3, [sp, #32]
 800d252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d254:	2b00      	cmp	r3, #0
 800d256:	f000 81b8 	beq.w	800d5ca <_dtoa_r+0xb62>
 800d25a:	6923      	ldr	r3, [r4, #16]
 800d25c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d260:	6918      	ldr	r0, [r3, #16]
 800d262:	f000 fbc3 	bl	800d9ec <__hi0bits>
 800d266:	f1c0 0020 	rsb	r0, r0, #32
 800d26a:	9b06      	ldr	r3, [sp, #24]
 800d26c:	4418      	add	r0, r3
 800d26e:	f010 001f 	ands.w	r0, r0, #31
 800d272:	f000 8082 	beq.w	800d37a <_dtoa_r+0x912>
 800d276:	f1c0 0320 	rsb	r3, r0, #32
 800d27a:	2b04      	cmp	r3, #4
 800d27c:	dd73      	ble.n	800d366 <_dtoa_r+0x8fe>
 800d27e:	9b00      	ldr	r3, [sp, #0]
 800d280:	f1c0 001c 	rsb	r0, r0, #28
 800d284:	4403      	add	r3, r0
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	9b06      	ldr	r3, [sp, #24]
 800d28a:	4403      	add	r3, r0
 800d28c:	4406      	add	r6, r0
 800d28e:	9306      	str	r3, [sp, #24]
 800d290:	9b00      	ldr	r3, [sp, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	dd05      	ble.n	800d2a2 <_dtoa_r+0x83a>
 800d296:	9902      	ldr	r1, [sp, #8]
 800d298:	461a      	mov	r2, r3
 800d29a:	4648      	mov	r0, r9
 800d29c:	f000 fd04 	bl	800dca8 <__lshift>
 800d2a0:	9002      	str	r0, [sp, #8]
 800d2a2:	9b06      	ldr	r3, [sp, #24]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	dd05      	ble.n	800d2b4 <_dtoa_r+0x84c>
 800d2a8:	4621      	mov	r1, r4
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	4648      	mov	r0, r9
 800d2ae:	f000 fcfb 	bl	800dca8 <__lshift>
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d061      	beq.n	800d37e <_dtoa_r+0x916>
 800d2ba:	9802      	ldr	r0, [sp, #8]
 800d2bc:	4621      	mov	r1, r4
 800d2be:	f000 fd5f 	bl	800dd80 <__mcmp>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	da5b      	bge.n	800d37e <_dtoa_r+0x916>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	9902      	ldr	r1, [sp, #8]
 800d2ca:	220a      	movs	r2, #10
 800d2cc:	4648      	mov	r0, r9
 800d2ce:	f000 fafd 	bl	800d8cc <__multadd>
 800d2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d4:	9002      	str	r0, [sp, #8]
 800d2d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 8177 	beq.w	800d5ce <_dtoa_r+0xb66>
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	220a      	movs	r2, #10
 800d2e6:	4648      	mov	r0, r9
 800d2e8:	f000 faf0 	bl	800d8cc <__multadd>
 800d2ec:	f1bb 0f00 	cmp.w	fp, #0
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	dc6f      	bgt.n	800d3d4 <_dtoa_r+0x96c>
 800d2f4:	9b07      	ldr	r3, [sp, #28]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	dc49      	bgt.n	800d38e <_dtoa_r+0x926>
 800d2fa:	e06b      	b.n	800d3d4 <_dtoa_r+0x96c>
 800d2fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d2fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d302:	e73c      	b.n	800d17e <_dtoa_r+0x716>
 800d304:	3fe00000 	.word	0x3fe00000
 800d308:	40240000 	.word	0x40240000
 800d30c:	9b03      	ldr	r3, [sp, #12]
 800d30e:	1e5c      	subs	r4, r3, #1
 800d310:	9b08      	ldr	r3, [sp, #32]
 800d312:	42a3      	cmp	r3, r4
 800d314:	db09      	blt.n	800d32a <_dtoa_r+0x8c2>
 800d316:	1b1c      	subs	r4, r3, r4
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f6bf af30 	bge.w	800d180 <_dtoa_r+0x718>
 800d320:	9b00      	ldr	r3, [sp, #0]
 800d322:	9a03      	ldr	r2, [sp, #12]
 800d324:	1a9e      	subs	r6, r3, r2
 800d326:	2300      	movs	r3, #0
 800d328:	e72b      	b.n	800d182 <_dtoa_r+0x71a>
 800d32a:	9b08      	ldr	r3, [sp, #32]
 800d32c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d32e:	9408      	str	r4, [sp, #32]
 800d330:	1ae3      	subs	r3, r4, r3
 800d332:	441a      	add	r2, r3
 800d334:	9e00      	ldr	r6, [sp, #0]
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	920d      	str	r2, [sp, #52]	@ 0x34
 800d33a:	2400      	movs	r4, #0
 800d33c:	e721      	b.n	800d182 <_dtoa_r+0x71a>
 800d33e:	9c08      	ldr	r4, [sp, #32]
 800d340:	9e00      	ldr	r6, [sp, #0]
 800d342:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d344:	e728      	b.n	800d198 <_dtoa_r+0x730>
 800d346:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d34a:	e751      	b.n	800d1f0 <_dtoa_r+0x788>
 800d34c:	9a08      	ldr	r2, [sp, #32]
 800d34e:	9902      	ldr	r1, [sp, #8]
 800d350:	e750      	b.n	800d1f4 <_dtoa_r+0x78c>
 800d352:	f8cd 8008 	str.w	r8, [sp, #8]
 800d356:	e751      	b.n	800d1fc <_dtoa_r+0x794>
 800d358:	2300      	movs	r3, #0
 800d35a:	e779      	b.n	800d250 <_dtoa_r+0x7e8>
 800d35c:	9b04      	ldr	r3, [sp, #16]
 800d35e:	e777      	b.n	800d250 <_dtoa_r+0x7e8>
 800d360:	2300      	movs	r3, #0
 800d362:	9308      	str	r3, [sp, #32]
 800d364:	e779      	b.n	800d25a <_dtoa_r+0x7f2>
 800d366:	d093      	beq.n	800d290 <_dtoa_r+0x828>
 800d368:	9a00      	ldr	r2, [sp, #0]
 800d36a:	331c      	adds	r3, #28
 800d36c:	441a      	add	r2, r3
 800d36e:	9200      	str	r2, [sp, #0]
 800d370:	9a06      	ldr	r2, [sp, #24]
 800d372:	441a      	add	r2, r3
 800d374:	441e      	add	r6, r3
 800d376:	9206      	str	r2, [sp, #24]
 800d378:	e78a      	b.n	800d290 <_dtoa_r+0x828>
 800d37a:	4603      	mov	r3, r0
 800d37c:	e7f4      	b.n	800d368 <_dtoa_r+0x900>
 800d37e:	9b03      	ldr	r3, [sp, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	46b8      	mov	r8, r7
 800d384:	dc20      	bgt.n	800d3c8 <_dtoa_r+0x960>
 800d386:	469b      	mov	fp, r3
 800d388:	9b07      	ldr	r3, [sp, #28]
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	dd1e      	ble.n	800d3cc <_dtoa_r+0x964>
 800d38e:	f1bb 0f00 	cmp.w	fp, #0
 800d392:	f47f adb1 	bne.w	800cef8 <_dtoa_r+0x490>
 800d396:	4621      	mov	r1, r4
 800d398:	465b      	mov	r3, fp
 800d39a:	2205      	movs	r2, #5
 800d39c:	4648      	mov	r0, r9
 800d39e:	f000 fa95 	bl	800d8cc <__multadd>
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	9802      	ldr	r0, [sp, #8]
 800d3a8:	f000 fcea 	bl	800dd80 <__mcmp>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	f77f ada3 	ble.w	800cef8 <_dtoa_r+0x490>
 800d3b2:	4656      	mov	r6, sl
 800d3b4:	2331      	movs	r3, #49	@ 0x31
 800d3b6:	f806 3b01 	strb.w	r3, [r6], #1
 800d3ba:	f108 0801 	add.w	r8, r8, #1
 800d3be:	e59f      	b.n	800cf00 <_dtoa_r+0x498>
 800d3c0:	9c03      	ldr	r4, [sp, #12]
 800d3c2:	46b8      	mov	r8, r7
 800d3c4:	4625      	mov	r5, r4
 800d3c6:	e7f4      	b.n	800d3b2 <_dtoa_r+0x94a>
 800d3c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 8101 	beq.w	800d5d6 <_dtoa_r+0xb6e>
 800d3d4:	2e00      	cmp	r6, #0
 800d3d6:	dd05      	ble.n	800d3e4 <_dtoa_r+0x97c>
 800d3d8:	4629      	mov	r1, r5
 800d3da:	4632      	mov	r2, r6
 800d3dc:	4648      	mov	r0, r9
 800d3de:	f000 fc63 	bl	800dca8 <__lshift>
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	9b08      	ldr	r3, [sp, #32]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d05c      	beq.n	800d4a4 <_dtoa_r+0xa3c>
 800d3ea:	6869      	ldr	r1, [r5, #4]
 800d3ec:	4648      	mov	r0, r9
 800d3ee:	f000 fa0b 	bl	800d808 <_Balloc>
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	b928      	cbnz	r0, 800d402 <_dtoa_r+0x99a>
 800d3f6:	4b82      	ldr	r3, [pc, #520]	@ (800d600 <_dtoa_r+0xb98>)
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d3fe:	f7ff bb4a 	b.w	800ca96 <_dtoa_r+0x2e>
 800d402:	692a      	ldr	r2, [r5, #16]
 800d404:	3202      	adds	r2, #2
 800d406:	0092      	lsls	r2, r2, #2
 800d408:	f105 010c 	add.w	r1, r5, #12
 800d40c:	300c      	adds	r0, #12
 800d40e:	f7ff fa8e 	bl	800c92e <memcpy>
 800d412:	2201      	movs	r2, #1
 800d414:	4631      	mov	r1, r6
 800d416:	4648      	mov	r0, r9
 800d418:	f000 fc46 	bl	800dca8 <__lshift>
 800d41c:	f10a 0301 	add.w	r3, sl, #1
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	eb0a 030b 	add.w	r3, sl, fp
 800d426:	9308      	str	r3, [sp, #32]
 800d428:	9b04      	ldr	r3, [sp, #16]
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	462f      	mov	r7, r5
 800d430:	9306      	str	r3, [sp, #24]
 800d432:	4605      	mov	r5, r0
 800d434:	9b00      	ldr	r3, [sp, #0]
 800d436:	9802      	ldr	r0, [sp, #8]
 800d438:	4621      	mov	r1, r4
 800d43a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d43e:	f7ff fa8b 	bl	800c958 <quorem>
 800d442:	4603      	mov	r3, r0
 800d444:	3330      	adds	r3, #48	@ 0x30
 800d446:	9003      	str	r0, [sp, #12]
 800d448:	4639      	mov	r1, r7
 800d44a:	9802      	ldr	r0, [sp, #8]
 800d44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d44e:	f000 fc97 	bl	800dd80 <__mcmp>
 800d452:	462a      	mov	r2, r5
 800d454:	9004      	str	r0, [sp, #16]
 800d456:	4621      	mov	r1, r4
 800d458:	4648      	mov	r0, r9
 800d45a:	f000 fcad 	bl	800ddb8 <__mdiff>
 800d45e:	68c2      	ldr	r2, [r0, #12]
 800d460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d462:	4606      	mov	r6, r0
 800d464:	bb02      	cbnz	r2, 800d4a8 <_dtoa_r+0xa40>
 800d466:	4601      	mov	r1, r0
 800d468:	9802      	ldr	r0, [sp, #8]
 800d46a:	f000 fc89 	bl	800dd80 <__mcmp>
 800d46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d470:	4602      	mov	r2, r0
 800d472:	4631      	mov	r1, r6
 800d474:	4648      	mov	r0, r9
 800d476:	920c      	str	r2, [sp, #48]	@ 0x30
 800d478:	9309      	str	r3, [sp, #36]	@ 0x24
 800d47a:	f000 fa05 	bl	800d888 <_Bfree>
 800d47e:	9b07      	ldr	r3, [sp, #28]
 800d480:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d482:	9e00      	ldr	r6, [sp, #0]
 800d484:	ea42 0103 	orr.w	r1, r2, r3
 800d488:	9b06      	ldr	r3, [sp, #24]
 800d48a:	4319      	orrs	r1, r3
 800d48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d48e:	d10d      	bne.n	800d4ac <_dtoa_r+0xa44>
 800d490:	2b39      	cmp	r3, #57	@ 0x39
 800d492:	d027      	beq.n	800d4e4 <_dtoa_r+0xa7c>
 800d494:	9a04      	ldr	r2, [sp, #16]
 800d496:	2a00      	cmp	r2, #0
 800d498:	dd01      	ble.n	800d49e <_dtoa_r+0xa36>
 800d49a:	9b03      	ldr	r3, [sp, #12]
 800d49c:	3331      	adds	r3, #49	@ 0x31
 800d49e:	f88b 3000 	strb.w	r3, [fp]
 800d4a2:	e52e      	b.n	800cf02 <_dtoa_r+0x49a>
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	e7b9      	b.n	800d41c <_dtoa_r+0x9b4>
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	e7e2      	b.n	800d472 <_dtoa_r+0xa0a>
 800d4ac:	9904      	ldr	r1, [sp, #16]
 800d4ae:	2900      	cmp	r1, #0
 800d4b0:	db04      	blt.n	800d4bc <_dtoa_r+0xa54>
 800d4b2:	9807      	ldr	r0, [sp, #28]
 800d4b4:	4301      	orrs	r1, r0
 800d4b6:	9806      	ldr	r0, [sp, #24]
 800d4b8:	4301      	orrs	r1, r0
 800d4ba:	d120      	bne.n	800d4fe <_dtoa_r+0xa96>
 800d4bc:	2a00      	cmp	r2, #0
 800d4be:	ddee      	ble.n	800d49e <_dtoa_r+0xa36>
 800d4c0:	9902      	ldr	r1, [sp, #8]
 800d4c2:	9300      	str	r3, [sp, #0]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	4648      	mov	r0, r9
 800d4c8:	f000 fbee 	bl	800dca8 <__lshift>
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	9002      	str	r0, [sp, #8]
 800d4d0:	f000 fc56 	bl	800dd80 <__mcmp>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	9b00      	ldr	r3, [sp, #0]
 800d4d8:	dc02      	bgt.n	800d4e0 <_dtoa_r+0xa78>
 800d4da:	d1e0      	bne.n	800d49e <_dtoa_r+0xa36>
 800d4dc:	07da      	lsls	r2, r3, #31
 800d4de:	d5de      	bpl.n	800d49e <_dtoa_r+0xa36>
 800d4e0:	2b39      	cmp	r3, #57	@ 0x39
 800d4e2:	d1da      	bne.n	800d49a <_dtoa_r+0xa32>
 800d4e4:	2339      	movs	r3, #57	@ 0x39
 800d4e6:	f88b 3000 	strb.w	r3, [fp]
 800d4ea:	4633      	mov	r3, r6
 800d4ec:	461e      	mov	r6, r3
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d4f4:	2a39      	cmp	r2, #57	@ 0x39
 800d4f6:	d04e      	beq.n	800d596 <_dtoa_r+0xb2e>
 800d4f8:	3201      	adds	r2, #1
 800d4fa:	701a      	strb	r2, [r3, #0]
 800d4fc:	e501      	b.n	800cf02 <_dtoa_r+0x49a>
 800d4fe:	2a00      	cmp	r2, #0
 800d500:	dd03      	ble.n	800d50a <_dtoa_r+0xaa2>
 800d502:	2b39      	cmp	r3, #57	@ 0x39
 800d504:	d0ee      	beq.n	800d4e4 <_dtoa_r+0xa7c>
 800d506:	3301      	adds	r3, #1
 800d508:	e7c9      	b.n	800d49e <_dtoa_r+0xa36>
 800d50a:	9a00      	ldr	r2, [sp, #0]
 800d50c:	9908      	ldr	r1, [sp, #32]
 800d50e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d512:	428a      	cmp	r2, r1
 800d514:	d028      	beq.n	800d568 <_dtoa_r+0xb00>
 800d516:	9902      	ldr	r1, [sp, #8]
 800d518:	2300      	movs	r3, #0
 800d51a:	220a      	movs	r2, #10
 800d51c:	4648      	mov	r0, r9
 800d51e:	f000 f9d5 	bl	800d8cc <__multadd>
 800d522:	42af      	cmp	r7, r5
 800d524:	9002      	str	r0, [sp, #8]
 800d526:	f04f 0300 	mov.w	r3, #0
 800d52a:	f04f 020a 	mov.w	r2, #10
 800d52e:	4639      	mov	r1, r7
 800d530:	4648      	mov	r0, r9
 800d532:	d107      	bne.n	800d544 <_dtoa_r+0xadc>
 800d534:	f000 f9ca 	bl	800d8cc <__multadd>
 800d538:	4607      	mov	r7, r0
 800d53a:	4605      	mov	r5, r0
 800d53c:	9b00      	ldr	r3, [sp, #0]
 800d53e:	3301      	adds	r3, #1
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	e777      	b.n	800d434 <_dtoa_r+0x9cc>
 800d544:	f000 f9c2 	bl	800d8cc <__multadd>
 800d548:	4629      	mov	r1, r5
 800d54a:	4607      	mov	r7, r0
 800d54c:	2300      	movs	r3, #0
 800d54e:	220a      	movs	r2, #10
 800d550:	4648      	mov	r0, r9
 800d552:	f000 f9bb 	bl	800d8cc <__multadd>
 800d556:	4605      	mov	r5, r0
 800d558:	e7f0      	b.n	800d53c <_dtoa_r+0xad4>
 800d55a:	f1bb 0f00 	cmp.w	fp, #0
 800d55e:	bfcc      	ite	gt
 800d560:	465e      	movgt	r6, fp
 800d562:	2601      	movle	r6, #1
 800d564:	4456      	add	r6, sl
 800d566:	2700      	movs	r7, #0
 800d568:	9902      	ldr	r1, [sp, #8]
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	2201      	movs	r2, #1
 800d56e:	4648      	mov	r0, r9
 800d570:	f000 fb9a 	bl	800dca8 <__lshift>
 800d574:	4621      	mov	r1, r4
 800d576:	9002      	str	r0, [sp, #8]
 800d578:	f000 fc02 	bl	800dd80 <__mcmp>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	dcb4      	bgt.n	800d4ea <_dtoa_r+0xa82>
 800d580:	d102      	bne.n	800d588 <_dtoa_r+0xb20>
 800d582:	9b00      	ldr	r3, [sp, #0]
 800d584:	07db      	lsls	r3, r3, #31
 800d586:	d4b0      	bmi.n	800d4ea <_dtoa_r+0xa82>
 800d588:	4633      	mov	r3, r6
 800d58a:	461e      	mov	r6, r3
 800d58c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d590:	2a30      	cmp	r2, #48	@ 0x30
 800d592:	d0fa      	beq.n	800d58a <_dtoa_r+0xb22>
 800d594:	e4b5      	b.n	800cf02 <_dtoa_r+0x49a>
 800d596:	459a      	cmp	sl, r3
 800d598:	d1a8      	bne.n	800d4ec <_dtoa_r+0xa84>
 800d59a:	2331      	movs	r3, #49	@ 0x31
 800d59c:	f108 0801 	add.w	r8, r8, #1
 800d5a0:	f88a 3000 	strb.w	r3, [sl]
 800d5a4:	e4ad      	b.n	800cf02 <_dtoa_r+0x49a>
 800d5a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d5a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d604 <_dtoa_r+0xb9c>
 800d5ac:	b11b      	cbz	r3, 800d5b6 <_dtoa_r+0xb4e>
 800d5ae:	f10a 0308 	add.w	r3, sl, #8
 800d5b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	4650      	mov	r0, sl
 800d5b8:	b017      	add	sp, #92	@ 0x5c
 800d5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5be:	9b07      	ldr	r3, [sp, #28]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	f77f ae2e 	ble.w	800d222 <_dtoa_r+0x7ba>
 800d5c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5c8:	9308      	str	r3, [sp, #32]
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	e64d      	b.n	800d26a <_dtoa_r+0x802>
 800d5ce:	f1bb 0f00 	cmp.w	fp, #0
 800d5d2:	f77f aed9 	ble.w	800d388 <_dtoa_r+0x920>
 800d5d6:	4656      	mov	r6, sl
 800d5d8:	9802      	ldr	r0, [sp, #8]
 800d5da:	4621      	mov	r1, r4
 800d5dc:	f7ff f9bc 	bl	800c958 <quorem>
 800d5e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d5e4:	f806 3b01 	strb.w	r3, [r6], #1
 800d5e8:	eba6 020a 	sub.w	r2, r6, sl
 800d5ec:	4593      	cmp	fp, r2
 800d5ee:	ddb4      	ble.n	800d55a <_dtoa_r+0xaf2>
 800d5f0:	9902      	ldr	r1, [sp, #8]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	220a      	movs	r2, #10
 800d5f6:	4648      	mov	r0, r9
 800d5f8:	f000 f968 	bl	800d8cc <__multadd>
 800d5fc:	9002      	str	r0, [sp, #8]
 800d5fe:	e7eb      	b.n	800d5d8 <_dtoa_r+0xb70>
 800d600:	080104ed 	.word	0x080104ed
 800d604:	08010471 	.word	0x08010471

0800d608 <_free_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4605      	mov	r5, r0
 800d60c:	2900      	cmp	r1, #0
 800d60e:	d041      	beq.n	800d694 <_free_r+0x8c>
 800d610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d614:	1f0c      	subs	r4, r1, #4
 800d616:	2b00      	cmp	r3, #0
 800d618:	bfb8      	it	lt
 800d61a:	18e4      	addlt	r4, r4, r3
 800d61c:	f000 f8e8 	bl	800d7f0 <__malloc_lock>
 800d620:	4a1d      	ldr	r2, [pc, #116]	@ (800d698 <_free_r+0x90>)
 800d622:	6813      	ldr	r3, [r2, #0]
 800d624:	b933      	cbnz	r3, 800d634 <_free_r+0x2c>
 800d626:	6063      	str	r3, [r4, #4]
 800d628:	6014      	str	r4, [r2, #0]
 800d62a:	4628      	mov	r0, r5
 800d62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d630:	f000 b8e4 	b.w	800d7fc <__malloc_unlock>
 800d634:	42a3      	cmp	r3, r4
 800d636:	d908      	bls.n	800d64a <_free_r+0x42>
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	1821      	adds	r1, r4, r0
 800d63c:	428b      	cmp	r3, r1
 800d63e:	bf01      	itttt	eq
 800d640:	6819      	ldreq	r1, [r3, #0]
 800d642:	685b      	ldreq	r3, [r3, #4]
 800d644:	1809      	addeq	r1, r1, r0
 800d646:	6021      	streq	r1, [r4, #0]
 800d648:	e7ed      	b.n	800d626 <_free_r+0x1e>
 800d64a:	461a      	mov	r2, r3
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	b10b      	cbz	r3, 800d654 <_free_r+0x4c>
 800d650:	42a3      	cmp	r3, r4
 800d652:	d9fa      	bls.n	800d64a <_free_r+0x42>
 800d654:	6811      	ldr	r1, [r2, #0]
 800d656:	1850      	adds	r0, r2, r1
 800d658:	42a0      	cmp	r0, r4
 800d65a:	d10b      	bne.n	800d674 <_free_r+0x6c>
 800d65c:	6820      	ldr	r0, [r4, #0]
 800d65e:	4401      	add	r1, r0
 800d660:	1850      	adds	r0, r2, r1
 800d662:	4283      	cmp	r3, r0
 800d664:	6011      	str	r1, [r2, #0]
 800d666:	d1e0      	bne.n	800d62a <_free_r+0x22>
 800d668:	6818      	ldr	r0, [r3, #0]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	6053      	str	r3, [r2, #4]
 800d66e:	4408      	add	r0, r1
 800d670:	6010      	str	r0, [r2, #0]
 800d672:	e7da      	b.n	800d62a <_free_r+0x22>
 800d674:	d902      	bls.n	800d67c <_free_r+0x74>
 800d676:	230c      	movs	r3, #12
 800d678:	602b      	str	r3, [r5, #0]
 800d67a:	e7d6      	b.n	800d62a <_free_r+0x22>
 800d67c:	6820      	ldr	r0, [r4, #0]
 800d67e:	1821      	adds	r1, r4, r0
 800d680:	428b      	cmp	r3, r1
 800d682:	bf04      	itt	eq
 800d684:	6819      	ldreq	r1, [r3, #0]
 800d686:	685b      	ldreq	r3, [r3, #4]
 800d688:	6063      	str	r3, [r4, #4]
 800d68a:	bf04      	itt	eq
 800d68c:	1809      	addeq	r1, r1, r0
 800d68e:	6021      	streq	r1, [r4, #0]
 800d690:	6054      	str	r4, [r2, #4]
 800d692:	e7ca      	b.n	800d62a <_free_r+0x22>
 800d694:	bd38      	pop	{r3, r4, r5, pc}
 800d696:	bf00      	nop
 800d698:	200020a0 	.word	0x200020a0

0800d69c <malloc>:
 800d69c:	4b02      	ldr	r3, [pc, #8]	@ (800d6a8 <malloc+0xc>)
 800d69e:	4601      	mov	r1, r0
 800d6a0:	6818      	ldr	r0, [r3, #0]
 800d6a2:	f000 b825 	b.w	800d6f0 <_malloc_r>
 800d6a6:	bf00      	nop
 800d6a8:	20000518 	.word	0x20000518

0800d6ac <sbrk_aligned>:
 800d6ac:	b570      	push	{r4, r5, r6, lr}
 800d6ae:	4e0f      	ldr	r6, [pc, #60]	@ (800d6ec <sbrk_aligned+0x40>)
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	6831      	ldr	r1, [r6, #0]
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	b911      	cbnz	r1, 800d6be <sbrk_aligned+0x12>
 800d6b8:	f001 fe04 	bl	800f2c4 <_sbrk_r>
 800d6bc:	6030      	str	r0, [r6, #0]
 800d6be:	4621      	mov	r1, r4
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f001 fdff 	bl	800f2c4 <_sbrk_r>
 800d6c6:	1c43      	adds	r3, r0, #1
 800d6c8:	d103      	bne.n	800d6d2 <sbrk_aligned+0x26>
 800d6ca:	f04f 34ff 	mov.w	r4, #4294967295
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	bd70      	pop	{r4, r5, r6, pc}
 800d6d2:	1cc4      	adds	r4, r0, #3
 800d6d4:	f024 0403 	bic.w	r4, r4, #3
 800d6d8:	42a0      	cmp	r0, r4
 800d6da:	d0f8      	beq.n	800d6ce <sbrk_aligned+0x22>
 800d6dc:	1a21      	subs	r1, r4, r0
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f001 fdf0 	bl	800f2c4 <_sbrk_r>
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d1f2      	bne.n	800d6ce <sbrk_aligned+0x22>
 800d6e8:	e7ef      	b.n	800d6ca <sbrk_aligned+0x1e>
 800d6ea:	bf00      	nop
 800d6ec:	2000209c 	.word	0x2000209c

0800d6f0 <_malloc_r>:
 800d6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f4:	1ccd      	adds	r5, r1, #3
 800d6f6:	f025 0503 	bic.w	r5, r5, #3
 800d6fa:	3508      	adds	r5, #8
 800d6fc:	2d0c      	cmp	r5, #12
 800d6fe:	bf38      	it	cc
 800d700:	250c      	movcc	r5, #12
 800d702:	2d00      	cmp	r5, #0
 800d704:	4606      	mov	r6, r0
 800d706:	db01      	blt.n	800d70c <_malloc_r+0x1c>
 800d708:	42a9      	cmp	r1, r5
 800d70a:	d904      	bls.n	800d716 <_malloc_r+0x26>
 800d70c:	230c      	movs	r3, #12
 800d70e:	6033      	str	r3, [r6, #0]
 800d710:	2000      	movs	r0, #0
 800d712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d7ec <_malloc_r+0xfc>
 800d71a:	f000 f869 	bl	800d7f0 <__malloc_lock>
 800d71e:	f8d8 3000 	ldr.w	r3, [r8]
 800d722:	461c      	mov	r4, r3
 800d724:	bb44      	cbnz	r4, 800d778 <_malloc_r+0x88>
 800d726:	4629      	mov	r1, r5
 800d728:	4630      	mov	r0, r6
 800d72a:	f7ff ffbf 	bl	800d6ac <sbrk_aligned>
 800d72e:	1c43      	adds	r3, r0, #1
 800d730:	4604      	mov	r4, r0
 800d732:	d158      	bne.n	800d7e6 <_malloc_r+0xf6>
 800d734:	f8d8 4000 	ldr.w	r4, [r8]
 800d738:	4627      	mov	r7, r4
 800d73a:	2f00      	cmp	r7, #0
 800d73c:	d143      	bne.n	800d7c6 <_malloc_r+0xd6>
 800d73e:	2c00      	cmp	r4, #0
 800d740:	d04b      	beq.n	800d7da <_malloc_r+0xea>
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	4639      	mov	r1, r7
 800d746:	4630      	mov	r0, r6
 800d748:	eb04 0903 	add.w	r9, r4, r3
 800d74c:	f001 fdba 	bl	800f2c4 <_sbrk_r>
 800d750:	4581      	cmp	r9, r0
 800d752:	d142      	bne.n	800d7da <_malloc_r+0xea>
 800d754:	6821      	ldr	r1, [r4, #0]
 800d756:	1a6d      	subs	r5, r5, r1
 800d758:	4629      	mov	r1, r5
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7ff ffa6 	bl	800d6ac <sbrk_aligned>
 800d760:	3001      	adds	r0, #1
 800d762:	d03a      	beq.n	800d7da <_malloc_r+0xea>
 800d764:	6823      	ldr	r3, [r4, #0]
 800d766:	442b      	add	r3, r5
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	f8d8 3000 	ldr.w	r3, [r8]
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	bb62      	cbnz	r2, 800d7cc <_malloc_r+0xdc>
 800d772:	f8c8 7000 	str.w	r7, [r8]
 800d776:	e00f      	b.n	800d798 <_malloc_r+0xa8>
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	1b52      	subs	r2, r2, r5
 800d77c:	d420      	bmi.n	800d7c0 <_malloc_r+0xd0>
 800d77e:	2a0b      	cmp	r2, #11
 800d780:	d917      	bls.n	800d7b2 <_malloc_r+0xc2>
 800d782:	1961      	adds	r1, r4, r5
 800d784:	42a3      	cmp	r3, r4
 800d786:	6025      	str	r5, [r4, #0]
 800d788:	bf18      	it	ne
 800d78a:	6059      	strne	r1, [r3, #4]
 800d78c:	6863      	ldr	r3, [r4, #4]
 800d78e:	bf08      	it	eq
 800d790:	f8c8 1000 	streq.w	r1, [r8]
 800d794:	5162      	str	r2, [r4, r5]
 800d796:	604b      	str	r3, [r1, #4]
 800d798:	4630      	mov	r0, r6
 800d79a:	f000 f82f 	bl	800d7fc <__malloc_unlock>
 800d79e:	f104 000b 	add.w	r0, r4, #11
 800d7a2:	1d23      	adds	r3, r4, #4
 800d7a4:	f020 0007 	bic.w	r0, r0, #7
 800d7a8:	1ac2      	subs	r2, r0, r3
 800d7aa:	bf1c      	itt	ne
 800d7ac:	1a1b      	subne	r3, r3, r0
 800d7ae:	50a3      	strne	r3, [r4, r2]
 800d7b0:	e7af      	b.n	800d712 <_malloc_r+0x22>
 800d7b2:	6862      	ldr	r2, [r4, #4]
 800d7b4:	42a3      	cmp	r3, r4
 800d7b6:	bf0c      	ite	eq
 800d7b8:	f8c8 2000 	streq.w	r2, [r8]
 800d7bc:	605a      	strne	r2, [r3, #4]
 800d7be:	e7eb      	b.n	800d798 <_malloc_r+0xa8>
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	6864      	ldr	r4, [r4, #4]
 800d7c4:	e7ae      	b.n	800d724 <_malloc_r+0x34>
 800d7c6:	463c      	mov	r4, r7
 800d7c8:	687f      	ldr	r7, [r7, #4]
 800d7ca:	e7b6      	b.n	800d73a <_malloc_r+0x4a>
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	42a3      	cmp	r3, r4
 800d7d2:	d1fb      	bne.n	800d7cc <_malloc_r+0xdc>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6053      	str	r3, [r2, #4]
 800d7d8:	e7de      	b.n	800d798 <_malloc_r+0xa8>
 800d7da:	230c      	movs	r3, #12
 800d7dc:	6033      	str	r3, [r6, #0]
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f000 f80c 	bl	800d7fc <__malloc_unlock>
 800d7e4:	e794      	b.n	800d710 <_malloc_r+0x20>
 800d7e6:	6005      	str	r5, [r0, #0]
 800d7e8:	e7d6      	b.n	800d798 <_malloc_r+0xa8>
 800d7ea:	bf00      	nop
 800d7ec:	200020a0 	.word	0x200020a0

0800d7f0 <__malloc_lock>:
 800d7f0:	4801      	ldr	r0, [pc, #4]	@ (800d7f8 <__malloc_lock+0x8>)
 800d7f2:	f7ff b89a 	b.w	800c92a <__retarget_lock_acquire_recursive>
 800d7f6:	bf00      	nop
 800d7f8:	20002098 	.word	0x20002098

0800d7fc <__malloc_unlock>:
 800d7fc:	4801      	ldr	r0, [pc, #4]	@ (800d804 <__malloc_unlock+0x8>)
 800d7fe:	f7ff b895 	b.w	800c92c <__retarget_lock_release_recursive>
 800d802:	bf00      	nop
 800d804:	20002098 	.word	0x20002098

0800d808 <_Balloc>:
 800d808:	b570      	push	{r4, r5, r6, lr}
 800d80a:	69c6      	ldr	r6, [r0, #28]
 800d80c:	4604      	mov	r4, r0
 800d80e:	460d      	mov	r5, r1
 800d810:	b976      	cbnz	r6, 800d830 <_Balloc+0x28>
 800d812:	2010      	movs	r0, #16
 800d814:	f7ff ff42 	bl	800d69c <malloc>
 800d818:	4602      	mov	r2, r0
 800d81a:	61e0      	str	r0, [r4, #28]
 800d81c:	b920      	cbnz	r0, 800d828 <_Balloc+0x20>
 800d81e:	4b18      	ldr	r3, [pc, #96]	@ (800d880 <_Balloc+0x78>)
 800d820:	4818      	ldr	r0, [pc, #96]	@ (800d884 <_Balloc+0x7c>)
 800d822:	216b      	movs	r1, #107	@ 0x6b
 800d824:	f001 fd68 	bl	800f2f8 <__assert_func>
 800d828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d82c:	6006      	str	r6, [r0, #0]
 800d82e:	60c6      	str	r6, [r0, #12]
 800d830:	69e6      	ldr	r6, [r4, #28]
 800d832:	68f3      	ldr	r3, [r6, #12]
 800d834:	b183      	cbz	r3, 800d858 <_Balloc+0x50>
 800d836:	69e3      	ldr	r3, [r4, #28]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d83e:	b9b8      	cbnz	r0, 800d870 <_Balloc+0x68>
 800d840:	2101      	movs	r1, #1
 800d842:	fa01 f605 	lsl.w	r6, r1, r5
 800d846:	1d72      	adds	r2, r6, #5
 800d848:	0092      	lsls	r2, r2, #2
 800d84a:	4620      	mov	r0, r4
 800d84c:	f001 fd72 	bl	800f334 <_calloc_r>
 800d850:	b160      	cbz	r0, 800d86c <_Balloc+0x64>
 800d852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d856:	e00e      	b.n	800d876 <_Balloc+0x6e>
 800d858:	2221      	movs	r2, #33	@ 0x21
 800d85a:	2104      	movs	r1, #4
 800d85c:	4620      	mov	r0, r4
 800d85e:	f001 fd69 	bl	800f334 <_calloc_r>
 800d862:	69e3      	ldr	r3, [r4, #28]
 800d864:	60f0      	str	r0, [r6, #12]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1e4      	bne.n	800d836 <_Balloc+0x2e>
 800d86c:	2000      	movs	r0, #0
 800d86e:	bd70      	pop	{r4, r5, r6, pc}
 800d870:	6802      	ldr	r2, [r0, #0]
 800d872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d876:	2300      	movs	r3, #0
 800d878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d87c:	e7f7      	b.n	800d86e <_Balloc+0x66>
 800d87e:	bf00      	nop
 800d880:	0801047e 	.word	0x0801047e
 800d884:	080104fe 	.word	0x080104fe

0800d888 <_Bfree>:
 800d888:	b570      	push	{r4, r5, r6, lr}
 800d88a:	69c6      	ldr	r6, [r0, #28]
 800d88c:	4605      	mov	r5, r0
 800d88e:	460c      	mov	r4, r1
 800d890:	b976      	cbnz	r6, 800d8b0 <_Bfree+0x28>
 800d892:	2010      	movs	r0, #16
 800d894:	f7ff ff02 	bl	800d69c <malloc>
 800d898:	4602      	mov	r2, r0
 800d89a:	61e8      	str	r0, [r5, #28]
 800d89c:	b920      	cbnz	r0, 800d8a8 <_Bfree+0x20>
 800d89e:	4b09      	ldr	r3, [pc, #36]	@ (800d8c4 <_Bfree+0x3c>)
 800d8a0:	4809      	ldr	r0, [pc, #36]	@ (800d8c8 <_Bfree+0x40>)
 800d8a2:	218f      	movs	r1, #143	@ 0x8f
 800d8a4:	f001 fd28 	bl	800f2f8 <__assert_func>
 800d8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8ac:	6006      	str	r6, [r0, #0]
 800d8ae:	60c6      	str	r6, [r0, #12]
 800d8b0:	b13c      	cbz	r4, 800d8c2 <_Bfree+0x3a>
 800d8b2:	69eb      	ldr	r3, [r5, #28]
 800d8b4:	6862      	ldr	r2, [r4, #4]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8bc:	6021      	str	r1, [r4, #0]
 800d8be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8c2:	bd70      	pop	{r4, r5, r6, pc}
 800d8c4:	0801047e 	.word	0x0801047e
 800d8c8:	080104fe 	.word	0x080104fe

0800d8cc <__multadd>:
 800d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d0:	690d      	ldr	r5, [r1, #16]
 800d8d2:	4607      	mov	r7, r0
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	461e      	mov	r6, r3
 800d8d8:	f101 0c14 	add.w	ip, r1, #20
 800d8dc:	2000      	movs	r0, #0
 800d8de:	f8dc 3000 	ldr.w	r3, [ip]
 800d8e2:	b299      	uxth	r1, r3
 800d8e4:	fb02 6101 	mla	r1, r2, r1, r6
 800d8e8:	0c1e      	lsrs	r6, r3, #16
 800d8ea:	0c0b      	lsrs	r3, r1, #16
 800d8ec:	fb02 3306 	mla	r3, r2, r6, r3
 800d8f0:	b289      	uxth	r1, r1
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d8f8:	4285      	cmp	r5, r0
 800d8fa:	f84c 1b04 	str.w	r1, [ip], #4
 800d8fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d902:	dcec      	bgt.n	800d8de <__multadd+0x12>
 800d904:	b30e      	cbz	r6, 800d94a <__multadd+0x7e>
 800d906:	68a3      	ldr	r3, [r4, #8]
 800d908:	42ab      	cmp	r3, r5
 800d90a:	dc19      	bgt.n	800d940 <__multadd+0x74>
 800d90c:	6861      	ldr	r1, [r4, #4]
 800d90e:	4638      	mov	r0, r7
 800d910:	3101      	adds	r1, #1
 800d912:	f7ff ff79 	bl	800d808 <_Balloc>
 800d916:	4680      	mov	r8, r0
 800d918:	b928      	cbnz	r0, 800d926 <__multadd+0x5a>
 800d91a:	4602      	mov	r2, r0
 800d91c:	4b0c      	ldr	r3, [pc, #48]	@ (800d950 <__multadd+0x84>)
 800d91e:	480d      	ldr	r0, [pc, #52]	@ (800d954 <__multadd+0x88>)
 800d920:	21ba      	movs	r1, #186	@ 0xba
 800d922:	f001 fce9 	bl	800f2f8 <__assert_func>
 800d926:	6922      	ldr	r2, [r4, #16]
 800d928:	3202      	adds	r2, #2
 800d92a:	f104 010c 	add.w	r1, r4, #12
 800d92e:	0092      	lsls	r2, r2, #2
 800d930:	300c      	adds	r0, #12
 800d932:	f7fe fffc 	bl	800c92e <memcpy>
 800d936:	4621      	mov	r1, r4
 800d938:	4638      	mov	r0, r7
 800d93a:	f7ff ffa5 	bl	800d888 <_Bfree>
 800d93e:	4644      	mov	r4, r8
 800d940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d944:	3501      	adds	r5, #1
 800d946:	615e      	str	r6, [r3, #20]
 800d948:	6125      	str	r5, [r4, #16]
 800d94a:	4620      	mov	r0, r4
 800d94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d950:	080104ed 	.word	0x080104ed
 800d954:	080104fe 	.word	0x080104fe

0800d958 <__s2b>:
 800d958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d95c:	460c      	mov	r4, r1
 800d95e:	4615      	mov	r5, r2
 800d960:	461f      	mov	r7, r3
 800d962:	2209      	movs	r2, #9
 800d964:	3308      	adds	r3, #8
 800d966:	4606      	mov	r6, r0
 800d968:	fb93 f3f2 	sdiv	r3, r3, r2
 800d96c:	2100      	movs	r1, #0
 800d96e:	2201      	movs	r2, #1
 800d970:	429a      	cmp	r2, r3
 800d972:	db09      	blt.n	800d988 <__s2b+0x30>
 800d974:	4630      	mov	r0, r6
 800d976:	f7ff ff47 	bl	800d808 <_Balloc>
 800d97a:	b940      	cbnz	r0, 800d98e <__s2b+0x36>
 800d97c:	4602      	mov	r2, r0
 800d97e:	4b19      	ldr	r3, [pc, #100]	@ (800d9e4 <__s2b+0x8c>)
 800d980:	4819      	ldr	r0, [pc, #100]	@ (800d9e8 <__s2b+0x90>)
 800d982:	21d3      	movs	r1, #211	@ 0xd3
 800d984:	f001 fcb8 	bl	800f2f8 <__assert_func>
 800d988:	0052      	lsls	r2, r2, #1
 800d98a:	3101      	adds	r1, #1
 800d98c:	e7f0      	b.n	800d970 <__s2b+0x18>
 800d98e:	9b08      	ldr	r3, [sp, #32]
 800d990:	6143      	str	r3, [r0, #20]
 800d992:	2d09      	cmp	r5, #9
 800d994:	f04f 0301 	mov.w	r3, #1
 800d998:	6103      	str	r3, [r0, #16]
 800d99a:	dd16      	ble.n	800d9ca <__s2b+0x72>
 800d99c:	f104 0909 	add.w	r9, r4, #9
 800d9a0:	46c8      	mov	r8, r9
 800d9a2:	442c      	add	r4, r5
 800d9a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d9a8:	4601      	mov	r1, r0
 800d9aa:	3b30      	subs	r3, #48	@ 0x30
 800d9ac:	220a      	movs	r2, #10
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f7ff ff8c 	bl	800d8cc <__multadd>
 800d9b4:	45a0      	cmp	r8, r4
 800d9b6:	d1f5      	bne.n	800d9a4 <__s2b+0x4c>
 800d9b8:	f1a5 0408 	sub.w	r4, r5, #8
 800d9bc:	444c      	add	r4, r9
 800d9be:	1b2d      	subs	r5, r5, r4
 800d9c0:	1963      	adds	r3, r4, r5
 800d9c2:	42bb      	cmp	r3, r7
 800d9c4:	db04      	blt.n	800d9d0 <__s2b+0x78>
 800d9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ca:	340a      	adds	r4, #10
 800d9cc:	2509      	movs	r5, #9
 800d9ce:	e7f6      	b.n	800d9be <__s2b+0x66>
 800d9d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d9d4:	4601      	mov	r1, r0
 800d9d6:	3b30      	subs	r3, #48	@ 0x30
 800d9d8:	220a      	movs	r2, #10
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f7ff ff76 	bl	800d8cc <__multadd>
 800d9e0:	e7ee      	b.n	800d9c0 <__s2b+0x68>
 800d9e2:	bf00      	nop
 800d9e4:	080104ed 	.word	0x080104ed
 800d9e8:	080104fe 	.word	0x080104fe

0800d9ec <__hi0bits>:
 800d9ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	bf36      	itet	cc
 800d9f4:	0403      	lslcc	r3, r0, #16
 800d9f6:	2000      	movcs	r0, #0
 800d9f8:	2010      	movcc	r0, #16
 800d9fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9fe:	bf3c      	itt	cc
 800da00:	021b      	lslcc	r3, r3, #8
 800da02:	3008      	addcc	r0, #8
 800da04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da08:	bf3c      	itt	cc
 800da0a:	011b      	lslcc	r3, r3, #4
 800da0c:	3004      	addcc	r0, #4
 800da0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da12:	bf3c      	itt	cc
 800da14:	009b      	lslcc	r3, r3, #2
 800da16:	3002      	addcc	r0, #2
 800da18:	2b00      	cmp	r3, #0
 800da1a:	db05      	blt.n	800da28 <__hi0bits+0x3c>
 800da1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800da20:	f100 0001 	add.w	r0, r0, #1
 800da24:	bf08      	it	eq
 800da26:	2020      	moveq	r0, #32
 800da28:	4770      	bx	lr

0800da2a <__lo0bits>:
 800da2a:	6803      	ldr	r3, [r0, #0]
 800da2c:	4602      	mov	r2, r0
 800da2e:	f013 0007 	ands.w	r0, r3, #7
 800da32:	d00b      	beq.n	800da4c <__lo0bits+0x22>
 800da34:	07d9      	lsls	r1, r3, #31
 800da36:	d421      	bmi.n	800da7c <__lo0bits+0x52>
 800da38:	0798      	lsls	r0, r3, #30
 800da3a:	bf49      	itett	mi
 800da3c:	085b      	lsrmi	r3, r3, #1
 800da3e:	089b      	lsrpl	r3, r3, #2
 800da40:	2001      	movmi	r0, #1
 800da42:	6013      	strmi	r3, [r2, #0]
 800da44:	bf5c      	itt	pl
 800da46:	6013      	strpl	r3, [r2, #0]
 800da48:	2002      	movpl	r0, #2
 800da4a:	4770      	bx	lr
 800da4c:	b299      	uxth	r1, r3
 800da4e:	b909      	cbnz	r1, 800da54 <__lo0bits+0x2a>
 800da50:	0c1b      	lsrs	r3, r3, #16
 800da52:	2010      	movs	r0, #16
 800da54:	b2d9      	uxtb	r1, r3
 800da56:	b909      	cbnz	r1, 800da5c <__lo0bits+0x32>
 800da58:	3008      	adds	r0, #8
 800da5a:	0a1b      	lsrs	r3, r3, #8
 800da5c:	0719      	lsls	r1, r3, #28
 800da5e:	bf04      	itt	eq
 800da60:	091b      	lsreq	r3, r3, #4
 800da62:	3004      	addeq	r0, #4
 800da64:	0799      	lsls	r1, r3, #30
 800da66:	bf04      	itt	eq
 800da68:	089b      	lsreq	r3, r3, #2
 800da6a:	3002      	addeq	r0, #2
 800da6c:	07d9      	lsls	r1, r3, #31
 800da6e:	d403      	bmi.n	800da78 <__lo0bits+0x4e>
 800da70:	085b      	lsrs	r3, r3, #1
 800da72:	f100 0001 	add.w	r0, r0, #1
 800da76:	d003      	beq.n	800da80 <__lo0bits+0x56>
 800da78:	6013      	str	r3, [r2, #0]
 800da7a:	4770      	bx	lr
 800da7c:	2000      	movs	r0, #0
 800da7e:	4770      	bx	lr
 800da80:	2020      	movs	r0, #32
 800da82:	4770      	bx	lr

0800da84 <__i2b>:
 800da84:	b510      	push	{r4, lr}
 800da86:	460c      	mov	r4, r1
 800da88:	2101      	movs	r1, #1
 800da8a:	f7ff febd 	bl	800d808 <_Balloc>
 800da8e:	4602      	mov	r2, r0
 800da90:	b928      	cbnz	r0, 800da9e <__i2b+0x1a>
 800da92:	4b05      	ldr	r3, [pc, #20]	@ (800daa8 <__i2b+0x24>)
 800da94:	4805      	ldr	r0, [pc, #20]	@ (800daac <__i2b+0x28>)
 800da96:	f240 1145 	movw	r1, #325	@ 0x145
 800da9a:	f001 fc2d 	bl	800f2f8 <__assert_func>
 800da9e:	2301      	movs	r3, #1
 800daa0:	6144      	str	r4, [r0, #20]
 800daa2:	6103      	str	r3, [r0, #16]
 800daa4:	bd10      	pop	{r4, pc}
 800daa6:	bf00      	nop
 800daa8:	080104ed 	.word	0x080104ed
 800daac:	080104fe 	.word	0x080104fe

0800dab0 <__multiply>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	4617      	mov	r7, r2
 800dab6:	690a      	ldr	r2, [r1, #16]
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	429a      	cmp	r2, r3
 800dabc:	bfa8      	it	ge
 800dabe:	463b      	movge	r3, r7
 800dac0:	4689      	mov	r9, r1
 800dac2:	bfa4      	itt	ge
 800dac4:	460f      	movge	r7, r1
 800dac6:	4699      	movge	r9, r3
 800dac8:	693d      	ldr	r5, [r7, #16]
 800daca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	6879      	ldr	r1, [r7, #4]
 800dad2:	eb05 060a 	add.w	r6, r5, sl
 800dad6:	42b3      	cmp	r3, r6
 800dad8:	b085      	sub	sp, #20
 800dada:	bfb8      	it	lt
 800dadc:	3101      	addlt	r1, #1
 800dade:	f7ff fe93 	bl	800d808 <_Balloc>
 800dae2:	b930      	cbnz	r0, 800daf2 <__multiply+0x42>
 800dae4:	4602      	mov	r2, r0
 800dae6:	4b41      	ldr	r3, [pc, #260]	@ (800dbec <__multiply+0x13c>)
 800dae8:	4841      	ldr	r0, [pc, #260]	@ (800dbf0 <__multiply+0x140>)
 800daea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800daee:	f001 fc03 	bl	800f2f8 <__assert_func>
 800daf2:	f100 0414 	add.w	r4, r0, #20
 800daf6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dafa:	4623      	mov	r3, r4
 800dafc:	2200      	movs	r2, #0
 800dafe:	4573      	cmp	r3, lr
 800db00:	d320      	bcc.n	800db44 <__multiply+0x94>
 800db02:	f107 0814 	add.w	r8, r7, #20
 800db06:	f109 0114 	add.w	r1, r9, #20
 800db0a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800db0e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800db12:	9302      	str	r3, [sp, #8]
 800db14:	1beb      	subs	r3, r5, r7
 800db16:	3b15      	subs	r3, #21
 800db18:	f023 0303 	bic.w	r3, r3, #3
 800db1c:	3304      	adds	r3, #4
 800db1e:	3715      	adds	r7, #21
 800db20:	42bd      	cmp	r5, r7
 800db22:	bf38      	it	cc
 800db24:	2304      	movcc	r3, #4
 800db26:	9301      	str	r3, [sp, #4]
 800db28:	9b02      	ldr	r3, [sp, #8]
 800db2a:	9103      	str	r1, [sp, #12]
 800db2c:	428b      	cmp	r3, r1
 800db2e:	d80c      	bhi.n	800db4a <__multiply+0x9a>
 800db30:	2e00      	cmp	r6, #0
 800db32:	dd03      	ble.n	800db3c <__multiply+0x8c>
 800db34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d055      	beq.n	800dbe8 <__multiply+0x138>
 800db3c:	6106      	str	r6, [r0, #16]
 800db3e:	b005      	add	sp, #20
 800db40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db44:	f843 2b04 	str.w	r2, [r3], #4
 800db48:	e7d9      	b.n	800dafe <__multiply+0x4e>
 800db4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800db4e:	f1ba 0f00 	cmp.w	sl, #0
 800db52:	d01f      	beq.n	800db94 <__multiply+0xe4>
 800db54:	46c4      	mov	ip, r8
 800db56:	46a1      	mov	r9, r4
 800db58:	2700      	movs	r7, #0
 800db5a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db5e:	f8d9 3000 	ldr.w	r3, [r9]
 800db62:	fa1f fb82 	uxth.w	fp, r2
 800db66:	b29b      	uxth	r3, r3
 800db68:	fb0a 330b 	mla	r3, sl, fp, r3
 800db6c:	443b      	add	r3, r7
 800db6e:	f8d9 7000 	ldr.w	r7, [r9]
 800db72:	0c12      	lsrs	r2, r2, #16
 800db74:	0c3f      	lsrs	r7, r7, #16
 800db76:	fb0a 7202 	mla	r2, sl, r2, r7
 800db7a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800db7e:	b29b      	uxth	r3, r3
 800db80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db84:	4565      	cmp	r5, ip
 800db86:	f849 3b04 	str.w	r3, [r9], #4
 800db8a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800db8e:	d8e4      	bhi.n	800db5a <__multiply+0xaa>
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	50e7      	str	r7, [r4, r3]
 800db94:	9b03      	ldr	r3, [sp, #12]
 800db96:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800db9a:	3104      	adds	r1, #4
 800db9c:	f1b9 0f00 	cmp.w	r9, #0
 800dba0:	d020      	beq.n	800dbe4 <__multiply+0x134>
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	4647      	mov	r7, r8
 800dba6:	46a4      	mov	ip, r4
 800dba8:	f04f 0a00 	mov.w	sl, #0
 800dbac:	f8b7 b000 	ldrh.w	fp, [r7]
 800dbb0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dbb4:	fb09 220b 	mla	r2, r9, fp, r2
 800dbb8:	4452      	add	r2, sl
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbc0:	f84c 3b04 	str.w	r3, [ip], #4
 800dbc4:	f857 3b04 	ldr.w	r3, [r7], #4
 800dbc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbcc:	f8bc 3000 	ldrh.w	r3, [ip]
 800dbd0:	fb09 330a 	mla	r3, r9, sl, r3
 800dbd4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dbd8:	42bd      	cmp	r5, r7
 800dbda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbde:	d8e5      	bhi.n	800dbac <__multiply+0xfc>
 800dbe0:	9a01      	ldr	r2, [sp, #4]
 800dbe2:	50a3      	str	r3, [r4, r2]
 800dbe4:	3404      	adds	r4, #4
 800dbe6:	e79f      	b.n	800db28 <__multiply+0x78>
 800dbe8:	3e01      	subs	r6, #1
 800dbea:	e7a1      	b.n	800db30 <__multiply+0x80>
 800dbec:	080104ed 	.word	0x080104ed
 800dbf0:	080104fe 	.word	0x080104fe

0800dbf4 <__pow5mult>:
 800dbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbf8:	4615      	mov	r5, r2
 800dbfa:	f012 0203 	ands.w	r2, r2, #3
 800dbfe:	4607      	mov	r7, r0
 800dc00:	460e      	mov	r6, r1
 800dc02:	d007      	beq.n	800dc14 <__pow5mult+0x20>
 800dc04:	4c25      	ldr	r4, [pc, #148]	@ (800dc9c <__pow5mult+0xa8>)
 800dc06:	3a01      	subs	r2, #1
 800dc08:	2300      	movs	r3, #0
 800dc0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc0e:	f7ff fe5d 	bl	800d8cc <__multadd>
 800dc12:	4606      	mov	r6, r0
 800dc14:	10ad      	asrs	r5, r5, #2
 800dc16:	d03d      	beq.n	800dc94 <__pow5mult+0xa0>
 800dc18:	69fc      	ldr	r4, [r7, #28]
 800dc1a:	b97c      	cbnz	r4, 800dc3c <__pow5mult+0x48>
 800dc1c:	2010      	movs	r0, #16
 800dc1e:	f7ff fd3d 	bl	800d69c <malloc>
 800dc22:	4602      	mov	r2, r0
 800dc24:	61f8      	str	r0, [r7, #28]
 800dc26:	b928      	cbnz	r0, 800dc34 <__pow5mult+0x40>
 800dc28:	4b1d      	ldr	r3, [pc, #116]	@ (800dca0 <__pow5mult+0xac>)
 800dc2a:	481e      	ldr	r0, [pc, #120]	@ (800dca4 <__pow5mult+0xb0>)
 800dc2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dc30:	f001 fb62 	bl	800f2f8 <__assert_func>
 800dc34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc38:	6004      	str	r4, [r0, #0]
 800dc3a:	60c4      	str	r4, [r0, #12]
 800dc3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dc40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc44:	b94c      	cbnz	r4, 800dc5a <__pow5mult+0x66>
 800dc46:	f240 2171 	movw	r1, #625	@ 0x271
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	f7ff ff1a 	bl	800da84 <__i2b>
 800dc50:	2300      	movs	r3, #0
 800dc52:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc56:	4604      	mov	r4, r0
 800dc58:	6003      	str	r3, [r0, #0]
 800dc5a:	f04f 0900 	mov.w	r9, #0
 800dc5e:	07eb      	lsls	r3, r5, #31
 800dc60:	d50a      	bpl.n	800dc78 <__pow5mult+0x84>
 800dc62:	4631      	mov	r1, r6
 800dc64:	4622      	mov	r2, r4
 800dc66:	4638      	mov	r0, r7
 800dc68:	f7ff ff22 	bl	800dab0 <__multiply>
 800dc6c:	4631      	mov	r1, r6
 800dc6e:	4680      	mov	r8, r0
 800dc70:	4638      	mov	r0, r7
 800dc72:	f7ff fe09 	bl	800d888 <_Bfree>
 800dc76:	4646      	mov	r6, r8
 800dc78:	106d      	asrs	r5, r5, #1
 800dc7a:	d00b      	beq.n	800dc94 <__pow5mult+0xa0>
 800dc7c:	6820      	ldr	r0, [r4, #0]
 800dc7e:	b938      	cbnz	r0, 800dc90 <__pow5mult+0x9c>
 800dc80:	4622      	mov	r2, r4
 800dc82:	4621      	mov	r1, r4
 800dc84:	4638      	mov	r0, r7
 800dc86:	f7ff ff13 	bl	800dab0 <__multiply>
 800dc8a:	6020      	str	r0, [r4, #0]
 800dc8c:	f8c0 9000 	str.w	r9, [r0]
 800dc90:	4604      	mov	r4, r0
 800dc92:	e7e4      	b.n	800dc5e <__pow5mult+0x6a>
 800dc94:	4630      	mov	r0, r6
 800dc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc9a:	bf00      	nop
 800dc9c:	08010610 	.word	0x08010610
 800dca0:	0801047e 	.word	0x0801047e
 800dca4:	080104fe 	.word	0x080104fe

0800dca8 <__lshift>:
 800dca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcac:	460c      	mov	r4, r1
 800dcae:	6849      	ldr	r1, [r1, #4]
 800dcb0:	6923      	ldr	r3, [r4, #16]
 800dcb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcb6:	68a3      	ldr	r3, [r4, #8]
 800dcb8:	4607      	mov	r7, r0
 800dcba:	4691      	mov	r9, r2
 800dcbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dcc0:	f108 0601 	add.w	r6, r8, #1
 800dcc4:	42b3      	cmp	r3, r6
 800dcc6:	db0b      	blt.n	800dce0 <__lshift+0x38>
 800dcc8:	4638      	mov	r0, r7
 800dcca:	f7ff fd9d 	bl	800d808 <_Balloc>
 800dcce:	4605      	mov	r5, r0
 800dcd0:	b948      	cbnz	r0, 800dce6 <__lshift+0x3e>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	4b28      	ldr	r3, [pc, #160]	@ (800dd78 <__lshift+0xd0>)
 800dcd6:	4829      	ldr	r0, [pc, #164]	@ (800dd7c <__lshift+0xd4>)
 800dcd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dcdc:	f001 fb0c 	bl	800f2f8 <__assert_func>
 800dce0:	3101      	adds	r1, #1
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	e7ee      	b.n	800dcc4 <__lshift+0x1c>
 800dce6:	2300      	movs	r3, #0
 800dce8:	f100 0114 	add.w	r1, r0, #20
 800dcec:	f100 0210 	add.w	r2, r0, #16
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	4553      	cmp	r3, sl
 800dcf4:	db33      	blt.n	800dd5e <__lshift+0xb6>
 800dcf6:	6920      	ldr	r0, [r4, #16]
 800dcf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dcfc:	f104 0314 	add.w	r3, r4, #20
 800dd00:	f019 091f 	ands.w	r9, r9, #31
 800dd04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd0c:	d02b      	beq.n	800dd66 <__lshift+0xbe>
 800dd0e:	f1c9 0e20 	rsb	lr, r9, #32
 800dd12:	468a      	mov	sl, r1
 800dd14:	2200      	movs	r2, #0
 800dd16:	6818      	ldr	r0, [r3, #0]
 800dd18:	fa00 f009 	lsl.w	r0, r0, r9
 800dd1c:	4310      	orrs	r0, r2
 800dd1e:	f84a 0b04 	str.w	r0, [sl], #4
 800dd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd26:	459c      	cmp	ip, r3
 800dd28:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd2c:	d8f3      	bhi.n	800dd16 <__lshift+0x6e>
 800dd2e:	ebac 0304 	sub.w	r3, ip, r4
 800dd32:	3b15      	subs	r3, #21
 800dd34:	f023 0303 	bic.w	r3, r3, #3
 800dd38:	3304      	adds	r3, #4
 800dd3a:	f104 0015 	add.w	r0, r4, #21
 800dd3e:	4560      	cmp	r0, ip
 800dd40:	bf88      	it	hi
 800dd42:	2304      	movhi	r3, #4
 800dd44:	50ca      	str	r2, [r1, r3]
 800dd46:	b10a      	cbz	r2, 800dd4c <__lshift+0xa4>
 800dd48:	f108 0602 	add.w	r6, r8, #2
 800dd4c:	3e01      	subs	r6, #1
 800dd4e:	4638      	mov	r0, r7
 800dd50:	612e      	str	r6, [r5, #16]
 800dd52:	4621      	mov	r1, r4
 800dd54:	f7ff fd98 	bl	800d888 <_Bfree>
 800dd58:	4628      	mov	r0, r5
 800dd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd62:	3301      	adds	r3, #1
 800dd64:	e7c5      	b.n	800dcf2 <__lshift+0x4a>
 800dd66:	3904      	subs	r1, #4
 800dd68:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd70:	459c      	cmp	ip, r3
 800dd72:	d8f9      	bhi.n	800dd68 <__lshift+0xc0>
 800dd74:	e7ea      	b.n	800dd4c <__lshift+0xa4>
 800dd76:	bf00      	nop
 800dd78:	080104ed 	.word	0x080104ed
 800dd7c:	080104fe 	.word	0x080104fe

0800dd80 <__mcmp>:
 800dd80:	690a      	ldr	r2, [r1, #16]
 800dd82:	4603      	mov	r3, r0
 800dd84:	6900      	ldr	r0, [r0, #16]
 800dd86:	1a80      	subs	r0, r0, r2
 800dd88:	b530      	push	{r4, r5, lr}
 800dd8a:	d10e      	bne.n	800ddaa <__mcmp+0x2a>
 800dd8c:	3314      	adds	r3, #20
 800dd8e:	3114      	adds	r1, #20
 800dd90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dd94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dd98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dd9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dda0:	4295      	cmp	r5, r2
 800dda2:	d003      	beq.n	800ddac <__mcmp+0x2c>
 800dda4:	d205      	bcs.n	800ddb2 <__mcmp+0x32>
 800dda6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddaa:	bd30      	pop	{r4, r5, pc}
 800ddac:	42a3      	cmp	r3, r4
 800ddae:	d3f3      	bcc.n	800dd98 <__mcmp+0x18>
 800ddb0:	e7fb      	b.n	800ddaa <__mcmp+0x2a>
 800ddb2:	2001      	movs	r0, #1
 800ddb4:	e7f9      	b.n	800ddaa <__mcmp+0x2a>
	...

0800ddb8 <__mdiff>:
 800ddb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	4689      	mov	r9, r1
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	4648      	mov	r0, r9
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	f7ff ffdb 	bl	800dd80 <__mcmp>
 800ddca:	1e05      	subs	r5, r0, #0
 800ddcc:	d112      	bne.n	800ddf4 <__mdiff+0x3c>
 800ddce:	4629      	mov	r1, r5
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f7ff fd19 	bl	800d808 <_Balloc>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	b928      	cbnz	r0, 800dde6 <__mdiff+0x2e>
 800ddda:	4b3f      	ldr	r3, [pc, #252]	@ (800ded8 <__mdiff+0x120>)
 800dddc:	f240 2137 	movw	r1, #567	@ 0x237
 800dde0:	483e      	ldr	r0, [pc, #248]	@ (800dedc <__mdiff+0x124>)
 800dde2:	f001 fa89 	bl	800f2f8 <__assert_func>
 800dde6:	2301      	movs	r3, #1
 800dde8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ddec:	4610      	mov	r0, r2
 800ddee:	b003      	add	sp, #12
 800ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf4:	bfbc      	itt	lt
 800ddf6:	464b      	movlt	r3, r9
 800ddf8:	46a1      	movlt	r9, r4
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800de00:	bfba      	itte	lt
 800de02:	461c      	movlt	r4, r3
 800de04:	2501      	movlt	r5, #1
 800de06:	2500      	movge	r5, #0
 800de08:	f7ff fcfe 	bl	800d808 <_Balloc>
 800de0c:	4602      	mov	r2, r0
 800de0e:	b918      	cbnz	r0, 800de18 <__mdiff+0x60>
 800de10:	4b31      	ldr	r3, [pc, #196]	@ (800ded8 <__mdiff+0x120>)
 800de12:	f240 2145 	movw	r1, #581	@ 0x245
 800de16:	e7e3      	b.n	800dde0 <__mdiff+0x28>
 800de18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800de1c:	6926      	ldr	r6, [r4, #16]
 800de1e:	60c5      	str	r5, [r0, #12]
 800de20:	f109 0310 	add.w	r3, r9, #16
 800de24:	f109 0514 	add.w	r5, r9, #20
 800de28:	f104 0e14 	add.w	lr, r4, #20
 800de2c:	f100 0b14 	add.w	fp, r0, #20
 800de30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800de34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	46d9      	mov	r9, fp
 800de3c:	f04f 0c00 	mov.w	ip, #0
 800de40:	9b01      	ldr	r3, [sp, #4]
 800de42:	f85e 0b04 	ldr.w	r0, [lr], #4
 800de46:	f853 af04 	ldr.w	sl, [r3, #4]!
 800de4a:	9301      	str	r3, [sp, #4]
 800de4c:	fa1f f38a 	uxth.w	r3, sl
 800de50:	4619      	mov	r1, r3
 800de52:	b283      	uxth	r3, r0
 800de54:	1acb      	subs	r3, r1, r3
 800de56:	0c00      	lsrs	r0, r0, #16
 800de58:	4463      	add	r3, ip
 800de5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800de5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800de62:	b29b      	uxth	r3, r3
 800de64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800de68:	4576      	cmp	r6, lr
 800de6a:	f849 3b04 	str.w	r3, [r9], #4
 800de6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de72:	d8e5      	bhi.n	800de40 <__mdiff+0x88>
 800de74:	1b33      	subs	r3, r6, r4
 800de76:	3b15      	subs	r3, #21
 800de78:	f023 0303 	bic.w	r3, r3, #3
 800de7c:	3415      	adds	r4, #21
 800de7e:	3304      	adds	r3, #4
 800de80:	42a6      	cmp	r6, r4
 800de82:	bf38      	it	cc
 800de84:	2304      	movcc	r3, #4
 800de86:	441d      	add	r5, r3
 800de88:	445b      	add	r3, fp
 800de8a:	461e      	mov	r6, r3
 800de8c:	462c      	mov	r4, r5
 800de8e:	4544      	cmp	r4, r8
 800de90:	d30e      	bcc.n	800deb0 <__mdiff+0xf8>
 800de92:	f108 0103 	add.w	r1, r8, #3
 800de96:	1b49      	subs	r1, r1, r5
 800de98:	f021 0103 	bic.w	r1, r1, #3
 800de9c:	3d03      	subs	r5, #3
 800de9e:	45a8      	cmp	r8, r5
 800dea0:	bf38      	it	cc
 800dea2:	2100      	movcc	r1, #0
 800dea4:	440b      	add	r3, r1
 800dea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800deaa:	b191      	cbz	r1, 800ded2 <__mdiff+0x11a>
 800deac:	6117      	str	r7, [r2, #16]
 800deae:	e79d      	b.n	800ddec <__mdiff+0x34>
 800deb0:	f854 1b04 	ldr.w	r1, [r4], #4
 800deb4:	46e6      	mov	lr, ip
 800deb6:	0c08      	lsrs	r0, r1, #16
 800deb8:	fa1c fc81 	uxtah	ip, ip, r1
 800debc:	4471      	add	r1, lr
 800debe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dec2:	b289      	uxth	r1, r1
 800dec4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dec8:	f846 1b04 	str.w	r1, [r6], #4
 800decc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ded0:	e7dd      	b.n	800de8e <__mdiff+0xd6>
 800ded2:	3f01      	subs	r7, #1
 800ded4:	e7e7      	b.n	800dea6 <__mdiff+0xee>
 800ded6:	bf00      	nop
 800ded8:	080104ed 	.word	0x080104ed
 800dedc:	080104fe 	.word	0x080104fe

0800dee0 <__ulp>:
 800dee0:	b082      	sub	sp, #8
 800dee2:	ed8d 0b00 	vstr	d0, [sp]
 800dee6:	9a01      	ldr	r2, [sp, #4]
 800dee8:	4b0f      	ldr	r3, [pc, #60]	@ (800df28 <__ulp+0x48>)
 800deea:	4013      	ands	r3, r2
 800deec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800def0:	2b00      	cmp	r3, #0
 800def2:	dc08      	bgt.n	800df06 <__ulp+0x26>
 800def4:	425b      	negs	r3, r3
 800def6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800defa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800defe:	da04      	bge.n	800df0a <__ulp+0x2a>
 800df00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800df04:	4113      	asrs	r3, r2
 800df06:	2200      	movs	r2, #0
 800df08:	e008      	b.n	800df1c <__ulp+0x3c>
 800df0a:	f1a2 0314 	sub.w	r3, r2, #20
 800df0e:	2b1e      	cmp	r3, #30
 800df10:	bfda      	itte	le
 800df12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800df16:	40da      	lsrle	r2, r3
 800df18:	2201      	movgt	r2, #1
 800df1a:	2300      	movs	r3, #0
 800df1c:	4619      	mov	r1, r3
 800df1e:	4610      	mov	r0, r2
 800df20:	ec41 0b10 	vmov	d0, r0, r1
 800df24:	b002      	add	sp, #8
 800df26:	4770      	bx	lr
 800df28:	7ff00000 	.word	0x7ff00000

0800df2c <__b2d>:
 800df2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df30:	6906      	ldr	r6, [r0, #16]
 800df32:	f100 0814 	add.w	r8, r0, #20
 800df36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800df3a:	1f37      	subs	r7, r6, #4
 800df3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800df40:	4610      	mov	r0, r2
 800df42:	f7ff fd53 	bl	800d9ec <__hi0bits>
 800df46:	f1c0 0320 	rsb	r3, r0, #32
 800df4a:	280a      	cmp	r0, #10
 800df4c:	600b      	str	r3, [r1, #0]
 800df4e:	491b      	ldr	r1, [pc, #108]	@ (800dfbc <__b2d+0x90>)
 800df50:	dc15      	bgt.n	800df7e <__b2d+0x52>
 800df52:	f1c0 0c0b 	rsb	ip, r0, #11
 800df56:	fa22 f30c 	lsr.w	r3, r2, ip
 800df5a:	45b8      	cmp	r8, r7
 800df5c:	ea43 0501 	orr.w	r5, r3, r1
 800df60:	bf34      	ite	cc
 800df62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800df66:	2300      	movcs	r3, #0
 800df68:	3015      	adds	r0, #21
 800df6a:	fa02 f000 	lsl.w	r0, r2, r0
 800df6e:	fa23 f30c 	lsr.w	r3, r3, ip
 800df72:	4303      	orrs	r3, r0
 800df74:	461c      	mov	r4, r3
 800df76:	ec45 4b10 	vmov	d0, r4, r5
 800df7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df7e:	45b8      	cmp	r8, r7
 800df80:	bf3a      	itte	cc
 800df82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800df86:	f1a6 0708 	subcc.w	r7, r6, #8
 800df8a:	2300      	movcs	r3, #0
 800df8c:	380b      	subs	r0, #11
 800df8e:	d012      	beq.n	800dfb6 <__b2d+0x8a>
 800df90:	f1c0 0120 	rsb	r1, r0, #32
 800df94:	fa23 f401 	lsr.w	r4, r3, r1
 800df98:	4082      	lsls	r2, r0
 800df9a:	4322      	orrs	r2, r4
 800df9c:	4547      	cmp	r7, r8
 800df9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dfa2:	bf8c      	ite	hi
 800dfa4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dfa8:	2200      	movls	r2, #0
 800dfaa:	4083      	lsls	r3, r0
 800dfac:	40ca      	lsrs	r2, r1
 800dfae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	e7de      	b.n	800df74 <__b2d+0x48>
 800dfb6:	ea42 0501 	orr.w	r5, r2, r1
 800dfba:	e7db      	b.n	800df74 <__b2d+0x48>
 800dfbc:	3ff00000 	.word	0x3ff00000

0800dfc0 <__d2b>:
 800dfc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfc4:	460f      	mov	r7, r1
 800dfc6:	2101      	movs	r1, #1
 800dfc8:	ec59 8b10 	vmov	r8, r9, d0
 800dfcc:	4616      	mov	r6, r2
 800dfce:	f7ff fc1b 	bl	800d808 <_Balloc>
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	b930      	cbnz	r0, 800dfe4 <__d2b+0x24>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	4b23      	ldr	r3, [pc, #140]	@ (800e068 <__d2b+0xa8>)
 800dfda:	4824      	ldr	r0, [pc, #144]	@ (800e06c <__d2b+0xac>)
 800dfdc:	f240 310f 	movw	r1, #783	@ 0x30f
 800dfe0:	f001 f98a 	bl	800f2f8 <__assert_func>
 800dfe4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dfe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfec:	b10d      	cbz	r5, 800dff2 <__d2b+0x32>
 800dfee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dff2:	9301      	str	r3, [sp, #4]
 800dff4:	f1b8 0300 	subs.w	r3, r8, #0
 800dff8:	d023      	beq.n	800e042 <__d2b+0x82>
 800dffa:	4668      	mov	r0, sp
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	f7ff fd14 	bl	800da2a <__lo0bits>
 800e002:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e006:	b1d0      	cbz	r0, 800e03e <__d2b+0x7e>
 800e008:	f1c0 0320 	rsb	r3, r0, #32
 800e00c:	fa02 f303 	lsl.w	r3, r2, r3
 800e010:	430b      	orrs	r3, r1
 800e012:	40c2      	lsrs	r2, r0
 800e014:	6163      	str	r3, [r4, #20]
 800e016:	9201      	str	r2, [sp, #4]
 800e018:	9b01      	ldr	r3, [sp, #4]
 800e01a:	61a3      	str	r3, [r4, #24]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	bf0c      	ite	eq
 800e020:	2201      	moveq	r2, #1
 800e022:	2202      	movne	r2, #2
 800e024:	6122      	str	r2, [r4, #16]
 800e026:	b1a5      	cbz	r5, 800e052 <__d2b+0x92>
 800e028:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e02c:	4405      	add	r5, r0
 800e02e:	603d      	str	r5, [r7, #0]
 800e030:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e034:	6030      	str	r0, [r6, #0]
 800e036:	4620      	mov	r0, r4
 800e038:	b003      	add	sp, #12
 800e03a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e03e:	6161      	str	r1, [r4, #20]
 800e040:	e7ea      	b.n	800e018 <__d2b+0x58>
 800e042:	a801      	add	r0, sp, #4
 800e044:	f7ff fcf1 	bl	800da2a <__lo0bits>
 800e048:	9b01      	ldr	r3, [sp, #4]
 800e04a:	6163      	str	r3, [r4, #20]
 800e04c:	3020      	adds	r0, #32
 800e04e:	2201      	movs	r2, #1
 800e050:	e7e8      	b.n	800e024 <__d2b+0x64>
 800e052:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e056:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e05a:	6038      	str	r0, [r7, #0]
 800e05c:	6918      	ldr	r0, [r3, #16]
 800e05e:	f7ff fcc5 	bl	800d9ec <__hi0bits>
 800e062:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e066:	e7e5      	b.n	800e034 <__d2b+0x74>
 800e068:	080104ed 	.word	0x080104ed
 800e06c:	080104fe 	.word	0x080104fe

0800e070 <__ratio>:
 800e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	b085      	sub	sp, #20
 800e076:	e9cd 1000 	strd	r1, r0, [sp]
 800e07a:	a902      	add	r1, sp, #8
 800e07c:	f7ff ff56 	bl	800df2c <__b2d>
 800e080:	9800      	ldr	r0, [sp, #0]
 800e082:	a903      	add	r1, sp, #12
 800e084:	ec55 4b10 	vmov	r4, r5, d0
 800e088:	f7ff ff50 	bl	800df2c <__b2d>
 800e08c:	9b01      	ldr	r3, [sp, #4]
 800e08e:	6919      	ldr	r1, [r3, #16]
 800e090:	9b00      	ldr	r3, [sp, #0]
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	1ac9      	subs	r1, r1, r3
 800e096:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e09a:	1a9b      	subs	r3, r3, r2
 800e09c:	ec5b ab10 	vmov	sl, fp, d0
 800e0a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	bfce      	itee	gt
 800e0a8:	462a      	movgt	r2, r5
 800e0aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0ae:	465a      	movle	r2, fp
 800e0b0:	462f      	mov	r7, r5
 800e0b2:	46d9      	mov	r9, fp
 800e0b4:	bfcc      	ite	gt
 800e0b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e0ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e0be:	464b      	mov	r3, r9
 800e0c0:	4652      	mov	r2, sl
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	4639      	mov	r1, r7
 800e0c6:	f7f2 fbe9 	bl	800089c <__aeabi_ddiv>
 800e0ca:	ec41 0b10 	vmov	d0, r0, r1
 800e0ce:	b005      	add	sp, #20
 800e0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0d4 <__copybits>:
 800e0d4:	3901      	subs	r1, #1
 800e0d6:	b570      	push	{r4, r5, r6, lr}
 800e0d8:	1149      	asrs	r1, r1, #5
 800e0da:	6914      	ldr	r4, [r2, #16]
 800e0dc:	3101      	adds	r1, #1
 800e0de:	f102 0314 	add.w	r3, r2, #20
 800e0e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e0e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e0ea:	1f05      	subs	r5, r0, #4
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	d30c      	bcc.n	800e10a <__copybits+0x36>
 800e0f0:	1aa3      	subs	r3, r4, r2
 800e0f2:	3b11      	subs	r3, #17
 800e0f4:	f023 0303 	bic.w	r3, r3, #3
 800e0f8:	3211      	adds	r2, #17
 800e0fa:	42a2      	cmp	r2, r4
 800e0fc:	bf88      	it	hi
 800e0fe:	2300      	movhi	r3, #0
 800e100:	4418      	add	r0, r3
 800e102:	2300      	movs	r3, #0
 800e104:	4288      	cmp	r0, r1
 800e106:	d305      	bcc.n	800e114 <__copybits+0x40>
 800e108:	bd70      	pop	{r4, r5, r6, pc}
 800e10a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e10e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e112:	e7eb      	b.n	800e0ec <__copybits+0x18>
 800e114:	f840 3b04 	str.w	r3, [r0], #4
 800e118:	e7f4      	b.n	800e104 <__copybits+0x30>

0800e11a <__any_on>:
 800e11a:	f100 0214 	add.w	r2, r0, #20
 800e11e:	6900      	ldr	r0, [r0, #16]
 800e120:	114b      	asrs	r3, r1, #5
 800e122:	4298      	cmp	r0, r3
 800e124:	b510      	push	{r4, lr}
 800e126:	db11      	blt.n	800e14c <__any_on+0x32>
 800e128:	dd0a      	ble.n	800e140 <__any_on+0x26>
 800e12a:	f011 011f 	ands.w	r1, r1, #31
 800e12e:	d007      	beq.n	800e140 <__any_on+0x26>
 800e130:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e134:	fa24 f001 	lsr.w	r0, r4, r1
 800e138:	fa00 f101 	lsl.w	r1, r0, r1
 800e13c:	428c      	cmp	r4, r1
 800e13e:	d10b      	bne.n	800e158 <__any_on+0x3e>
 800e140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e144:	4293      	cmp	r3, r2
 800e146:	d803      	bhi.n	800e150 <__any_on+0x36>
 800e148:	2000      	movs	r0, #0
 800e14a:	bd10      	pop	{r4, pc}
 800e14c:	4603      	mov	r3, r0
 800e14e:	e7f7      	b.n	800e140 <__any_on+0x26>
 800e150:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e154:	2900      	cmp	r1, #0
 800e156:	d0f5      	beq.n	800e144 <__any_on+0x2a>
 800e158:	2001      	movs	r0, #1
 800e15a:	e7f6      	b.n	800e14a <__any_on+0x30>

0800e15c <sulp>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	4604      	mov	r4, r0
 800e160:	460d      	mov	r5, r1
 800e162:	ec45 4b10 	vmov	d0, r4, r5
 800e166:	4616      	mov	r6, r2
 800e168:	f7ff feba 	bl	800dee0 <__ulp>
 800e16c:	ec51 0b10 	vmov	r0, r1, d0
 800e170:	b17e      	cbz	r6, 800e192 <sulp+0x36>
 800e172:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e176:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	dd09      	ble.n	800e192 <sulp+0x36>
 800e17e:	051b      	lsls	r3, r3, #20
 800e180:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e184:	2400      	movs	r4, #0
 800e186:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e18a:	4622      	mov	r2, r4
 800e18c:	462b      	mov	r3, r5
 800e18e:	f7f2 fa5b 	bl	8000648 <__aeabi_dmul>
 800e192:	ec41 0b10 	vmov	d0, r0, r1
 800e196:	bd70      	pop	{r4, r5, r6, pc}

0800e198 <_strtod_l>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	b09f      	sub	sp, #124	@ 0x7c
 800e19e:	460c      	mov	r4, r1
 800e1a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800e1a6:	9005      	str	r0, [sp, #20]
 800e1a8:	f04f 0a00 	mov.w	sl, #0
 800e1ac:	f04f 0b00 	mov.w	fp, #0
 800e1b0:	460a      	mov	r2, r1
 800e1b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1b4:	7811      	ldrb	r1, [r2, #0]
 800e1b6:	292b      	cmp	r1, #43	@ 0x2b
 800e1b8:	d04a      	beq.n	800e250 <_strtod_l+0xb8>
 800e1ba:	d838      	bhi.n	800e22e <_strtod_l+0x96>
 800e1bc:	290d      	cmp	r1, #13
 800e1be:	d832      	bhi.n	800e226 <_strtod_l+0x8e>
 800e1c0:	2908      	cmp	r1, #8
 800e1c2:	d832      	bhi.n	800e22a <_strtod_l+0x92>
 800e1c4:	2900      	cmp	r1, #0
 800e1c6:	d03b      	beq.n	800e240 <_strtod_l+0xa8>
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e1ce:	782a      	ldrb	r2, [r5, #0]
 800e1d0:	2a30      	cmp	r2, #48	@ 0x30
 800e1d2:	f040 80b2 	bne.w	800e33a <_strtod_l+0x1a2>
 800e1d6:	786a      	ldrb	r2, [r5, #1]
 800e1d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e1dc:	2a58      	cmp	r2, #88	@ 0x58
 800e1de:	d16e      	bne.n	800e2be <_strtod_l+0x126>
 800e1e0:	9302      	str	r3, [sp, #8]
 800e1e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1e4:	9301      	str	r3, [sp, #4]
 800e1e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	4a8f      	ldr	r2, [pc, #572]	@ (800e428 <_strtod_l+0x290>)
 800e1ec:	9805      	ldr	r0, [sp, #20]
 800e1ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e1f0:	a919      	add	r1, sp, #100	@ 0x64
 800e1f2:	f001 f91b 	bl	800f42c <__gethex>
 800e1f6:	f010 060f 	ands.w	r6, r0, #15
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	d005      	beq.n	800e20a <_strtod_l+0x72>
 800e1fe:	2e06      	cmp	r6, #6
 800e200:	d128      	bne.n	800e254 <_strtod_l+0xbc>
 800e202:	3501      	adds	r5, #1
 800e204:	2300      	movs	r3, #0
 800e206:	9519      	str	r5, [sp, #100]	@ 0x64
 800e208:	930e      	str	r3, [sp, #56]	@ 0x38
 800e20a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f040 858e 	bne.w	800ed2e <_strtod_l+0xb96>
 800e212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e214:	b1cb      	cbz	r3, 800e24a <_strtod_l+0xb2>
 800e216:	4652      	mov	r2, sl
 800e218:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e21c:	ec43 2b10 	vmov	d0, r2, r3
 800e220:	b01f      	add	sp, #124	@ 0x7c
 800e222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e226:	2920      	cmp	r1, #32
 800e228:	d1ce      	bne.n	800e1c8 <_strtod_l+0x30>
 800e22a:	3201      	adds	r2, #1
 800e22c:	e7c1      	b.n	800e1b2 <_strtod_l+0x1a>
 800e22e:	292d      	cmp	r1, #45	@ 0x2d
 800e230:	d1ca      	bne.n	800e1c8 <_strtod_l+0x30>
 800e232:	2101      	movs	r1, #1
 800e234:	910e      	str	r1, [sp, #56]	@ 0x38
 800e236:	1c51      	adds	r1, r2, #1
 800e238:	9119      	str	r1, [sp, #100]	@ 0x64
 800e23a:	7852      	ldrb	r2, [r2, #1]
 800e23c:	2a00      	cmp	r2, #0
 800e23e:	d1c5      	bne.n	800e1cc <_strtod_l+0x34>
 800e240:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e242:	9419      	str	r4, [sp, #100]	@ 0x64
 800e244:	2b00      	cmp	r3, #0
 800e246:	f040 8570 	bne.w	800ed2a <_strtod_l+0xb92>
 800e24a:	4652      	mov	r2, sl
 800e24c:	465b      	mov	r3, fp
 800e24e:	e7e5      	b.n	800e21c <_strtod_l+0x84>
 800e250:	2100      	movs	r1, #0
 800e252:	e7ef      	b.n	800e234 <_strtod_l+0x9c>
 800e254:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e256:	b13a      	cbz	r2, 800e268 <_strtod_l+0xd0>
 800e258:	2135      	movs	r1, #53	@ 0x35
 800e25a:	a81c      	add	r0, sp, #112	@ 0x70
 800e25c:	f7ff ff3a 	bl	800e0d4 <__copybits>
 800e260:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e262:	9805      	ldr	r0, [sp, #20]
 800e264:	f7ff fb10 	bl	800d888 <_Bfree>
 800e268:	3e01      	subs	r6, #1
 800e26a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e26c:	2e04      	cmp	r6, #4
 800e26e:	d806      	bhi.n	800e27e <_strtod_l+0xe6>
 800e270:	e8df f006 	tbb	[pc, r6]
 800e274:	201d0314 	.word	0x201d0314
 800e278:	14          	.byte	0x14
 800e279:	00          	.byte	0x00
 800e27a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e27e:	05e1      	lsls	r1, r4, #23
 800e280:	bf48      	it	mi
 800e282:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e28a:	0d1b      	lsrs	r3, r3, #20
 800e28c:	051b      	lsls	r3, r3, #20
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1bb      	bne.n	800e20a <_strtod_l+0x72>
 800e292:	f7fe fb1f 	bl	800c8d4 <__errno>
 800e296:	2322      	movs	r3, #34	@ 0x22
 800e298:	6003      	str	r3, [r0, #0]
 800e29a:	e7b6      	b.n	800e20a <_strtod_l+0x72>
 800e29c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e2a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e2a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e2a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e2ac:	e7e7      	b.n	800e27e <_strtod_l+0xe6>
 800e2ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e430 <_strtod_l+0x298>
 800e2b2:	e7e4      	b.n	800e27e <_strtod_l+0xe6>
 800e2b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e2b8:	f04f 3aff 	mov.w	sl, #4294967295
 800e2bc:	e7df      	b.n	800e27e <_strtod_l+0xe6>
 800e2be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2c4:	785b      	ldrb	r3, [r3, #1]
 800e2c6:	2b30      	cmp	r3, #48	@ 0x30
 800e2c8:	d0f9      	beq.n	800e2be <_strtod_l+0x126>
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d09d      	beq.n	800e20a <_strtod_l+0x72>
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	2700      	movs	r7, #0
 800e2d2:	9308      	str	r3, [sp, #32]
 800e2d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2d8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e2da:	46b9      	mov	r9, r7
 800e2dc:	220a      	movs	r2, #10
 800e2de:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e2e0:	7805      	ldrb	r5, [r0, #0]
 800e2e2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e2e6:	b2d9      	uxtb	r1, r3
 800e2e8:	2909      	cmp	r1, #9
 800e2ea:	d928      	bls.n	800e33e <_strtod_l+0x1a6>
 800e2ec:	494f      	ldr	r1, [pc, #316]	@ (800e42c <_strtod_l+0x294>)
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f000 ffd6 	bl	800f2a0 <strncmp>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d032      	beq.n	800e35e <_strtod_l+0x1c6>
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	462a      	mov	r2, r5
 800e2fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e2fe:	464d      	mov	r5, r9
 800e300:	4603      	mov	r3, r0
 800e302:	2a65      	cmp	r2, #101	@ 0x65
 800e304:	d001      	beq.n	800e30a <_strtod_l+0x172>
 800e306:	2a45      	cmp	r2, #69	@ 0x45
 800e308:	d114      	bne.n	800e334 <_strtod_l+0x19c>
 800e30a:	b91d      	cbnz	r5, 800e314 <_strtod_l+0x17c>
 800e30c:	9a08      	ldr	r2, [sp, #32]
 800e30e:	4302      	orrs	r2, r0
 800e310:	d096      	beq.n	800e240 <_strtod_l+0xa8>
 800e312:	2500      	movs	r5, #0
 800e314:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e316:	1c62      	adds	r2, r4, #1
 800e318:	9219      	str	r2, [sp, #100]	@ 0x64
 800e31a:	7862      	ldrb	r2, [r4, #1]
 800e31c:	2a2b      	cmp	r2, #43	@ 0x2b
 800e31e:	d07a      	beq.n	800e416 <_strtod_l+0x27e>
 800e320:	2a2d      	cmp	r2, #45	@ 0x2d
 800e322:	d07e      	beq.n	800e422 <_strtod_l+0x28a>
 800e324:	f04f 0c00 	mov.w	ip, #0
 800e328:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e32c:	2909      	cmp	r1, #9
 800e32e:	f240 8085 	bls.w	800e43c <_strtod_l+0x2a4>
 800e332:	9419      	str	r4, [sp, #100]	@ 0x64
 800e334:	f04f 0800 	mov.w	r8, #0
 800e338:	e0a5      	b.n	800e486 <_strtod_l+0x2ee>
 800e33a:	2300      	movs	r3, #0
 800e33c:	e7c8      	b.n	800e2d0 <_strtod_l+0x138>
 800e33e:	f1b9 0f08 	cmp.w	r9, #8
 800e342:	bfd8      	it	le
 800e344:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e346:	f100 0001 	add.w	r0, r0, #1
 800e34a:	bfda      	itte	le
 800e34c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e350:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e352:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e356:	f109 0901 	add.w	r9, r9, #1
 800e35a:	9019      	str	r0, [sp, #100]	@ 0x64
 800e35c:	e7bf      	b.n	800e2de <_strtod_l+0x146>
 800e35e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	9219      	str	r2, [sp, #100]	@ 0x64
 800e364:	785a      	ldrb	r2, [r3, #1]
 800e366:	f1b9 0f00 	cmp.w	r9, #0
 800e36a:	d03b      	beq.n	800e3e4 <_strtod_l+0x24c>
 800e36c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e36e:	464d      	mov	r5, r9
 800e370:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e374:	2b09      	cmp	r3, #9
 800e376:	d912      	bls.n	800e39e <_strtod_l+0x206>
 800e378:	2301      	movs	r3, #1
 800e37a:	e7c2      	b.n	800e302 <_strtod_l+0x16a>
 800e37c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	9219      	str	r2, [sp, #100]	@ 0x64
 800e382:	785a      	ldrb	r2, [r3, #1]
 800e384:	3001      	adds	r0, #1
 800e386:	2a30      	cmp	r2, #48	@ 0x30
 800e388:	d0f8      	beq.n	800e37c <_strtod_l+0x1e4>
 800e38a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e38e:	2b08      	cmp	r3, #8
 800e390:	f200 84d2 	bhi.w	800ed38 <_strtod_l+0xba0>
 800e394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e396:	900a      	str	r0, [sp, #40]	@ 0x28
 800e398:	2000      	movs	r0, #0
 800e39a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e39c:	4605      	mov	r5, r0
 800e39e:	3a30      	subs	r2, #48	@ 0x30
 800e3a0:	f100 0301 	add.w	r3, r0, #1
 800e3a4:	d018      	beq.n	800e3d8 <_strtod_l+0x240>
 800e3a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3a8:	4419      	add	r1, r3
 800e3aa:	910a      	str	r1, [sp, #40]	@ 0x28
 800e3ac:	462e      	mov	r6, r5
 800e3ae:	f04f 0e0a 	mov.w	lr, #10
 800e3b2:	1c71      	adds	r1, r6, #1
 800e3b4:	eba1 0c05 	sub.w	ip, r1, r5
 800e3b8:	4563      	cmp	r3, ip
 800e3ba:	dc15      	bgt.n	800e3e8 <_strtod_l+0x250>
 800e3bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e3c0:	182b      	adds	r3, r5, r0
 800e3c2:	2b08      	cmp	r3, #8
 800e3c4:	f105 0501 	add.w	r5, r5, #1
 800e3c8:	4405      	add	r5, r0
 800e3ca:	dc1a      	bgt.n	800e402 <_strtod_l+0x26a>
 800e3cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3ce:	230a      	movs	r3, #10
 800e3d0:	fb03 2301 	mla	r3, r3, r1, r2
 800e3d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e3da:	1c51      	adds	r1, r2, #1
 800e3dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e3de:	7852      	ldrb	r2, [r2, #1]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	e7c5      	b.n	800e370 <_strtod_l+0x1d8>
 800e3e4:	4648      	mov	r0, r9
 800e3e6:	e7ce      	b.n	800e386 <_strtod_l+0x1ee>
 800e3e8:	2e08      	cmp	r6, #8
 800e3ea:	dc05      	bgt.n	800e3f8 <_strtod_l+0x260>
 800e3ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e3ee:	fb0e f606 	mul.w	r6, lr, r6
 800e3f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e3f4:	460e      	mov	r6, r1
 800e3f6:	e7dc      	b.n	800e3b2 <_strtod_l+0x21a>
 800e3f8:	2910      	cmp	r1, #16
 800e3fa:	bfd8      	it	le
 800e3fc:	fb0e f707 	mulle.w	r7, lr, r7
 800e400:	e7f8      	b.n	800e3f4 <_strtod_l+0x25c>
 800e402:	2b0f      	cmp	r3, #15
 800e404:	bfdc      	itt	le
 800e406:	230a      	movle	r3, #10
 800e408:	fb03 2707 	mlale	r7, r3, r7, r2
 800e40c:	e7e3      	b.n	800e3d6 <_strtod_l+0x23e>
 800e40e:	2300      	movs	r3, #0
 800e410:	930a      	str	r3, [sp, #40]	@ 0x28
 800e412:	2301      	movs	r3, #1
 800e414:	e77a      	b.n	800e30c <_strtod_l+0x174>
 800e416:	f04f 0c00 	mov.w	ip, #0
 800e41a:	1ca2      	adds	r2, r4, #2
 800e41c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e41e:	78a2      	ldrb	r2, [r4, #2]
 800e420:	e782      	b.n	800e328 <_strtod_l+0x190>
 800e422:	f04f 0c01 	mov.w	ip, #1
 800e426:	e7f8      	b.n	800e41a <_strtod_l+0x282>
 800e428:	08010724 	.word	0x08010724
 800e42c:	08010557 	.word	0x08010557
 800e430:	7ff00000 	.word	0x7ff00000
 800e434:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e436:	1c51      	adds	r1, r2, #1
 800e438:	9119      	str	r1, [sp, #100]	@ 0x64
 800e43a:	7852      	ldrb	r2, [r2, #1]
 800e43c:	2a30      	cmp	r2, #48	@ 0x30
 800e43e:	d0f9      	beq.n	800e434 <_strtod_l+0x29c>
 800e440:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e444:	2908      	cmp	r1, #8
 800e446:	f63f af75 	bhi.w	800e334 <_strtod_l+0x19c>
 800e44a:	3a30      	subs	r2, #48	@ 0x30
 800e44c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e44e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e450:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e452:	f04f 080a 	mov.w	r8, #10
 800e456:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e458:	1c56      	adds	r6, r2, #1
 800e45a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e45c:	7852      	ldrb	r2, [r2, #1]
 800e45e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e462:	f1be 0f09 	cmp.w	lr, #9
 800e466:	d939      	bls.n	800e4dc <_strtod_l+0x344>
 800e468:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e46a:	1a76      	subs	r6, r6, r1
 800e46c:	2e08      	cmp	r6, #8
 800e46e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e472:	dc03      	bgt.n	800e47c <_strtod_l+0x2e4>
 800e474:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e476:	4588      	cmp	r8, r1
 800e478:	bfa8      	it	ge
 800e47a:	4688      	movge	r8, r1
 800e47c:	f1bc 0f00 	cmp.w	ip, #0
 800e480:	d001      	beq.n	800e486 <_strtod_l+0x2ee>
 800e482:	f1c8 0800 	rsb	r8, r8, #0
 800e486:	2d00      	cmp	r5, #0
 800e488:	d14e      	bne.n	800e528 <_strtod_l+0x390>
 800e48a:	9908      	ldr	r1, [sp, #32]
 800e48c:	4308      	orrs	r0, r1
 800e48e:	f47f aebc 	bne.w	800e20a <_strtod_l+0x72>
 800e492:	2b00      	cmp	r3, #0
 800e494:	f47f aed4 	bne.w	800e240 <_strtod_l+0xa8>
 800e498:	2a69      	cmp	r2, #105	@ 0x69
 800e49a:	d028      	beq.n	800e4ee <_strtod_l+0x356>
 800e49c:	dc25      	bgt.n	800e4ea <_strtod_l+0x352>
 800e49e:	2a49      	cmp	r2, #73	@ 0x49
 800e4a0:	d025      	beq.n	800e4ee <_strtod_l+0x356>
 800e4a2:	2a4e      	cmp	r2, #78	@ 0x4e
 800e4a4:	f47f aecc 	bne.w	800e240 <_strtod_l+0xa8>
 800e4a8:	499a      	ldr	r1, [pc, #616]	@ (800e714 <_strtod_l+0x57c>)
 800e4aa:	a819      	add	r0, sp, #100	@ 0x64
 800e4ac:	f001 f9e0 	bl	800f870 <__match>
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	f43f aec5 	beq.w	800e240 <_strtod_l+0xa8>
 800e4b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b28      	cmp	r3, #40	@ 0x28
 800e4bc:	d12e      	bne.n	800e51c <_strtod_l+0x384>
 800e4be:	4996      	ldr	r1, [pc, #600]	@ (800e718 <_strtod_l+0x580>)
 800e4c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e4c2:	a819      	add	r0, sp, #100	@ 0x64
 800e4c4:	f001 f9e8 	bl	800f898 <__hexnan>
 800e4c8:	2805      	cmp	r0, #5
 800e4ca:	d127      	bne.n	800e51c <_strtod_l+0x384>
 800e4cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e4d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e4d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e4da:	e696      	b.n	800e20a <_strtod_l+0x72>
 800e4dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4de:	fb08 2101 	mla	r1, r8, r1, r2
 800e4e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e4e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4e8:	e7b5      	b.n	800e456 <_strtod_l+0x2be>
 800e4ea:	2a6e      	cmp	r2, #110	@ 0x6e
 800e4ec:	e7da      	b.n	800e4a4 <_strtod_l+0x30c>
 800e4ee:	498b      	ldr	r1, [pc, #556]	@ (800e71c <_strtod_l+0x584>)
 800e4f0:	a819      	add	r0, sp, #100	@ 0x64
 800e4f2:	f001 f9bd 	bl	800f870 <__match>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	f43f aea2 	beq.w	800e240 <_strtod_l+0xa8>
 800e4fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4fe:	4988      	ldr	r1, [pc, #544]	@ (800e720 <_strtod_l+0x588>)
 800e500:	3b01      	subs	r3, #1
 800e502:	a819      	add	r0, sp, #100	@ 0x64
 800e504:	9319      	str	r3, [sp, #100]	@ 0x64
 800e506:	f001 f9b3 	bl	800f870 <__match>
 800e50a:	b910      	cbnz	r0, 800e512 <_strtod_l+0x37a>
 800e50c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e50e:	3301      	adds	r3, #1
 800e510:	9319      	str	r3, [sp, #100]	@ 0x64
 800e512:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e730 <_strtod_l+0x598>
 800e516:	f04f 0a00 	mov.w	sl, #0
 800e51a:	e676      	b.n	800e20a <_strtod_l+0x72>
 800e51c:	4881      	ldr	r0, [pc, #516]	@ (800e724 <_strtod_l+0x58c>)
 800e51e:	f000 fee3 	bl	800f2e8 <nan>
 800e522:	ec5b ab10 	vmov	sl, fp, d0
 800e526:	e670      	b.n	800e20a <_strtod_l+0x72>
 800e528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e52a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e52c:	eba8 0303 	sub.w	r3, r8, r3
 800e530:	f1b9 0f00 	cmp.w	r9, #0
 800e534:	bf08      	it	eq
 800e536:	46a9      	moveq	r9, r5
 800e538:	2d10      	cmp	r5, #16
 800e53a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e53c:	462c      	mov	r4, r5
 800e53e:	bfa8      	it	ge
 800e540:	2410      	movge	r4, #16
 800e542:	f7f2 f807 	bl	8000554 <__aeabi_ui2d>
 800e546:	2d09      	cmp	r5, #9
 800e548:	4682      	mov	sl, r0
 800e54a:	468b      	mov	fp, r1
 800e54c:	dc13      	bgt.n	800e576 <_strtod_l+0x3de>
 800e54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e550:	2b00      	cmp	r3, #0
 800e552:	f43f ae5a 	beq.w	800e20a <_strtod_l+0x72>
 800e556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e558:	dd78      	ble.n	800e64c <_strtod_l+0x4b4>
 800e55a:	2b16      	cmp	r3, #22
 800e55c:	dc5f      	bgt.n	800e61e <_strtod_l+0x486>
 800e55e:	4972      	ldr	r1, [pc, #456]	@ (800e728 <_strtod_l+0x590>)
 800e560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e568:	4652      	mov	r2, sl
 800e56a:	465b      	mov	r3, fp
 800e56c:	f7f2 f86c 	bl	8000648 <__aeabi_dmul>
 800e570:	4682      	mov	sl, r0
 800e572:	468b      	mov	fp, r1
 800e574:	e649      	b.n	800e20a <_strtod_l+0x72>
 800e576:	4b6c      	ldr	r3, [pc, #432]	@ (800e728 <_strtod_l+0x590>)
 800e578:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e57c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e580:	f7f2 f862 	bl	8000648 <__aeabi_dmul>
 800e584:	4682      	mov	sl, r0
 800e586:	4638      	mov	r0, r7
 800e588:	468b      	mov	fp, r1
 800e58a:	f7f1 ffe3 	bl	8000554 <__aeabi_ui2d>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4650      	mov	r0, sl
 800e594:	4659      	mov	r1, fp
 800e596:	f7f1 fea1 	bl	80002dc <__adddf3>
 800e59a:	2d0f      	cmp	r5, #15
 800e59c:	4682      	mov	sl, r0
 800e59e:	468b      	mov	fp, r1
 800e5a0:	ddd5      	ble.n	800e54e <_strtod_l+0x3b6>
 800e5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5a4:	1b2c      	subs	r4, r5, r4
 800e5a6:	441c      	add	r4, r3
 800e5a8:	2c00      	cmp	r4, #0
 800e5aa:	f340 8093 	ble.w	800e6d4 <_strtod_l+0x53c>
 800e5ae:	f014 030f 	ands.w	r3, r4, #15
 800e5b2:	d00a      	beq.n	800e5ca <_strtod_l+0x432>
 800e5b4:	495c      	ldr	r1, [pc, #368]	@ (800e728 <_strtod_l+0x590>)
 800e5b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	465b      	mov	r3, fp
 800e5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5c2:	f7f2 f841 	bl	8000648 <__aeabi_dmul>
 800e5c6:	4682      	mov	sl, r0
 800e5c8:	468b      	mov	fp, r1
 800e5ca:	f034 040f 	bics.w	r4, r4, #15
 800e5ce:	d073      	beq.n	800e6b8 <_strtod_l+0x520>
 800e5d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e5d4:	dd49      	ble.n	800e66a <_strtod_l+0x4d2>
 800e5d6:	2400      	movs	r4, #0
 800e5d8:	46a0      	mov	r8, r4
 800e5da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e5dc:	46a1      	mov	r9, r4
 800e5de:	9a05      	ldr	r2, [sp, #20]
 800e5e0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e730 <_strtod_l+0x598>
 800e5e4:	2322      	movs	r3, #34	@ 0x22
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	f04f 0a00 	mov.w	sl, #0
 800e5ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f43f ae0b 	beq.w	800e20a <_strtod_l+0x72>
 800e5f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e5f6:	9805      	ldr	r0, [sp, #20]
 800e5f8:	f7ff f946 	bl	800d888 <_Bfree>
 800e5fc:	9805      	ldr	r0, [sp, #20]
 800e5fe:	4649      	mov	r1, r9
 800e600:	f7ff f942 	bl	800d888 <_Bfree>
 800e604:	9805      	ldr	r0, [sp, #20]
 800e606:	4641      	mov	r1, r8
 800e608:	f7ff f93e 	bl	800d888 <_Bfree>
 800e60c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e60e:	9805      	ldr	r0, [sp, #20]
 800e610:	f7ff f93a 	bl	800d888 <_Bfree>
 800e614:	9805      	ldr	r0, [sp, #20]
 800e616:	4621      	mov	r1, r4
 800e618:	f7ff f936 	bl	800d888 <_Bfree>
 800e61c:	e5f5      	b.n	800e20a <_strtod_l+0x72>
 800e61e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e620:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e624:	4293      	cmp	r3, r2
 800e626:	dbbc      	blt.n	800e5a2 <_strtod_l+0x40a>
 800e628:	4c3f      	ldr	r4, [pc, #252]	@ (800e728 <_strtod_l+0x590>)
 800e62a:	f1c5 050f 	rsb	r5, r5, #15
 800e62e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e632:	4652      	mov	r2, sl
 800e634:	465b      	mov	r3, fp
 800e636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e63a:	f7f2 f805 	bl	8000648 <__aeabi_dmul>
 800e63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e640:	1b5d      	subs	r5, r3, r5
 800e642:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e646:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e64a:	e78f      	b.n	800e56c <_strtod_l+0x3d4>
 800e64c:	3316      	adds	r3, #22
 800e64e:	dba8      	blt.n	800e5a2 <_strtod_l+0x40a>
 800e650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e652:	eba3 0808 	sub.w	r8, r3, r8
 800e656:	4b34      	ldr	r3, [pc, #208]	@ (800e728 <_strtod_l+0x590>)
 800e658:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e65c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e660:	4650      	mov	r0, sl
 800e662:	4659      	mov	r1, fp
 800e664:	f7f2 f91a 	bl	800089c <__aeabi_ddiv>
 800e668:	e782      	b.n	800e570 <_strtod_l+0x3d8>
 800e66a:	2300      	movs	r3, #0
 800e66c:	4f2f      	ldr	r7, [pc, #188]	@ (800e72c <_strtod_l+0x594>)
 800e66e:	1124      	asrs	r4, r4, #4
 800e670:	4650      	mov	r0, sl
 800e672:	4659      	mov	r1, fp
 800e674:	461e      	mov	r6, r3
 800e676:	2c01      	cmp	r4, #1
 800e678:	dc21      	bgt.n	800e6be <_strtod_l+0x526>
 800e67a:	b10b      	cbz	r3, 800e680 <_strtod_l+0x4e8>
 800e67c:	4682      	mov	sl, r0
 800e67e:	468b      	mov	fp, r1
 800e680:	492a      	ldr	r1, [pc, #168]	@ (800e72c <_strtod_l+0x594>)
 800e682:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e686:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e68a:	4652      	mov	r2, sl
 800e68c:	465b      	mov	r3, fp
 800e68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e692:	f7f1 ffd9 	bl	8000648 <__aeabi_dmul>
 800e696:	4b26      	ldr	r3, [pc, #152]	@ (800e730 <_strtod_l+0x598>)
 800e698:	460a      	mov	r2, r1
 800e69a:	400b      	ands	r3, r1
 800e69c:	4925      	ldr	r1, [pc, #148]	@ (800e734 <_strtod_l+0x59c>)
 800e69e:	428b      	cmp	r3, r1
 800e6a0:	4682      	mov	sl, r0
 800e6a2:	d898      	bhi.n	800e5d6 <_strtod_l+0x43e>
 800e6a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e6a8:	428b      	cmp	r3, r1
 800e6aa:	bf86      	itte	hi
 800e6ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e738 <_strtod_l+0x5a0>
 800e6b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800e6b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	9308      	str	r3, [sp, #32]
 800e6bc:	e076      	b.n	800e7ac <_strtod_l+0x614>
 800e6be:	07e2      	lsls	r2, r4, #31
 800e6c0:	d504      	bpl.n	800e6cc <_strtod_l+0x534>
 800e6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6c6:	f7f1 ffbf 	bl	8000648 <__aeabi_dmul>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	3601      	adds	r6, #1
 800e6ce:	1064      	asrs	r4, r4, #1
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	e7d0      	b.n	800e676 <_strtod_l+0x4de>
 800e6d4:	d0f0      	beq.n	800e6b8 <_strtod_l+0x520>
 800e6d6:	4264      	negs	r4, r4
 800e6d8:	f014 020f 	ands.w	r2, r4, #15
 800e6dc:	d00a      	beq.n	800e6f4 <_strtod_l+0x55c>
 800e6de:	4b12      	ldr	r3, [pc, #72]	@ (800e728 <_strtod_l+0x590>)
 800e6e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6e4:	4650      	mov	r0, sl
 800e6e6:	4659      	mov	r1, fp
 800e6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ec:	f7f2 f8d6 	bl	800089c <__aeabi_ddiv>
 800e6f0:	4682      	mov	sl, r0
 800e6f2:	468b      	mov	fp, r1
 800e6f4:	1124      	asrs	r4, r4, #4
 800e6f6:	d0df      	beq.n	800e6b8 <_strtod_l+0x520>
 800e6f8:	2c1f      	cmp	r4, #31
 800e6fa:	dd1f      	ble.n	800e73c <_strtod_l+0x5a4>
 800e6fc:	2400      	movs	r4, #0
 800e6fe:	46a0      	mov	r8, r4
 800e700:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e702:	46a1      	mov	r9, r4
 800e704:	9a05      	ldr	r2, [sp, #20]
 800e706:	2322      	movs	r3, #34	@ 0x22
 800e708:	f04f 0a00 	mov.w	sl, #0
 800e70c:	f04f 0b00 	mov.w	fp, #0
 800e710:	6013      	str	r3, [r2, #0]
 800e712:	e76b      	b.n	800e5ec <_strtod_l+0x454>
 800e714:	08010445 	.word	0x08010445
 800e718:	08010710 	.word	0x08010710
 800e71c:	0801043d 	.word	0x0801043d
 800e720:	08010474 	.word	0x08010474
 800e724:	080105ad 	.word	0x080105ad
 800e728:	08010648 	.word	0x08010648
 800e72c:	08010620 	.word	0x08010620
 800e730:	7ff00000 	.word	0x7ff00000
 800e734:	7ca00000 	.word	0x7ca00000
 800e738:	7fefffff 	.word	0x7fefffff
 800e73c:	f014 0310 	ands.w	r3, r4, #16
 800e740:	bf18      	it	ne
 800e742:	236a      	movne	r3, #106	@ 0x6a
 800e744:	4ea9      	ldr	r6, [pc, #676]	@ (800e9ec <_strtod_l+0x854>)
 800e746:	9308      	str	r3, [sp, #32]
 800e748:	4650      	mov	r0, sl
 800e74a:	4659      	mov	r1, fp
 800e74c:	2300      	movs	r3, #0
 800e74e:	07e7      	lsls	r7, r4, #31
 800e750:	d504      	bpl.n	800e75c <_strtod_l+0x5c4>
 800e752:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e756:	f7f1 ff77 	bl	8000648 <__aeabi_dmul>
 800e75a:	2301      	movs	r3, #1
 800e75c:	1064      	asrs	r4, r4, #1
 800e75e:	f106 0608 	add.w	r6, r6, #8
 800e762:	d1f4      	bne.n	800e74e <_strtod_l+0x5b6>
 800e764:	b10b      	cbz	r3, 800e76a <_strtod_l+0x5d2>
 800e766:	4682      	mov	sl, r0
 800e768:	468b      	mov	fp, r1
 800e76a:	9b08      	ldr	r3, [sp, #32]
 800e76c:	b1b3      	cbz	r3, 800e79c <_strtod_l+0x604>
 800e76e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e772:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e776:	2b00      	cmp	r3, #0
 800e778:	4659      	mov	r1, fp
 800e77a:	dd0f      	ble.n	800e79c <_strtod_l+0x604>
 800e77c:	2b1f      	cmp	r3, #31
 800e77e:	dd56      	ble.n	800e82e <_strtod_l+0x696>
 800e780:	2b34      	cmp	r3, #52	@ 0x34
 800e782:	bfde      	ittt	le
 800e784:	f04f 33ff 	movle.w	r3, #4294967295
 800e788:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e78c:	4093      	lslle	r3, r2
 800e78e:	f04f 0a00 	mov.w	sl, #0
 800e792:	bfcc      	ite	gt
 800e794:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e798:	ea03 0b01 	andle.w	fp, r3, r1
 800e79c:	2200      	movs	r2, #0
 800e79e:	2300      	movs	r3, #0
 800e7a0:	4650      	mov	r0, sl
 800e7a2:	4659      	mov	r1, fp
 800e7a4:	f7f2 f9b8 	bl	8000b18 <__aeabi_dcmpeq>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d1a7      	bne.n	800e6fc <_strtod_l+0x564>
 800e7ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e7b2:	9805      	ldr	r0, [sp, #20]
 800e7b4:	462b      	mov	r3, r5
 800e7b6:	464a      	mov	r2, r9
 800e7b8:	f7ff f8ce 	bl	800d958 <__s2b>
 800e7bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	f43f af09 	beq.w	800e5d6 <_strtod_l+0x43e>
 800e7c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7c8:	2a00      	cmp	r2, #0
 800e7ca:	eba3 0308 	sub.w	r3, r3, r8
 800e7ce:	bfa8      	it	ge
 800e7d0:	2300      	movge	r3, #0
 800e7d2:	9312      	str	r3, [sp, #72]	@ 0x48
 800e7d4:	2400      	movs	r4, #0
 800e7d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e7da:	9316      	str	r3, [sp, #88]	@ 0x58
 800e7dc:	46a0      	mov	r8, r4
 800e7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7e0:	9805      	ldr	r0, [sp, #20]
 800e7e2:	6859      	ldr	r1, [r3, #4]
 800e7e4:	f7ff f810 	bl	800d808 <_Balloc>
 800e7e8:	4681      	mov	r9, r0
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	f43f aef7 	beq.w	800e5de <_strtod_l+0x446>
 800e7f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7f2:	691a      	ldr	r2, [r3, #16]
 800e7f4:	3202      	adds	r2, #2
 800e7f6:	f103 010c 	add.w	r1, r3, #12
 800e7fa:	0092      	lsls	r2, r2, #2
 800e7fc:	300c      	adds	r0, #12
 800e7fe:	f7fe f896 	bl	800c92e <memcpy>
 800e802:	ec4b ab10 	vmov	d0, sl, fp
 800e806:	9805      	ldr	r0, [sp, #20]
 800e808:	aa1c      	add	r2, sp, #112	@ 0x70
 800e80a:	a91b      	add	r1, sp, #108	@ 0x6c
 800e80c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e810:	f7ff fbd6 	bl	800dfc0 <__d2b>
 800e814:	901a      	str	r0, [sp, #104]	@ 0x68
 800e816:	2800      	cmp	r0, #0
 800e818:	f43f aee1 	beq.w	800e5de <_strtod_l+0x446>
 800e81c:	9805      	ldr	r0, [sp, #20]
 800e81e:	2101      	movs	r1, #1
 800e820:	f7ff f930 	bl	800da84 <__i2b>
 800e824:	4680      	mov	r8, r0
 800e826:	b948      	cbnz	r0, 800e83c <_strtod_l+0x6a4>
 800e828:	f04f 0800 	mov.w	r8, #0
 800e82c:	e6d7      	b.n	800e5de <_strtod_l+0x446>
 800e82e:	f04f 32ff 	mov.w	r2, #4294967295
 800e832:	fa02 f303 	lsl.w	r3, r2, r3
 800e836:	ea03 0a0a 	and.w	sl, r3, sl
 800e83a:	e7af      	b.n	800e79c <_strtod_l+0x604>
 800e83c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e83e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e840:	2d00      	cmp	r5, #0
 800e842:	bfab      	itete	ge
 800e844:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e846:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e848:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e84a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e84c:	bfac      	ite	ge
 800e84e:	18ef      	addge	r7, r5, r3
 800e850:	1b5e      	sublt	r6, r3, r5
 800e852:	9b08      	ldr	r3, [sp, #32]
 800e854:	1aed      	subs	r5, r5, r3
 800e856:	4415      	add	r5, r2
 800e858:	4b65      	ldr	r3, [pc, #404]	@ (800e9f0 <_strtod_l+0x858>)
 800e85a:	3d01      	subs	r5, #1
 800e85c:	429d      	cmp	r5, r3
 800e85e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e862:	da50      	bge.n	800e906 <_strtod_l+0x76e>
 800e864:	1b5b      	subs	r3, r3, r5
 800e866:	2b1f      	cmp	r3, #31
 800e868:	eba2 0203 	sub.w	r2, r2, r3
 800e86c:	f04f 0101 	mov.w	r1, #1
 800e870:	dc3d      	bgt.n	800e8ee <_strtod_l+0x756>
 800e872:	fa01 f303 	lsl.w	r3, r1, r3
 800e876:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e878:	2300      	movs	r3, #0
 800e87a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e87c:	18bd      	adds	r5, r7, r2
 800e87e:	9b08      	ldr	r3, [sp, #32]
 800e880:	42af      	cmp	r7, r5
 800e882:	4416      	add	r6, r2
 800e884:	441e      	add	r6, r3
 800e886:	463b      	mov	r3, r7
 800e888:	bfa8      	it	ge
 800e88a:	462b      	movge	r3, r5
 800e88c:	42b3      	cmp	r3, r6
 800e88e:	bfa8      	it	ge
 800e890:	4633      	movge	r3, r6
 800e892:	2b00      	cmp	r3, #0
 800e894:	bfc2      	ittt	gt
 800e896:	1aed      	subgt	r5, r5, r3
 800e898:	1af6      	subgt	r6, r6, r3
 800e89a:	1aff      	subgt	r7, r7, r3
 800e89c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	dd16      	ble.n	800e8d0 <_strtod_l+0x738>
 800e8a2:	4641      	mov	r1, r8
 800e8a4:	9805      	ldr	r0, [sp, #20]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	f7ff f9a4 	bl	800dbf4 <__pow5mult>
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	d0ba      	beq.n	800e828 <_strtod_l+0x690>
 800e8b2:	4601      	mov	r1, r0
 800e8b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e8b6:	9805      	ldr	r0, [sp, #20]
 800e8b8:	f7ff f8fa 	bl	800dab0 <__multiply>
 800e8bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f43f ae8d 	beq.w	800e5de <_strtod_l+0x446>
 800e8c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8c6:	9805      	ldr	r0, [sp, #20]
 800e8c8:	f7fe ffde 	bl	800d888 <_Bfree>
 800e8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8d0:	2d00      	cmp	r5, #0
 800e8d2:	dc1d      	bgt.n	800e910 <_strtod_l+0x778>
 800e8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	dd23      	ble.n	800e922 <_strtod_l+0x78a>
 800e8da:	4649      	mov	r1, r9
 800e8dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e8de:	9805      	ldr	r0, [sp, #20]
 800e8e0:	f7ff f988 	bl	800dbf4 <__pow5mult>
 800e8e4:	4681      	mov	r9, r0
 800e8e6:	b9e0      	cbnz	r0, 800e922 <_strtod_l+0x78a>
 800e8e8:	f04f 0900 	mov.w	r9, #0
 800e8ec:	e677      	b.n	800e5de <_strtod_l+0x446>
 800e8ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e8f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e8f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e8fa:	35e2      	adds	r5, #226	@ 0xe2
 800e8fc:	fa01 f305 	lsl.w	r3, r1, r5
 800e900:	9310      	str	r3, [sp, #64]	@ 0x40
 800e902:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e904:	e7ba      	b.n	800e87c <_strtod_l+0x6e4>
 800e906:	2300      	movs	r3, #0
 800e908:	9310      	str	r3, [sp, #64]	@ 0x40
 800e90a:	2301      	movs	r3, #1
 800e90c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e90e:	e7b5      	b.n	800e87c <_strtod_l+0x6e4>
 800e910:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e912:	9805      	ldr	r0, [sp, #20]
 800e914:	462a      	mov	r2, r5
 800e916:	f7ff f9c7 	bl	800dca8 <__lshift>
 800e91a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d1d9      	bne.n	800e8d4 <_strtod_l+0x73c>
 800e920:	e65d      	b.n	800e5de <_strtod_l+0x446>
 800e922:	2e00      	cmp	r6, #0
 800e924:	dd07      	ble.n	800e936 <_strtod_l+0x79e>
 800e926:	4649      	mov	r1, r9
 800e928:	9805      	ldr	r0, [sp, #20]
 800e92a:	4632      	mov	r2, r6
 800e92c:	f7ff f9bc 	bl	800dca8 <__lshift>
 800e930:	4681      	mov	r9, r0
 800e932:	2800      	cmp	r0, #0
 800e934:	d0d8      	beq.n	800e8e8 <_strtod_l+0x750>
 800e936:	2f00      	cmp	r7, #0
 800e938:	dd08      	ble.n	800e94c <_strtod_l+0x7b4>
 800e93a:	4641      	mov	r1, r8
 800e93c:	9805      	ldr	r0, [sp, #20]
 800e93e:	463a      	mov	r2, r7
 800e940:	f7ff f9b2 	bl	800dca8 <__lshift>
 800e944:	4680      	mov	r8, r0
 800e946:	2800      	cmp	r0, #0
 800e948:	f43f ae49 	beq.w	800e5de <_strtod_l+0x446>
 800e94c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e94e:	9805      	ldr	r0, [sp, #20]
 800e950:	464a      	mov	r2, r9
 800e952:	f7ff fa31 	bl	800ddb8 <__mdiff>
 800e956:	4604      	mov	r4, r0
 800e958:	2800      	cmp	r0, #0
 800e95a:	f43f ae40 	beq.w	800e5de <_strtod_l+0x446>
 800e95e:	68c3      	ldr	r3, [r0, #12]
 800e960:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e962:	2300      	movs	r3, #0
 800e964:	60c3      	str	r3, [r0, #12]
 800e966:	4641      	mov	r1, r8
 800e968:	f7ff fa0a 	bl	800dd80 <__mcmp>
 800e96c:	2800      	cmp	r0, #0
 800e96e:	da45      	bge.n	800e9fc <_strtod_l+0x864>
 800e970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e972:	ea53 030a 	orrs.w	r3, r3, sl
 800e976:	d16b      	bne.n	800ea50 <_strtod_l+0x8b8>
 800e978:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d167      	bne.n	800ea50 <_strtod_l+0x8b8>
 800e980:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e984:	0d1b      	lsrs	r3, r3, #20
 800e986:	051b      	lsls	r3, r3, #20
 800e988:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e98c:	d960      	bls.n	800ea50 <_strtod_l+0x8b8>
 800e98e:	6963      	ldr	r3, [r4, #20]
 800e990:	b913      	cbnz	r3, 800e998 <_strtod_l+0x800>
 800e992:	6923      	ldr	r3, [r4, #16]
 800e994:	2b01      	cmp	r3, #1
 800e996:	dd5b      	ble.n	800ea50 <_strtod_l+0x8b8>
 800e998:	4621      	mov	r1, r4
 800e99a:	2201      	movs	r2, #1
 800e99c:	9805      	ldr	r0, [sp, #20]
 800e99e:	f7ff f983 	bl	800dca8 <__lshift>
 800e9a2:	4641      	mov	r1, r8
 800e9a4:	4604      	mov	r4, r0
 800e9a6:	f7ff f9eb 	bl	800dd80 <__mcmp>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	dd50      	ble.n	800ea50 <_strtod_l+0x8b8>
 800e9ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9b2:	9a08      	ldr	r2, [sp, #32]
 800e9b4:	0d1b      	lsrs	r3, r3, #20
 800e9b6:	051b      	lsls	r3, r3, #20
 800e9b8:	2a00      	cmp	r2, #0
 800e9ba:	d06a      	beq.n	800ea92 <_strtod_l+0x8fa>
 800e9bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e9c0:	d867      	bhi.n	800ea92 <_strtod_l+0x8fa>
 800e9c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e9c6:	f67f ae9d 	bls.w	800e704 <_strtod_l+0x56c>
 800e9ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e9f4 <_strtod_l+0x85c>)
 800e9cc:	4650      	mov	r0, sl
 800e9ce:	4659      	mov	r1, fp
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f7f1 fe39 	bl	8000648 <__aeabi_dmul>
 800e9d6:	4b08      	ldr	r3, [pc, #32]	@ (800e9f8 <_strtod_l+0x860>)
 800e9d8:	400b      	ands	r3, r1
 800e9da:	4682      	mov	sl, r0
 800e9dc:	468b      	mov	fp, r1
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f47f ae08 	bne.w	800e5f4 <_strtod_l+0x45c>
 800e9e4:	9a05      	ldr	r2, [sp, #20]
 800e9e6:	2322      	movs	r3, #34	@ 0x22
 800e9e8:	6013      	str	r3, [r2, #0]
 800e9ea:	e603      	b.n	800e5f4 <_strtod_l+0x45c>
 800e9ec:	08010738 	.word	0x08010738
 800e9f0:	fffffc02 	.word	0xfffffc02
 800e9f4:	39500000 	.word	0x39500000
 800e9f8:	7ff00000 	.word	0x7ff00000
 800e9fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ea00:	d165      	bne.n	800eace <_strtod_l+0x936>
 800ea02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ea04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea08:	b35a      	cbz	r2, 800ea62 <_strtod_l+0x8ca>
 800ea0a:	4a9f      	ldr	r2, [pc, #636]	@ (800ec88 <_strtod_l+0xaf0>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d12b      	bne.n	800ea68 <_strtod_l+0x8d0>
 800ea10:	9b08      	ldr	r3, [sp, #32]
 800ea12:	4651      	mov	r1, sl
 800ea14:	b303      	cbz	r3, 800ea58 <_strtod_l+0x8c0>
 800ea16:	4b9d      	ldr	r3, [pc, #628]	@ (800ec8c <_strtod_l+0xaf4>)
 800ea18:	465a      	mov	r2, fp
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ea20:	f04f 32ff 	mov.w	r2, #4294967295
 800ea24:	d81b      	bhi.n	800ea5e <_strtod_l+0x8c6>
 800ea26:	0d1b      	lsrs	r3, r3, #20
 800ea28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ea2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea30:	4299      	cmp	r1, r3
 800ea32:	d119      	bne.n	800ea68 <_strtod_l+0x8d0>
 800ea34:	4b96      	ldr	r3, [pc, #600]	@ (800ec90 <_strtod_l+0xaf8>)
 800ea36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d102      	bne.n	800ea42 <_strtod_l+0x8aa>
 800ea3c:	3101      	adds	r1, #1
 800ea3e:	f43f adce 	beq.w	800e5de <_strtod_l+0x446>
 800ea42:	4b92      	ldr	r3, [pc, #584]	@ (800ec8c <_strtod_l+0xaf4>)
 800ea44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea46:	401a      	ands	r2, r3
 800ea48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ea4c:	f04f 0a00 	mov.w	sl, #0
 800ea50:	9b08      	ldr	r3, [sp, #32]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d1b9      	bne.n	800e9ca <_strtod_l+0x832>
 800ea56:	e5cd      	b.n	800e5f4 <_strtod_l+0x45c>
 800ea58:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5c:	e7e8      	b.n	800ea30 <_strtod_l+0x898>
 800ea5e:	4613      	mov	r3, r2
 800ea60:	e7e6      	b.n	800ea30 <_strtod_l+0x898>
 800ea62:	ea53 030a 	orrs.w	r3, r3, sl
 800ea66:	d0a2      	beq.n	800e9ae <_strtod_l+0x816>
 800ea68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea6a:	b1db      	cbz	r3, 800eaa4 <_strtod_l+0x90c>
 800ea6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea6e:	4213      	tst	r3, r2
 800ea70:	d0ee      	beq.n	800ea50 <_strtod_l+0x8b8>
 800ea72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea74:	9a08      	ldr	r2, [sp, #32]
 800ea76:	4650      	mov	r0, sl
 800ea78:	4659      	mov	r1, fp
 800ea7a:	b1bb      	cbz	r3, 800eaac <_strtod_l+0x914>
 800ea7c:	f7ff fb6e 	bl	800e15c <sulp>
 800ea80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea84:	ec53 2b10 	vmov	r2, r3, d0
 800ea88:	f7f1 fc28 	bl	80002dc <__adddf3>
 800ea8c:	4682      	mov	sl, r0
 800ea8e:	468b      	mov	fp, r1
 800ea90:	e7de      	b.n	800ea50 <_strtod_l+0x8b8>
 800ea92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ea96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ea9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ea9e:	f04f 3aff 	mov.w	sl, #4294967295
 800eaa2:	e7d5      	b.n	800ea50 <_strtod_l+0x8b8>
 800eaa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eaa6:	ea13 0f0a 	tst.w	r3, sl
 800eaaa:	e7e1      	b.n	800ea70 <_strtod_l+0x8d8>
 800eaac:	f7ff fb56 	bl	800e15c <sulp>
 800eab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eab4:	ec53 2b10 	vmov	r2, r3, d0
 800eab8:	f7f1 fc0e 	bl	80002d8 <__aeabi_dsub>
 800eabc:	2200      	movs	r2, #0
 800eabe:	2300      	movs	r3, #0
 800eac0:	4682      	mov	sl, r0
 800eac2:	468b      	mov	fp, r1
 800eac4:	f7f2 f828 	bl	8000b18 <__aeabi_dcmpeq>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	d0c1      	beq.n	800ea50 <_strtod_l+0x8b8>
 800eacc:	e61a      	b.n	800e704 <_strtod_l+0x56c>
 800eace:	4641      	mov	r1, r8
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7ff facd 	bl	800e070 <__ratio>
 800ead6:	ec57 6b10 	vmov	r6, r7, d0
 800eada:	2200      	movs	r2, #0
 800eadc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eae0:	4630      	mov	r0, r6
 800eae2:	4639      	mov	r1, r7
 800eae4:	f7f2 f82c 	bl	8000b40 <__aeabi_dcmple>
 800eae8:	2800      	cmp	r0, #0
 800eaea:	d06f      	beq.n	800ebcc <_strtod_l+0xa34>
 800eaec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d17a      	bne.n	800ebe8 <_strtod_l+0xa50>
 800eaf2:	f1ba 0f00 	cmp.w	sl, #0
 800eaf6:	d158      	bne.n	800ebaa <_strtod_l+0xa12>
 800eaf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eafa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d15a      	bne.n	800ebb8 <_strtod_l+0xa20>
 800eb02:	4b64      	ldr	r3, [pc, #400]	@ (800ec94 <_strtod_l+0xafc>)
 800eb04:	2200      	movs	r2, #0
 800eb06:	4630      	mov	r0, r6
 800eb08:	4639      	mov	r1, r7
 800eb0a:	f7f2 f80f 	bl	8000b2c <__aeabi_dcmplt>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d159      	bne.n	800ebc6 <_strtod_l+0xa2e>
 800eb12:	4630      	mov	r0, r6
 800eb14:	4639      	mov	r1, r7
 800eb16:	4b60      	ldr	r3, [pc, #384]	@ (800ec98 <_strtod_l+0xb00>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f7f1 fd95 	bl	8000648 <__aeabi_dmul>
 800eb1e:	4606      	mov	r6, r0
 800eb20:	460f      	mov	r7, r1
 800eb22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eb26:	9606      	str	r6, [sp, #24]
 800eb28:	9307      	str	r3, [sp, #28]
 800eb2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb2e:	4d57      	ldr	r5, [pc, #348]	@ (800ec8c <_strtod_l+0xaf4>)
 800eb30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eb34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb36:	401d      	ands	r5, r3
 800eb38:	4b58      	ldr	r3, [pc, #352]	@ (800ec9c <_strtod_l+0xb04>)
 800eb3a:	429d      	cmp	r5, r3
 800eb3c:	f040 80b2 	bne.w	800eca4 <_strtod_l+0xb0c>
 800eb40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800eb46:	ec4b ab10 	vmov	d0, sl, fp
 800eb4a:	f7ff f9c9 	bl	800dee0 <__ulp>
 800eb4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb52:	ec51 0b10 	vmov	r0, r1, d0
 800eb56:	f7f1 fd77 	bl	8000648 <__aeabi_dmul>
 800eb5a:	4652      	mov	r2, sl
 800eb5c:	465b      	mov	r3, fp
 800eb5e:	f7f1 fbbd 	bl	80002dc <__adddf3>
 800eb62:	460b      	mov	r3, r1
 800eb64:	4949      	ldr	r1, [pc, #292]	@ (800ec8c <_strtod_l+0xaf4>)
 800eb66:	4a4e      	ldr	r2, [pc, #312]	@ (800eca0 <_strtod_l+0xb08>)
 800eb68:	4019      	ands	r1, r3
 800eb6a:	4291      	cmp	r1, r2
 800eb6c:	4682      	mov	sl, r0
 800eb6e:	d942      	bls.n	800ebf6 <_strtod_l+0xa5e>
 800eb70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb72:	4b47      	ldr	r3, [pc, #284]	@ (800ec90 <_strtod_l+0xaf8>)
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d103      	bne.n	800eb80 <_strtod_l+0x9e8>
 800eb78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	f43f ad2f 	beq.w	800e5de <_strtod_l+0x446>
 800eb80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ec90 <_strtod_l+0xaf8>
 800eb84:	f04f 3aff 	mov.w	sl, #4294967295
 800eb88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb8a:	9805      	ldr	r0, [sp, #20]
 800eb8c:	f7fe fe7c 	bl	800d888 <_Bfree>
 800eb90:	9805      	ldr	r0, [sp, #20]
 800eb92:	4649      	mov	r1, r9
 800eb94:	f7fe fe78 	bl	800d888 <_Bfree>
 800eb98:	9805      	ldr	r0, [sp, #20]
 800eb9a:	4641      	mov	r1, r8
 800eb9c:	f7fe fe74 	bl	800d888 <_Bfree>
 800eba0:	9805      	ldr	r0, [sp, #20]
 800eba2:	4621      	mov	r1, r4
 800eba4:	f7fe fe70 	bl	800d888 <_Bfree>
 800eba8:	e619      	b.n	800e7de <_strtod_l+0x646>
 800ebaa:	f1ba 0f01 	cmp.w	sl, #1
 800ebae:	d103      	bne.n	800ebb8 <_strtod_l+0xa20>
 800ebb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f43f ada6 	beq.w	800e704 <_strtod_l+0x56c>
 800ebb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ec68 <_strtod_l+0xad0>
 800ebbc:	4f35      	ldr	r7, [pc, #212]	@ (800ec94 <_strtod_l+0xafc>)
 800ebbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ebc2:	2600      	movs	r6, #0
 800ebc4:	e7b1      	b.n	800eb2a <_strtod_l+0x992>
 800ebc6:	4f34      	ldr	r7, [pc, #208]	@ (800ec98 <_strtod_l+0xb00>)
 800ebc8:	2600      	movs	r6, #0
 800ebca:	e7aa      	b.n	800eb22 <_strtod_l+0x98a>
 800ebcc:	4b32      	ldr	r3, [pc, #200]	@ (800ec98 <_strtod_l+0xb00>)
 800ebce:	4630      	mov	r0, r6
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f7f1 fd38 	bl	8000648 <__aeabi_dmul>
 800ebd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebda:	4606      	mov	r6, r0
 800ebdc:	460f      	mov	r7, r1
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d09f      	beq.n	800eb22 <_strtod_l+0x98a>
 800ebe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ebe6:	e7a0      	b.n	800eb2a <_strtod_l+0x992>
 800ebe8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ec70 <_strtod_l+0xad8>
 800ebec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ebf0:	ec57 6b17 	vmov	r6, r7, d7
 800ebf4:	e799      	b.n	800eb2a <_strtod_l+0x992>
 800ebf6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ebfa:	9b08      	ldr	r3, [sp, #32]
 800ebfc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1c1      	bne.n	800eb88 <_strtod_l+0x9f0>
 800ec04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec08:	0d1b      	lsrs	r3, r3, #20
 800ec0a:	051b      	lsls	r3, r3, #20
 800ec0c:	429d      	cmp	r5, r3
 800ec0e:	d1bb      	bne.n	800eb88 <_strtod_l+0x9f0>
 800ec10:	4630      	mov	r0, r6
 800ec12:	4639      	mov	r1, r7
 800ec14:	f7f2 f878 	bl	8000d08 <__aeabi_d2lz>
 800ec18:	f7f1 fce8 	bl	80005ec <__aeabi_l2d>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	4630      	mov	r0, r6
 800ec22:	4639      	mov	r1, r7
 800ec24:	f7f1 fb58 	bl	80002d8 <__aeabi_dsub>
 800ec28:	460b      	mov	r3, r1
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ec30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ec34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec36:	ea46 060a 	orr.w	r6, r6, sl
 800ec3a:	431e      	orrs	r6, r3
 800ec3c:	d06f      	beq.n	800ed1e <_strtod_l+0xb86>
 800ec3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec78 <_strtod_l+0xae0>)
 800ec40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec44:	f7f1 ff72 	bl	8000b2c <__aeabi_dcmplt>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	f47f acd3 	bne.w	800e5f4 <_strtod_l+0x45c>
 800ec4e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ec80 <_strtod_l+0xae8>)
 800ec50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec58:	f7f1 ff86 	bl	8000b68 <__aeabi_dcmpgt>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d093      	beq.n	800eb88 <_strtod_l+0x9f0>
 800ec60:	e4c8      	b.n	800e5f4 <_strtod_l+0x45c>
 800ec62:	bf00      	nop
 800ec64:	f3af 8000 	nop.w
 800ec68:	00000000 	.word	0x00000000
 800ec6c:	bff00000 	.word	0xbff00000
 800ec70:	00000000 	.word	0x00000000
 800ec74:	3ff00000 	.word	0x3ff00000
 800ec78:	94a03595 	.word	0x94a03595
 800ec7c:	3fdfffff 	.word	0x3fdfffff
 800ec80:	35afe535 	.word	0x35afe535
 800ec84:	3fe00000 	.word	0x3fe00000
 800ec88:	000fffff 	.word	0x000fffff
 800ec8c:	7ff00000 	.word	0x7ff00000
 800ec90:	7fefffff 	.word	0x7fefffff
 800ec94:	3ff00000 	.word	0x3ff00000
 800ec98:	3fe00000 	.word	0x3fe00000
 800ec9c:	7fe00000 	.word	0x7fe00000
 800eca0:	7c9fffff 	.word	0x7c9fffff
 800eca4:	9b08      	ldr	r3, [sp, #32]
 800eca6:	b323      	cbz	r3, 800ecf2 <_strtod_l+0xb5a>
 800eca8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ecac:	d821      	bhi.n	800ecf2 <_strtod_l+0xb5a>
 800ecae:	a328      	add	r3, pc, #160	@ (adr r3, 800ed50 <_strtod_l+0xbb8>)
 800ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	f7f1 ff42 	bl	8000b40 <__aeabi_dcmple>
 800ecbc:	b1a0      	cbz	r0, 800ece8 <_strtod_l+0xb50>
 800ecbe:	4639      	mov	r1, r7
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	f7f1 ff99 	bl	8000bf8 <__aeabi_d2uiz>
 800ecc6:	2801      	cmp	r0, #1
 800ecc8:	bf38      	it	cc
 800ecca:	2001      	movcc	r0, #1
 800eccc:	f7f1 fc42 	bl	8000554 <__aeabi_ui2d>
 800ecd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	460f      	mov	r7, r1
 800ecd6:	b9fb      	cbnz	r3, 800ed18 <_strtod_l+0xb80>
 800ecd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ecdc:	9014      	str	r0, [sp, #80]	@ 0x50
 800ecde:	9315      	str	r3, [sp, #84]	@ 0x54
 800ece0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ece4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ece8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ecea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ecee:	1b5b      	subs	r3, r3, r5
 800ecf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ecf2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ecf6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ecfa:	f7ff f8f1 	bl	800dee0 <__ulp>
 800ecfe:	4650      	mov	r0, sl
 800ed00:	ec53 2b10 	vmov	r2, r3, d0
 800ed04:	4659      	mov	r1, fp
 800ed06:	f7f1 fc9f 	bl	8000648 <__aeabi_dmul>
 800ed0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ed0e:	f7f1 fae5 	bl	80002dc <__adddf3>
 800ed12:	4682      	mov	sl, r0
 800ed14:	468b      	mov	fp, r1
 800ed16:	e770      	b.n	800ebfa <_strtod_l+0xa62>
 800ed18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ed1c:	e7e0      	b.n	800ece0 <_strtod_l+0xb48>
 800ed1e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ed58 <_strtod_l+0xbc0>)
 800ed20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed24:	f7f1 ff02 	bl	8000b2c <__aeabi_dcmplt>
 800ed28:	e798      	b.n	800ec5c <_strtod_l+0xac4>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ed2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ed30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed32:	6013      	str	r3, [r2, #0]
 800ed34:	f7ff ba6d 	b.w	800e212 <_strtod_l+0x7a>
 800ed38:	2a65      	cmp	r2, #101	@ 0x65
 800ed3a:	f43f ab68 	beq.w	800e40e <_strtod_l+0x276>
 800ed3e:	2a45      	cmp	r2, #69	@ 0x45
 800ed40:	f43f ab65 	beq.w	800e40e <_strtod_l+0x276>
 800ed44:	2301      	movs	r3, #1
 800ed46:	f7ff bba0 	b.w	800e48a <_strtod_l+0x2f2>
 800ed4a:	bf00      	nop
 800ed4c:	f3af 8000 	nop.w
 800ed50:	ffc00000 	.word	0xffc00000
 800ed54:	41dfffff 	.word	0x41dfffff
 800ed58:	94a03595 	.word	0x94a03595
 800ed5c:	3fcfffff 	.word	0x3fcfffff

0800ed60 <_strtod_r>:
 800ed60:	4b01      	ldr	r3, [pc, #4]	@ (800ed68 <_strtod_r+0x8>)
 800ed62:	f7ff ba19 	b.w	800e198 <_strtod_l>
 800ed66:	bf00      	nop
 800ed68:	20000568 	.word	0x20000568

0800ed6c <_strtol_l.isra.0>:
 800ed6c:	2b24      	cmp	r3, #36	@ 0x24
 800ed6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed72:	4686      	mov	lr, r0
 800ed74:	4690      	mov	r8, r2
 800ed76:	d801      	bhi.n	800ed7c <_strtol_l.isra.0+0x10>
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d106      	bne.n	800ed8a <_strtol_l.isra.0+0x1e>
 800ed7c:	f7fd fdaa 	bl	800c8d4 <__errno>
 800ed80:	2316      	movs	r3, #22
 800ed82:	6003      	str	r3, [r0, #0]
 800ed84:	2000      	movs	r0, #0
 800ed86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed8a:	4834      	ldr	r0, [pc, #208]	@ (800ee5c <_strtol_l.isra.0+0xf0>)
 800ed8c:	460d      	mov	r5, r1
 800ed8e:	462a      	mov	r2, r5
 800ed90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed94:	5d06      	ldrb	r6, [r0, r4]
 800ed96:	f016 0608 	ands.w	r6, r6, #8
 800ed9a:	d1f8      	bne.n	800ed8e <_strtol_l.isra.0+0x22>
 800ed9c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ed9e:	d110      	bne.n	800edc2 <_strtol_l.isra.0+0x56>
 800eda0:	782c      	ldrb	r4, [r5, #0]
 800eda2:	2601      	movs	r6, #1
 800eda4:	1c95      	adds	r5, r2, #2
 800eda6:	f033 0210 	bics.w	r2, r3, #16
 800edaa:	d115      	bne.n	800edd8 <_strtol_l.isra.0+0x6c>
 800edac:	2c30      	cmp	r4, #48	@ 0x30
 800edae:	d10d      	bne.n	800edcc <_strtol_l.isra.0+0x60>
 800edb0:	782a      	ldrb	r2, [r5, #0]
 800edb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800edb6:	2a58      	cmp	r2, #88	@ 0x58
 800edb8:	d108      	bne.n	800edcc <_strtol_l.isra.0+0x60>
 800edba:	786c      	ldrb	r4, [r5, #1]
 800edbc:	3502      	adds	r5, #2
 800edbe:	2310      	movs	r3, #16
 800edc0:	e00a      	b.n	800edd8 <_strtol_l.isra.0+0x6c>
 800edc2:	2c2b      	cmp	r4, #43	@ 0x2b
 800edc4:	bf04      	itt	eq
 800edc6:	782c      	ldrbeq	r4, [r5, #0]
 800edc8:	1c95      	addeq	r5, r2, #2
 800edca:	e7ec      	b.n	800eda6 <_strtol_l.isra.0+0x3a>
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1f6      	bne.n	800edbe <_strtol_l.isra.0+0x52>
 800edd0:	2c30      	cmp	r4, #48	@ 0x30
 800edd2:	bf14      	ite	ne
 800edd4:	230a      	movne	r3, #10
 800edd6:	2308      	moveq	r3, #8
 800edd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eddc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ede0:	2200      	movs	r2, #0
 800ede2:	fbbc f9f3 	udiv	r9, ip, r3
 800ede6:	4610      	mov	r0, r2
 800ede8:	fb03 ca19 	mls	sl, r3, r9, ip
 800edec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800edf0:	2f09      	cmp	r7, #9
 800edf2:	d80f      	bhi.n	800ee14 <_strtol_l.isra.0+0xa8>
 800edf4:	463c      	mov	r4, r7
 800edf6:	42a3      	cmp	r3, r4
 800edf8:	dd1b      	ble.n	800ee32 <_strtol_l.isra.0+0xc6>
 800edfa:	1c57      	adds	r7, r2, #1
 800edfc:	d007      	beq.n	800ee0e <_strtol_l.isra.0+0xa2>
 800edfe:	4581      	cmp	r9, r0
 800ee00:	d314      	bcc.n	800ee2c <_strtol_l.isra.0+0xc0>
 800ee02:	d101      	bne.n	800ee08 <_strtol_l.isra.0+0x9c>
 800ee04:	45a2      	cmp	sl, r4
 800ee06:	db11      	blt.n	800ee2c <_strtol_l.isra.0+0xc0>
 800ee08:	fb00 4003 	mla	r0, r0, r3, r4
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee12:	e7eb      	b.n	800edec <_strtol_l.isra.0+0x80>
 800ee14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ee18:	2f19      	cmp	r7, #25
 800ee1a:	d801      	bhi.n	800ee20 <_strtol_l.isra.0+0xb4>
 800ee1c:	3c37      	subs	r4, #55	@ 0x37
 800ee1e:	e7ea      	b.n	800edf6 <_strtol_l.isra.0+0x8a>
 800ee20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ee24:	2f19      	cmp	r7, #25
 800ee26:	d804      	bhi.n	800ee32 <_strtol_l.isra.0+0xc6>
 800ee28:	3c57      	subs	r4, #87	@ 0x57
 800ee2a:	e7e4      	b.n	800edf6 <_strtol_l.isra.0+0x8a>
 800ee2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee30:	e7ed      	b.n	800ee0e <_strtol_l.isra.0+0xa2>
 800ee32:	1c53      	adds	r3, r2, #1
 800ee34:	d108      	bne.n	800ee48 <_strtol_l.isra.0+0xdc>
 800ee36:	2322      	movs	r3, #34	@ 0x22
 800ee38:	f8ce 3000 	str.w	r3, [lr]
 800ee3c:	4660      	mov	r0, ip
 800ee3e:	f1b8 0f00 	cmp.w	r8, #0
 800ee42:	d0a0      	beq.n	800ed86 <_strtol_l.isra.0+0x1a>
 800ee44:	1e69      	subs	r1, r5, #1
 800ee46:	e006      	b.n	800ee56 <_strtol_l.isra.0+0xea>
 800ee48:	b106      	cbz	r6, 800ee4c <_strtol_l.isra.0+0xe0>
 800ee4a:	4240      	negs	r0, r0
 800ee4c:	f1b8 0f00 	cmp.w	r8, #0
 800ee50:	d099      	beq.n	800ed86 <_strtol_l.isra.0+0x1a>
 800ee52:	2a00      	cmp	r2, #0
 800ee54:	d1f6      	bne.n	800ee44 <_strtol_l.isra.0+0xd8>
 800ee56:	f8c8 1000 	str.w	r1, [r8]
 800ee5a:	e794      	b.n	800ed86 <_strtol_l.isra.0+0x1a>
 800ee5c:	08010761 	.word	0x08010761

0800ee60 <_strtol_r>:
 800ee60:	f7ff bf84 	b.w	800ed6c <_strtol_l.isra.0>

0800ee64 <__ssputs_r>:
 800ee64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee68:	688e      	ldr	r6, [r1, #8]
 800ee6a:	461f      	mov	r7, r3
 800ee6c:	42be      	cmp	r6, r7
 800ee6e:	680b      	ldr	r3, [r1, #0]
 800ee70:	4682      	mov	sl, r0
 800ee72:	460c      	mov	r4, r1
 800ee74:	4690      	mov	r8, r2
 800ee76:	d82d      	bhi.n	800eed4 <__ssputs_r+0x70>
 800ee78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ee80:	d026      	beq.n	800eed0 <__ssputs_r+0x6c>
 800ee82:	6965      	ldr	r5, [r4, #20]
 800ee84:	6909      	ldr	r1, [r1, #16]
 800ee86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee8a:	eba3 0901 	sub.w	r9, r3, r1
 800ee8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee92:	1c7b      	adds	r3, r7, #1
 800ee94:	444b      	add	r3, r9
 800ee96:	106d      	asrs	r5, r5, #1
 800ee98:	429d      	cmp	r5, r3
 800ee9a:	bf38      	it	cc
 800ee9c:	461d      	movcc	r5, r3
 800ee9e:	0553      	lsls	r3, r2, #21
 800eea0:	d527      	bpl.n	800eef2 <__ssputs_r+0x8e>
 800eea2:	4629      	mov	r1, r5
 800eea4:	f7fe fc24 	bl	800d6f0 <_malloc_r>
 800eea8:	4606      	mov	r6, r0
 800eeaa:	b360      	cbz	r0, 800ef06 <__ssputs_r+0xa2>
 800eeac:	6921      	ldr	r1, [r4, #16]
 800eeae:	464a      	mov	r2, r9
 800eeb0:	f7fd fd3d 	bl	800c92e <memcpy>
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eebe:	81a3      	strh	r3, [r4, #12]
 800eec0:	6126      	str	r6, [r4, #16]
 800eec2:	6165      	str	r5, [r4, #20]
 800eec4:	444e      	add	r6, r9
 800eec6:	eba5 0509 	sub.w	r5, r5, r9
 800eeca:	6026      	str	r6, [r4, #0]
 800eecc:	60a5      	str	r5, [r4, #8]
 800eece:	463e      	mov	r6, r7
 800eed0:	42be      	cmp	r6, r7
 800eed2:	d900      	bls.n	800eed6 <__ssputs_r+0x72>
 800eed4:	463e      	mov	r6, r7
 800eed6:	6820      	ldr	r0, [r4, #0]
 800eed8:	4632      	mov	r2, r6
 800eeda:	4641      	mov	r1, r8
 800eedc:	f000 f9c6 	bl	800f26c <memmove>
 800eee0:	68a3      	ldr	r3, [r4, #8]
 800eee2:	1b9b      	subs	r3, r3, r6
 800eee4:	60a3      	str	r3, [r4, #8]
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	4433      	add	r3, r6
 800eeea:	6023      	str	r3, [r4, #0]
 800eeec:	2000      	movs	r0, #0
 800eeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef2:	462a      	mov	r2, r5
 800eef4:	f000 fd7d 	bl	800f9f2 <_realloc_r>
 800eef8:	4606      	mov	r6, r0
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d1e0      	bne.n	800eec0 <__ssputs_r+0x5c>
 800eefe:	6921      	ldr	r1, [r4, #16]
 800ef00:	4650      	mov	r0, sl
 800ef02:	f7fe fb81 	bl	800d608 <_free_r>
 800ef06:	230c      	movs	r3, #12
 800ef08:	f8ca 3000 	str.w	r3, [sl]
 800ef0c:	89a3      	ldrh	r3, [r4, #12]
 800ef0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef12:	81a3      	strh	r3, [r4, #12]
 800ef14:	f04f 30ff 	mov.w	r0, #4294967295
 800ef18:	e7e9      	b.n	800eeee <__ssputs_r+0x8a>
	...

0800ef1c <_svfiprintf_r>:
 800ef1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef20:	4698      	mov	r8, r3
 800ef22:	898b      	ldrh	r3, [r1, #12]
 800ef24:	061b      	lsls	r3, r3, #24
 800ef26:	b09d      	sub	sp, #116	@ 0x74
 800ef28:	4607      	mov	r7, r0
 800ef2a:	460d      	mov	r5, r1
 800ef2c:	4614      	mov	r4, r2
 800ef2e:	d510      	bpl.n	800ef52 <_svfiprintf_r+0x36>
 800ef30:	690b      	ldr	r3, [r1, #16]
 800ef32:	b973      	cbnz	r3, 800ef52 <_svfiprintf_r+0x36>
 800ef34:	2140      	movs	r1, #64	@ 0x40
 800ef36:	f7fe fbdb 	bl	800d6f0 <_malloc_r>
 800ef3a:	6028      	str	r0, [r5, #0]
 800ef3c:	6128      	str	r0, [r5, #16]
 800ef3e:	b930      	cbnz	r0, 800ef4e <_svfiprintf_r+0x32>
 800ef40:	230c      	movs	r3, #12
 800ef42:	603b      	str	r3, [r7, #0]
 800ef44:	f04f 30ff 	mov.w	r0, #4294967295
 800ef48:	b01d      	add	sp, #116	@ 0x74
 800ef4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4e:	2340      	movs	r3, #64	@ 0x40
 800ef50:	616b      	str	r3, [r5, #20]
 800ef52:	2300      	movs	r3, #0
 800ef54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef56:	2320      	movs	r3, #32
 800ef58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef60:	2330      	movs	r3, #48	@ 0x30
 800ef62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f100 <_svfiprintf_r+0x1e4>
 800ef66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef6a:	f04f 0901 	mov.w	r9, #1
 800ef6e:	4623      	mov	r3, r4
 800ef70:	469a      	mov	sl, r3
 800ef72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef76:	b10a      	cbz	r2, 800ef7c <_svfiprintf_r+0x60>
 800ef78:	2a25      	cmp	r2, #37	@ 0x25
 800ef7a:	d1f9      	bne.n	800ef70 <_svfiprintf_r+0x54>
 800ef7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ef80:	d00b      	beq.n	800ef9a <_svfiprintf_r+0x7e>
 800ef82:	465b      	mov	r3, fp
 800ef84:	4622      	mov	r2, r4
 800ef86:	4629      	mov	r1, r5
 800ef88:	4638      	mov	r0, r7
 800ef8a:	f7ff ff6b 	bl	800ee64 <__ssputs_r>
 800ef8e:	3001      	adds	r0, #1
 800ef90:	f000 80a7 	beq.w	800f0e2 <_svfiprintf_r+0x1c6>
 800ef94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef96:	445a      	add	r2, fp
 800ef98:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f000 809f 	beq.w	800f0e2 <_svfiprintf_r+0x1c6>
 800efa4:	2300      	movs	r3, #0
 800efa6:	f04f 32ff 	mov.w	r2, #4294967295
 800efaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efae:	f10a 0a01 	add.w	sl, sl, #1
 800efb2:	9304      	str	r3, [sp, #16]
 800efb4:	9307      	str	r3, [sp, #28]
 800efb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efba:	931a      	str	r3, [sp, #104]	@ 0x68
 800efbc:	4654      	mov	r4, sl
 800efbe:	2205      	movs	r2, #5
 800efc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc4:	484e      	ldr	r0, [pc, #312]	@ (800f100 <_svfiprintf_r+0x1e4>)
 800efc6:	f7f1 f92b 	bl	8000220 <memchr>
 800efca:	9a04      	ldr	r2, [sp, #16]
 800efcc:	b9d8      	cbnz	r0, 800f006 <_svfiprintf_r+0xea>
 800efce:	06d0      	lsls	r0, r2, #27
 800efd0:	bf44      	itt	mi
 800efd2:	2320      	movmi	r3, #32
 800efd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efd8:	0711      	lsls	r1, r2, #28
 800efda:	bf44      	itt	mi
 800efdc:	232b      	movmi	r3, #43	@ 0x2b
 800efde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efe2:	f89a 3000 	ldrb.w	r3, [sl]
 800efe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800efe8:	d015      	beq.n	800f016 <_svfiprintf_r+0xfa>
 800efea:	9a07      	ldr	r2, [sp, #28]
 800efec:	4654      	mov	r4, sl
 800efee:	2000      	movs	r0, #0
 800eff0:	f04f 0c0a 	mov.w	ip, #10
 800eff4:	4621      	mov	r1, r4
 800eff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800effa:	3b30      	subs	r3, #48	@ 0x30
 800effc:	2b09      	cmp	r3, #9
 800effe:	d94b      	bls.n	800f098 <_svfiprintf_r+0x17c>
 800f000:	b1b0      	cbz	r0, 800f030 <_svfiprintf_r+0x114>
 800f002:	9207      	str	r2, [sp, #28]
 800f004:	e014      	b.n	800f030 <_svfiprintf_r+0x114>
 800f006:	eba0 0308 	sub.w	r3, r0, r8
 800f00a:	fa09 f303 	lsl.w	r3, r9, r3
 800f00e:	4313      	orrs	r3, r2
 800f010:	9304      	str	r3, [sp, #16]
 800f012:	46a2      	mov	sl, r4
 800f014:	e7d2      	b.n	800efbc <_svfiprintf_r+0xa0>
 800f016:	9b03      	ldr	r3, [sp, #12]
 800f018:	1d19      	adds	r1, r3, #4
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	9103      	str	r1, [sp, #12]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	bfbb      	ittet	lt
 800f022:	425b      	neglt	r3, r3
 800f024:	f042 0202 	orrlt.w	r2, r2, #2
 800f028:	9307      	strge	r3, [sp, #28]
 800f02a:	9307      	strlt	r3, [sp, #28]
 800f02c:	bfb8      	it	lt
 800f02e:	9204      	strlt	r2, [sp, #16]
 800f030:	7823      	ldrb	r3, [r4, #0]
 800f032:	2b2e      	cmp	r3, #46	@ 0x2e
 800f034:	d10a      	bne.n	800f04c <_svfiprintf_r+0x130>
 800f036:	7863      	ldrb	r3, [r4, #1]
 800f038:	2b2a      	cmp	r3, #42	@ 0x2a
 800f03a:	d132      	bne.n	800f0a2 <_svfiprintf_r+0x186>
 800f03c:	9b03      	ldr	r3, [sp, #12]
 800f03e:	1d1a      	adds	r2, r3, #4
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	9203      	str	r2, [sp, #12]
 800f044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f048:	3402      	adds	r4, #2
 800f04a:	9305      	str	r3, [sp, #20]
 800f04c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f110 <_svfiprintf_r+0x1f4>
 800f050:	7821      	ldrb	r1, [r4, #0]
 800f052:	2203      	movs	r2, #3
 800f054:	4650      	mov	r0, sl
 800f056:	f7f1 f8e3 	bl	8000220 <memchr>
 800f05a:	b138      	cbz	r0, 800f06c <_svfiprintf_r+0x150>
 800f05c:	9b04      	ldr	r3, [sp, #16]
 800f05e:	eba0 000a 	sub.w	r0, r0, sl
 800f062:	2240      	movs	r2, #64	@ 0x40
 800f064:	4082      	lsls	r2, r0
 800f066:	4313      	orrs	r3, r2
 800f068:	3401      	adds	r4, #1
 800f06a:	9304      	str	r3, [sp, #16]
 800f06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f070:	4824      	ldr	r0, [pc, #144]	@ (800f104 <_svfiprintf_r+0x1e8>)
 800f072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f076:	2206      	movs	r2, #6
 800f078:	f7f1 f8d2 	bl	8000220 <memchr>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d036      	beq.n	800f0ee <_svfiprintf_r+0x1d2>
 800f080:	4b21      	ldr	r3, [pc, #132]	@ (800f108 <_svfiprintf_r+0x1ec>)
 800f082:	bb1b      	cbnz	r3, 800f0cc <_svfiprintf_r+0x1b0>
 800f084:	9b03      	ldr	r3, [sp, #12]
 800f086:	3307      	adds	r3, #7
 800f088:	f023 0307 	bic.w	r3, r3, #7
 800f08c:	3308      	adds	r3, #8
 800f08e:	9303      	str	r3, [sp, #12]
 800f090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f092:	4433      	add	r3, r6
 800f094:	9309      	str	r3, [sp, #36]	@ 0x24
 800f096:	e76a      	b.n	800ef6e <_svfiprintf_r+0x52>
 800f098:	fb0c 3202 	mla	r2, ip, r2, r3
 800f09c:	460c      	mov	r4, r1
 800f09e:	2001      	movs	r0, #1
 800f0a0:	e7a8      	b.n	800eff4 <_svfiprintf_r+0xd8>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	3401      	adds	r4, #1
 800f0a6:	9305      	str	r3, [sp, #20]
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	f04f 0c0a 	mov.w	ip, #10
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0b4:	3a30      	subs	r2, #48	@ 0x30
 800f0b6:	2a09      	cmp	r2, #9
 800f0b8:	d903      	bls.n	800f0c2 <_svfiprintf_r+0x1a6>
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d0c6      	beq.n	800f04c <_svfiprintf_r+0x130>
 800f0be:	9105      	str	r1, [sp, #20]
 800f0c0:	e7c4      	b.n	800f04c <_svfiprintf_r+0x130>
 800f0c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e7f0      	b.n	800f0ae <_svfiprintf_r+0x192>
 800f0cc:	ab03      	add	r3, sp, #12
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	462a      	mov	r2, r5
 800f0d2:	4b0e      	ldr	r3, [pc, #56]	@ (800f10c <_svfiprintf_r+0x1f0>)
 800f0d4:	a904      	add	r1, sp, #16
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f7fc fcbe 	bl	800ba58 <_printf_float>
 800f0dc:	1c42      	adds	r2, r0, #1
 800f0de:	4606      	mov	r6, r0
 800f0e0:	d1d6      	bne.n	800f090 <_svfiprintf_r+0x174>
 800f0e2:	89ab      	ldrh	r3, [r5, #12]
 800f0e4:	065b      	lsls	r3, r3, #25
 800f0e6:	f53f af2d 	bmi.w	800ef44 <_svfiprintf_r+0x28>
 800f0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0ec:	e72c      	b.n	800ef48 <_svfiprintf_r+0x2c>
 800f0ee:	ab03      	add	r3, sp, #12
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	462a      	mov	r2, r5
 800f0f4:	4b05      	ldr	r3, [pc, #20]	@ (800f10c <_svfiprintf_r+0x1f0>)
 800f0f6:	a904      	add	r1, sp, #16
 800f0f8:	4638      	mov	r0, r7
 800f0fa:	f7fc ff45 	bl	800bf88 <_printf_i>
 800f0fe:	e7ed      	b.n	800f0dc <_svfiprintf_r+0x1c0>
 800f100:	08010559 	.word	0x08010559
 800f104:	08010563 	.word	0x08010563
 800f108:	0800ba59 	.word	0x0800ba59
 800f10c:	0800ee65 	.word	0x0800ee65
 800f110:	0801055f 	.word	0x0801055f

0800f114 <__sflush_r>:
 800f114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f11c:	0716      	lsls	r6, r2, #28
 800f11e:	4605      	mov	r5, r0
 800f120:	460c      	mov	r4, r1
 800f122:	d454      	bmi.n	800f1ce <__sflush_r+0xba>
 800f124:	684b      	ldr	r3, [r1, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	dc02      	bgt.n	800f130 <__sflush_r+0x1c>
 800f12a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	dd48      	ble.n	800f1c2 <__sflush_r+0xae>
 800f130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f132:	2e00      	cmp	r6, #0
 800f134:	d045      	beq.n	800f1c2 <__sflush_r+0xae>
 800f136:	2300      	movs	r3, #0
 800f138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f13c:	682f      	ldr	r7, [r5, #0]
 800f13e:	6a21      	ldr	r1, [r4, #32]
 800f140:	602b      	str	r3, [r5, #0]
 800f142:	d030      	beq.n	800f1a6 <__sflush_r+0x92>
 800f144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f146:	89a3      	ldrh	r3, [r4, #12]
 800f148:	0759      	lsls	r1, r3, #29
 800f14a:	d505      	bpl.n	800f158 <__sflush_r+0x44>
 800f14c:	6863      	ldr	r3, [r4, #4]
 800f14e:	1ad2      	subs	r2, r2, r3
 800f150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f152:	b10b      	cbz	r3, 800f158 <__sflush_r+0x44>
 800f154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f156:	1ad2      	subs	r2, r2, r3
 800f158:	2300      	movs	r3, #0
 800f15a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f15c:	6a21      	ldr	r1, [r4, #32]
 800f15e:	4628      	mov	r0, r5
 800f160:	47b0      	blx	r6
 800f162:	1c43      	adds	r3, r0, #1
 800f164:	89a3      	ldrh	r3, [r4, #12]
 800f166:	d106      	bne.n	800f176 <__sflush_r+0x62>
 800f168:	6829      	ldr	r1, [r5, #0]
 800f16a:	291d      	cmp	r1, #29
 800f16c:	d82b      	bhi.n	800f1c6 <__sflush_r+0xb2>
 800f16e:	4a2a      	ldr	r2, [pc, #168]	@ (800f218 <__sflush_r+0x104>)
 800f170:	40ca      	lsrs	r2, r1
 800f172:	07d6      	lsls	r6, r2, #31
 800f174:	d527      	bpl.n	800f1c6 <__sflush_r+0xb2>
 800f176:	2200      	movs	r2, #0
 800f178:	6062      	str	r2, [r4, #4]
 800f17a:	04d9      	lsls	r1, r3, #19
 800f17c:	6922      	ldr	r2, [r4, #16]
 800f17e:	6022      	str	r2, [r4, #0]
 800f180:	d504      	bpl.n	800f18c <__sflush_r+0x78>
 800f182:	1c42      	adds	r2, r0, #1
 800f184:	d101      	bne.n	800f18a <__sflush_r+0x76>
 800f186:	682b      	ldr	r3, [r5, #0]
 800f188:	b903      	cbnz	r3, 800f18c <__sflush_r+0x78>
 800f18a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f18e:	602f      	str	r7, [r5, #0]
 800f190:	b1b9      	cbz	r1, 800f1c2 <__sflush_r+0xae>
 800f192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f196:	4299      	cmp	r1, r3
 800f198:	d002      	beq.n	800f1a0 <__sflush_r+0x8c>
 800f19a:	4628      	mov	r0, r5
 800f19c:	f7fe fa34 	bl	800d608 <_free_r>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1a4:	e00d      	b.n	800f1c2 <__sflush_r+0xae>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	47b0      	blx	r6
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	1c50      	adds	r0, r2, #1
 800f1b0:	d1c9      	bne.n	800f146 <__sflush_r+0x32>
 800f1b2:	682b      	ldr	r3, [r5, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d0c6      	beq.n	800f146 <__sflush_r+0x32>
 800f1b8:	2b1d      	cmp	r3, #29
 800f1ba:	d001      	beq.n	800f1c0 <__sflush_r+0xac>
 800f1bc:	2b16      	cmp	r3, #22
 800f1be:	d11e      	bne.n	800f1fe <__sflush_r+0xea>
 800f1c0:	602f      	str	r7, [r5, #0]
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	e022      	b.n	800f20c <__sflush_r+0xf8>
 800f1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1ca:	b21b      	sxth	r3, r3
 800f1cc:	e01b      	b.n	800f206 <__sflush_r+0xf2>
 800f1ce:	690f      	ldr	r7, [r1, #16]
 800f1d0:	2f00      	cmp	r7, #0
 800f1d2:	d0f6      	beq.n	800f1c2 <__sflush_r+0xae>
 800f1d4:	0793      	lsls	r3, r2, #30
 800f1d6:	680e      	ldr	r6, [r1, #0]
 800f1d8:	bf08      	it	eq
 800f1da:	694b      	ldreq	r3, [r1, #20]
 800f1dc:	600f      	str	r7, [r1, #0]
 800f1de:	bf18      	it	ne
 800f1e0:	2300      	movne	r3, #0
 800f1e2:	eba6 0807 	sub.w	r8, r6, r7
 800f1e6:	608b      	str	r3, [r1, #8]
 800f1e8:	f1b8 0f00 	cmp.w	r8, #0
 800f1ec:	dde9      	ble.n	800f1c2 <__sflush_r+0xae>
 800f1ee:	6a21      	ldr	r1, [r4, #32]
 800f1f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f1f2:	4643      	mov	r3, r8
 800f1f4:	463a      	mov	r2, r7
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	47b0      	blx	r6
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	dc08      	bgt.n	800f210 <__sflush_r+0xfc>
 800f1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f206:	81a3      	strh	r3, [r4, #12]
 800f208:	f04f 30ff 	mov.w	r0, #4294967295
 800f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f210:	4407      	add	r7, r0
 800f212:	eba8 0800 	sub.w	r8, r8, r0
 800f216:	e7e7      	b.n	800f1e8 <__sflush_r+0xd4>
 800f218:	20400001 	.word	0x20400001

0800f21c <_fflush_r>:
 800f21c:	b538      	push	{r3, r4, r5, lr}
 800f21e:	690b      	ldr	r3, [r1, #16]
 800f220:	4605      	mov	r5, r0
 800f222:	460c      	mov	r4, r1
 800f224:	b913      	cbnz	r3, 800f22c <_fflush_r+0x10>
 800f226:	2500      	movs	r5, #0
 800f228:	4628      	mov	r0, r5
 800f22a:	bd38      	pop	{r3, r4, r5, pc}
 800f22c:	b118      	cbz	r0, 800f236 <_fflush_r+0x1a>
 800f22e:	6a03      	ldr	r3, [r0, #32]
 800f230:	b90b      	cbnz	r3, 800f236 <_fflush_r+0x1a>
 800f232:	f7fd fa61 	bl	800c6f8 <__sinit>
 800f236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0f3      	beq.n	800f226 <_fflush_r+0xa>
 800f23e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f240:	07d0      	lsls	r0, r2, #31
 800f242:	d404      	bmi.n	800f24e <_fflush_r+0x32>
 800f244:	0599      	lsls	r1, r3, #22
 800f246:	d402      	bmi.n	800f24e <_fflush_r+0x32>
 800f248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f24a:	f7fd fb6e 	bl	800c92a <__retarget_lock_acquire_recursive>
 800f24e:	4628      	mov	r0, r5
 800f250:	4621      	mov	r1, r4
 800f252:	f7ff ff5f 	bl	800f114 <__sflush_r>
 800f256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f258:	07da      	lsls	r2, r3, #31
 800f25a:	4605      	mov	r5, r0
 800f25c:	d4e4      	bmi.n	800f228 <_fflush_r+0xc>
 800f25e:	89a3      	ldrh	r3, [r4, #12]
 800f260:	059b      	lsls	r3, r3, #22
 800f262:	d4e1      	bmi.n	800f228 <_fflush_r+0xc>
 800f264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f266:	f7fd fb61 	bl	800c92c <__retarget_lock_release_recursive>
 800f26a:	e7dd      	b.n	800f228 <_fflush_r+0xc>

0800f26c <memmove>:
 800f26c:	4288      	cmp	r0, r1
 800f26e:	b510      	push	{r4, lr}
 800f270:	eb01 0402 	add.w	r4, r1, r2
 800f274:	d902      	bls.n	800f27c <memmove+0x10>
 800f276:	4284      	cmp	r4, r0
 800f278:	4623      	mov	r3, r4
 800f27a:	d807      	bhi.n	800f28c <memmove+0x20>
 800f27c:	1e43      	subs	r3, r0, #1
 800f27e:	42a1      	cmp	r1, r4
 800f280:	d008      	beq.n	800f294 <memmove+0x28>
 800f282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f28a:	e7f8      	b.n	800f27e <memmove+0x12>
 800f28c:	4402      	add	r2, r0
 800f28e:	4601      	mov	r1, r0
 800f290:	428a      	cmp	r2, r1
 800f292:	d100      	bne.n	800f296 <memmove+0x2a>
 800f294:	bd10      	pop	{r4, pc}
 800f296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f29a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f29e:	e7f7      	b.n	800f290 <memmove+0x24>

0800f2a0 <strncmp>:
 800f2a0:	b510      	push	{r4, lr}
 800f2a2:	b16a      	cbz	r2, 800f2c0 <strncmp+0x20>
 800f2a4:	3901      	subs	r1, #1
 800f2a6:	1884      	adds	r4, r0, r2
 800f2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d103      	bne.n	800f2bc <strncmp+0x1c>
 800f2b4:	42a0      	cmp	r0, r4
 800f2b6:	d001      	beq.n	800f2bc <strncmp+0x1c>
 800f2b8:	2a00      	cmp	r2, #0
 800f2ba:	d1f5      	bne.n	800f2a8 <strncmp+0x8>
 800f2bc:	1ad0      	subs	r0, r2, r3
 800f2be:	bd10      	pop	{r4, pc}
 800f2c0:	4610      	mov	r0, r2
 800f2c2:	e7fc      	b.n	800f2be <strncmp+0x1e>

0800f2c4 <_sbrk_r>:
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	4d06      	ldr	r5, [pc, #24]	@ (800f2e0 <_sbrk_r+0x1c>)
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	4608      	mov	r0, r1
 800f2ce:	602b      	str	r3, [r5, #0]
 800f2d0:	f7f6 f9ce 	bl	8005670 <_sbrk>
 800f2d4:	1c43      	adds	r3, r0, #1
 800f2d6:	d102      	bne.n	800f2de <_sbrk_r+0x1a>
 800f2d8:	682b      	ldr	r3, [r5, #0]
 800f2da:	b103      	cbz	r3, 800f2de <_sbrk_r+0x1a>
 800f2dc:	6023      	str	r3, [r4, #0]
 800f2de:	bd38      	pop	{r3, r4, r5, pc}
 800f2e0:	20002094 	.word	0x20002094
 800f2e4:	00000000 	.word	0x00000000

0800f2e8 <nan>:
 800f2e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f2f0 <nan+0x8>
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	00000000 	.word	0x00000000
 800f2f4:	7ff80000 	.word	0x7ff80000

0800f2f8 <__assert_func>:
 800f2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2fa:	4614      	mov	r4, r2
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	4b09      	ldr	r3, [pc, #36]	@ (800f324 <__assert_func+0x2c>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4605      	mov	r5, r0
 800f304:	68d8      	ldr	r0, [r3, #12]
 800f306:	b14c      	cbz	r4, 800f31c <__assert_func+0x24>
 800f308:	4b07      	ldr	r3, [pc, #28]	@ (800f328 <__assert_func+0x30>)
 800f30a:	9100      	str	r1, [sp, #0]
 800f30c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f310:	4906      	ldr	r1, [pc, #24]	@ (800f32c <__assert_func+0x34>)
 800f312:	462b      	mov	r3, r5
 800f314:	f000 fba8 	bl	800fa68 <fiprintf>
 800f318:	f000 fbb8 	bl	800fa8c <abort>
 800f31c:	4b04      	ldr	r3, [pc, #16]	@ (800f330 <__assert_func+0x38>)
 800f31e:	461c      	mov	r4, r3
 800f320:	e7f3      	b.n	800f30a <__assert_func+0x12>
 800f322:	bf00      	nop
 800f324:	20000518 	.word	0x20000518
 800f328:	08010572 	.word	0x08010572
 800f32c:	0801057f 	.word	0x0801057f
 800f330:	080105ad 	.word	0x080105ad

0800f334 <_calloc_r>:
 800f334:	b570      	push	{r4, r5, r6, lr}
 800f336:	fba1 5402 	umull	r5, r4, r1, r2
 800f33a:	b934      	cbnz	r4, 800f34a <_calloc_r+0x16>
 800f33c:	4629      	mov	r1, r5
 800f33e:	f7fe f9d7 	bl	800d6f0 <_malloc_r>
 800f342:	4606      	mov	r6, r0
 800f344:	b928      	cbnz	r0, 800f352 <_calloc_r+0x1e>
 800f346:	4630      	mov	r0, r6
 800f348:	bd70      	pop	{r4, r5, r6, pc}
 800f34a:	220c      	movs	r2, #12
 800f34c:	6002      	str	r2, [r0, #0]
 800f34e:	2600      	movs	r6, #0
 800f350:	e7f9      	b.n	800f346 <_calloc_r+0x12>
 800f352:	462a      	mov	r2, r5
 800f354:	4621      	mov	r1, r4
 800f356:	f7fd fa6a 	bl	800c82e <memset>
 800f35a:	e7f4      	b.n	800f346 <_calloc_r+0x12>

0800f35c <rshift>:
 800f35c:	6903      	ldr	r3, [r0, #16]
 800f35e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f366:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f36a:	f100 0414 	add.w	r4, r0, #20
 800f36e:	dd45      	ble.n	800f3fc <rshift+0xa0>
 800f370:	f011 011f 	ands.w	r1, r1, #31
 800f374:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f378:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f37c:	d10c      	bne.n	800f398 <rshift+0x3c>
 800f37e:	f100 0710 	add.w	r7, r0, #16
 800f382:	4629      	mov	r1, r5
 800f384:	42b1      	cmp	r1, r6
 800f386:	d334      	bcc.n	800f3f2 <rshift+0x96>
 800f388:	1a9b      	subs	r3, r3, r2
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	1eea      	subs	r2, r5, #3
 800f38e:	4296      	cmp	r6, r2
 800f390:	bf38      	it	cc
 800f392:	2300      	movcc	r3, #0
 800f394:	4423      	add	r3, r4
 800f396:	e015      	b.n	800f3c4 <rshift+0x68>
 800f398:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f39c:	f1c1 0820 	rsb	r8, r1, #32
 800f3a0:	40cf      	lsrs	r7, r1
 800f3a2:	f105 0e04 	add.w	lr, r5, #4
 800f3a6:	46a1      	mov	r9, r4
 800f3a8:	4576      	cmp	r6, lr
 800f3aa:	46f4      	mov	ip, lr
 800f3ac:	d815      	bhi.n	800f3da <rshift+0x7e>
 800f3ae:	1a9a      	subs	r2, r3, r2
 800f3b0:	0092      	lsls	r2, r2, #2
 800f3b2:	3a04      	subs	r2, #4
 800f3b4:	3501      	adds	r5, #1
 800f3b6:	42ae      	cmp	r6, r5
 800f3b8:	bf38      	it	cc
 800f3ba:	2200      	movcc	r2, #0
 800f3bc:	18a3      	adds	r3, r4, r2
 800f3be:	50a7      	str	r7, [r4, r2]
 800f3c0:	b107      	cbz	r7, 800f3c4 <rshift+0x68>
 800f3c2:	3304      	adds	r3, #4
 800f3c4:	1b1a      	subs	r2, r3, r4
 800f3c6:	42a3      	cmp	r3, r4
 800f3c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f3cc:	bf08      	it	eq
 800f3ce:	2300      	moveq	r3, #0
 800f3d0:	6102      	str	r2, [r0, #16]
 800f3d2:	bf08      	it	eq
 800f3d4:	6143      	streq	r3, [r0, #20]
 800f3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3da:	f8dc c000 	ldr.w	ip, [ip]
 800f3de:	fa0c fc08 	lsl.w	ip, ip, r8
 800f3e2:	ea4c 0707 	orr.w	r7, ip, r7
 800f3e6:	f849 7b04 	str.w	r7, [r9], #4
 800f3ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f3ee:	40cf      	lsrs	r7, r1
 800f3f0:	e7da      	b.n	800f3a8 <rshift+0x4c>
 800f3f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f3f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f3fa:	e7c3      	b.n	800f384 <rshift+0x28>
 800f3fc:	4623      	mov	r3, r4
 800f3fe:	e7e1      	b.n	800f3c4 <rshift+0x68>

0800f400 <__hexdig_fun>:
 800f400:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f404:	2b09      	cmp	r3, #9
 800f406:	d802      	bhi.n	800f40e <__hexdig_fun+0xe>
 800f408:	3820      	subs	r0, #32
 800f40a:	b2c0      	uxtb	r0, r0
 800f40c:	4770      	bx	lr
 800f40e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f412:	2b05      	cmp	r3, #5
 800f414:	d801      	bhi.n	800f41a <__hexdig_fun+0x1a>
 800f416:	3847      	subs	r0, #71	@ 0x47
 800f418:	e7f7      	b.n	800f40a <__hexdig_fun+0xa>
 800f41a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f41e:	2b05      	cmp	r3, #5
 800f420:	d801      	bhi.n	800f426 <__hexdig_fun+0x26>
 800f422:	3827      	subs	r0, #39	@ 0x27
 800f424:	e7f1      	b.n	800f40a <__hexdig_fun+0xa>
 800f426:	2000      	movs	r0, #0
 800f428:	4770      	bx	lr
	...

0800f42c <__gethex>:
 800f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f430:	b085      	sub	sp, #20
 800f432:	468a      	mov	sl, r1
 800f434:	9302      	str	r3, [sp, #8]
 800f436:	680b      	ldr	r3, [r1, #0]
 800f438:	9001      	str	r0, [sp, #4]
 800f43a:	4690      	mov	r8, r2
 800f43c:	1c9c      	adds	r4, r3, #2
 800f43e:	46a1      	mov	r9, r4
 800f440:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f444:	2830      	cmp	r0, #48	@ 0x30
 800f446:	d0fa      	beq.n	800f43e <__gethex+0x12>
 800f448:	eba9 0303 	sub.w	r3, r9, r3
 800f44c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f450:	f7ff ffd6 	bl	800f400 <__hexdig_fun>
 800f454:	4605      	mov	r5, r0
 800f456:	2800      	cmp	r0, #0
 800f458:	d168      	bne.n	800f52c <__gethex+0x100>
 800f45a:	49a0      	ldr	r1, [pc, #640]	@ (800f6dc <__gethex+0x2b0>)
 800f45c:	2201      	movs	r2, #1
 800f45e:	4648      	mov	r0, r9
 800f460:	f7ff ff1e 	bl	800f2a0 <strncmp>
 800f464:	4607      	mov	r7, r0
 800f466:	2800      	cmp	r0, #0
 800f468:	d167      	bne.n	800f53a <__gethex+0x10e>
 800f46a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f46e:	4626      	mov	r6, r4
 800f470:	f7ff ffc6 	bl	800f400 <__hexdig_fun>
 800f474:	2800      	cmp	r0, #0
 800f476:	d062      	beq.n	800f53e <__gethex+0x112>
 800f478:	4623      	mov	r3, r4
 800f47a:	7818      	ldrb	r0, [r3, #0]
 800f47c:	2830      	cmp	r0, #48	@ 0x30
 800f47e:	4699      	mov	r9, r3
 800f480:	f103 0301 	add.w	r3, r3, #1
 800f484:	d0f9      	beq.n	800f47a <__gethex+0x4e>
 800f486:	f7ff ffbb 	bl	800f400 <__hexdig_fun>
 800f48a:	fab0 f580 	clz	r5, r0
 800f48e:	096d      	lsrs	r5, r5, #5
 800f490:	f04f 0b01 	mov.w	fp, #1
 800f494:	464a      	mov	r2, r9
 800f496:	4616      	mov	r6, r2
 800f498:	3201      	adds	r2, #1
 800f49a:	7830      	ldrb	r0, [r6, #0]
 800f49c:	f7ff ffb0 	bl	800f400 <__hexdig_fun>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	d1f8      	bne.n	800f496 <__gethex+0x6a>
 800f4a4:	498d      	ldr	r1, [pc, #564]	@ (800f6dc <__gethex+0x2b0>)
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7ff fef9 	bl	800f2a0 <strncmp>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d13f      	bne.n	800f532 <__gethex+0x106>
 800f4b2:	b944      	cbnz	r4, 800f4c6 <__gethex+0x9a>
 800f4b4:	1c74      	adds	r4, r6, #1
 800f4b6:	4622      	mov	r2, r4
 800f4b8:	4616      	mov	r6, r2
 800f4ba:	3201      	adds	r2, #1
 800f4bc:	7830      	ldrb	r0, [r6, #0]
 800f4be:	f7ff ff9f 	bl	800f400 <__hexdig_fun>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d1f8      	bne.n	800f4b8 <__gethex+0x8c>
 800f4c6:	1ba4      	subs	r4, r4, r6
 800f4c8:	00a7      	lsls	r7, r4, #2
 800f4ca:	7833      	ldrb	r3, [r6, #0]
 800f4cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f4d0:	2b50      	cmp	r3, #80	@ 0x50
 800f4d2:	d13e      	bne.n	800f552 <__gethex+0x126>
 800f4d4:	7873      	ldrb	r3, [r6, #1]
 800f4d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800f4d8:	d033      	beq.n	800f542 <__gethex+0x116>
 800f4da:	2b2d      	cmp	r3, #45	@ 0x2d
 800f4dc:	d034      	beq.n	800f548 <__gethex+0x11c>
 800f4de:	1c71      	adds	r1, r6, #1
 800f4e0:	2400      	movs	r4, #0
 800f4e2:	7808      	ldrb	r0, [r1, #0]
 800f4e4:	f7ff ff8c 	bl	800f400 <__hexdig_fun>
 800f4e8:	1e43      	subs	r3, r0, #1
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	2b18      	cmp	r3, #24
 800f4ee:	d830      	bhi.n	800f552 <__gethex+0x126>
 800f4f0:	f1a0 0210 	sub.w	r2, r0, #16
 800f4f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f4f8:	f7ff ff82 	bl	800f400 <__hexdig_fun>
 800f4fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800f500:	fa5f fc8c 	uxtb.w	ip, ip
 800f504:	f1bc 0f18 	cmp.w	ip, #24
 800f508:	f04f 030a 	mov.w	r3, #10
 800f50c:	d91e      	bls.n	800f54c <__gethex+0x120>
 800f50e:	b104      	cbz	r4, 800f512 <__gethex+0xe6>
 800f510:	4252      	negs	r2, r2
 800f512:	4417      	add	r7, r2
 800f514:	f8ca 1000 	str.w	r1, [sl]
 800f518:	b1ed      	cbz	r5, 800f556 <__gethex+0x12a>
 800f51a:	f1bb 0f00 	cmp.w	fp, #0
 800f51e:	bf0c      	ite	eq
 800f520:	2506      	moveq	r5, #6
 800f522:	2500      	movne	r5, #0
 800f524:	4628      	mov	r0, r5
 800f526:	b005      	add	sp, #20
 800f528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52c:	2500      	movs	r5, #0
 800f52e:	462c      	mov	r4, r5
 800f530:	e7b0      	b.n	800f494 <__gethex+0x68>
 800f532:	2c00      	cmp	r4, #0
 800f534:	d1c7      	bne.n	800f4c6 <__gethex+0x9a>
 800f536:	4627      	mov	r7, r4
 800f538:	e7c7      	b.n	800f4ca <__gethex+0x9e>
 800f53a:	464e      	mov	r6, r9
 800f53c:	462f      	mov	r7, r5
 800f53e:	2501      	movs	r5, #1
 800f540:	e7c3      	b.n	800f4ca <__gethex+0x9e>
 800f542:	2400      	movs	r4, #0
 800f544:	1cb1      	adds	r1, r6, #2
 800f546:	e7cc      	b.n	800f4e2 <__gethex+0xb6>
 800f548:	2401      	movs	r4, #1
 800f54a:	e7fb      	b.n	800f544 <__gethex+0x118>
 800f54c:	fb03 0002 	mla	r0, r3, r2, r0
 800f550:	e7ce      	b.n	800f4f0 <__gethex+0xc4>
 800f552:	4631      	mov	r1, r6
 800f554:	e7de      	b.n	800f514 <__gethex+0xe8>
 800f556:	eba6 0309 	sub.w	r3, r6, r9
 800f55a:	3b01      	subs	r3, #1
 800f55c:	4629      	mov	r1, r5
 800f55e:	2b07      	cmp	r3, #7
 800f560:	dc0a      	bgt.n	800f578 <__gethex+0x14c>
 800f562:	9801      	ldr	r0, [sp, #4]
 800f564:	f7fe f950 	bl	800d808 <_Balloc>
 800f568:	4604      	mov	r4, r0
 800f56a:	b940      	cbnz	r0, 800f57e <__gethex+0x152>
 800f56c:	4b5c      	ldr	r3, [pc, #368]	@ (800f6e0 <__gethex+0x2b4>)
 800f56e:	4602      	mov	r2, r0
 800f570:	21e4      	movs	r1, #228	@ 0xe4
 800f572:	485c      	ldr	r0, [pc, #368]	@ (800f6e4 <__gethex+0x2b8>)
 800f574:	f7ff fec0 	bl	800f2f8 <__assert_func>
 800f578:	3101      	adds	r1, #1
 800f57a:	105b      	asrs	r3, r3, #1
 800f57c:	e7ef      	b.n	800f55e <__gethex+0x132>
 800f57e:	f100 0a14 	add.w	sl, r0, #20
 800f582:	2300      	movs	r3, #0
 800f584:	4655      	mov	r5, sl
 800f586:	469b      	mov	fp, r3
 800f588:	45b1      	cmp	r9, r6
 800f58a:	d337      	bcc.n	800f5fc <__gethex+0x1d0>
 800f58c:	f845 bb04 	str.w	fp, [r5], #4
 800f590:	eba5 050a 	sub.w	r5, r5, sl
 800f594:	10ad      	asrs	r5, r5, #2
 800f596:	6125      	str	r5, [r4, #16]
 800f598:	4658      	mov	r0, fp
 800f59a:	f7fe fa27 	bl	800d9ec <__hi0bits>
 800f59e:	016d      	lsls	r5, r5, #5
 800f5a0:	f8d8 6000 	ldr.w	r6, [r8]
 800f5a4:	1a2d      	subs	r5, r5, r0
 800f5a6:	42b5      	cmp	r5, r6
 800f5a8:	dd54      	ble.n	800f654 <__gethex+0x228>
 800f5aa:	1bad      	subs	r5, r5, r6
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	f7fe fdb3 	bl	800e11a <__any_on>
 800f5b4:	4681      	mov	r9, r0
 800f5b6:	b178      	cbz	r0, 800f5d8 <__gethex+0x1ac>
 800f5b8:	1e6b      	subs	r3, r5, #1
 800f5ba:	1159      	asrs	r1, r3, #5
 800f5bc:	f003 021f 	and.w	r2, r3, #31
 800f5c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f5c4:	f04f 0901 	mov.w	r9, #1
 800f5c8:	fa09 f202 	lsl.w	r2, r9, r2
 800f5cc:	420a      	tst	r2, r1
 800f5ce:	d003      	beq.n	800f5d8 <__gethex+0x1ac>
 800f5d0:	454b      	cmp	r3, r9
 800f5d2:	dc36      	bgt.n	800f642 <__gethex+0x216>
 800f5d4:	f04f 0902 	mov.w	r9, #2
 800f5d8:	4629      	mov	r1, r5
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7ff febe 	bl	800f35c <rshift>
 800f5e0:	442f      	add	r7, r5
 800f5e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5e6:	42bb      	cmp	r3, r7
 800f5e8:	da42      	bge.n	800f670 <__gethex+0x244>
 800f5ea:	9801      	ldr	r0, [sp, #4]
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	f7fe f94b 	bl	800d888 <_Bfree>
 800f5f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	6013      	str	r3, [r2, #0]
 800f5f8:	25a3      	movs	r5, #163	@ 0xa3
 800f5fa:	e793      	b.n	800f524 <__gethex+0xf8>
 800f5fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f600:	2a2e      	cmp	r2, #46	@ 0x2e
 800f602:	d012      	beq.n	800f62a <__gethex+0x1fe>
 800f604:	2b20      	cmp	r3, #32
 800f606:	d104      	bne.n	800f612 <__gethex+0x1e6>
 800f608:	f845 bb04 	str.w	fp, [r5], #4
 800f60c:	f04f 0b00 	mov.w	fp, #0
 800f610:	465b      	mov	r3, fp
 800f612:	7830      	ldrb	r0, [r6, #0]
 800f614:	9303      	str	r3, [sp, #12]
 800f616:	f7ff fef3 	bl	800f400 <__hexdig_fun>
 800f61a:	9b03      	ldr	r3, [sp, #12]
 800f61c:	f000 000f 	and.w	r0, r0, #15
 800f620:	4098      	lsls	r0, r3
 800f622:	ea4b 0b00 	orr.w	fp, fp, r0
 800f626:	3304      	adds	r3, #4
 800f628:	e7ae      	b.n	800f588 <__gethex+0x15c>
 800f62a:	45b1      	cmp	r9, r6
 800f62c:	d8ea      	bhi.n	800f604 <__gethex+0x1d8>
 800f62e:	492b      	ldr	r1, [pc, #172]	@ (800f6dc <__gethex+0x2b0>)
 800f630:	9303      	str	r3, [sp, #12]
 800f632:	2201      	movs	r2, #1
 800f634:	4630      	mov	r0, r6
 800f636:	f7ff fe33 	bl	800f2a0 <strncmp>
 800f63a:	9b03      	ldr	r3, [sp, #12]
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d1e1      	bne.n	800f604 <__gethex+0x1d8>
 800f640:	e7a2      	b.n	800f588 <__gethex+0x15c>
 800f642:	1ea9      	subs	r1, r5, #2
 800f644:	4620      	mov	r0, r4
 800f646:	f7fe fd68 	bl	800e11a <__any_on>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	d0c2      	beq.n	800f5d4 <__gethex+0x1a8>
 800f64e:	f04f 0903 	mov.w	r9, #3
 800f652:	e7c1      	b.n	800f5d8 <__gethex+0x1ac>
 800f654:	da09      	bge.n	800f66a <__gethex+0x23e>
 800f656:	1b75      	subs	r5, r6, r5
 800f658:	4621      	mov	r1, r4
 800f65a:	9801      	ldr	r0, [sp, #4]
 800f65c:	462a      	mov	r2, r5
 800f65e:	f7fe fb23 	bl	800dca8 <__lshift>
 800f662:	1b7f      	subs	r7, r7, r5
 800f664:	4604      	mov	r4, r0
 800f666:	f100 0a14 	add.w	sl, r0, #20
 800f66a:	f04f 0900 	mov.w	r9, #0
 800f66e:	e7b8      	b.n	800f5e2 <__gethex+0x1b6>
 800f670:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f674:	42bd      	cmp	r5, r7
 800f676:	dd6f      	ble.n	800f758 <__gethex+0x32c>
 800f678:	1bed      	subs	r5, r5, r7
 800f67a:	42ae      	cmp	r6, r5
 800f67c:	dc34      	bgt.n	800f6e8 <__gethex+0x2bc>
 800f67e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f682:	2b02      	cmp	r3, #2
 800f684:	d022      	beq.n	800f6cc <__gethex+0x2a0>
 800f686:	2b03      	cmp	r3, #3
 800f688:	d024      	beq.n	800f6d4 <__gethex+0x2a8>
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d115      	bne.n	800f6ba <__gethex+0x28e>
 800f68e:	42ae      	cmp	r6, r5
 800f690:	d113      	bne.n	800f6ba <__gethex+0x28e>
 800f692:	2e01      	cmp	r6, #1
 800f694:	d10b      	bne.n	800f6ae <__gethex+0x282>
 800f696:	9a02      	ldr	r2, [sp, #8]
 800f698:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f69c:	6013      	str	r3, [r2, #0]
 800f69e:	2301      	movs	r3, #1
 800f6a0:	6123      	str	r3, [r4, #16]
 800f6a2:	f8ca 3000 	str.w	r3, [sl]
 800f6a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6a8:	2562      	movs	r5, #98	@ 0x62
 800f6aa:	601c      	str	r4, [r3, #0]
 800f6ac:	e73a      	b.n	800f524 <__gethex+0xf8>
 800f6ae:	1e71      	subs	r1, r6, #1
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f7fe fd32 	bl	800e11a <__any_on>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d1ed      	bne.n	800f696 <__gethex+0x26a>
 800f6ba:	9801      	ldr	r0, [sp, #4]
 800f6bc:	4621      	mov	r1, r4
 800f6be:	f7fe f8e3 	bl	800d888 <_Bfree>
 800f6c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	6013      	str	r3, [r2, #0]
 800f6c8:	2550      	movs	r5, #80	@ 0x50
 800f6ca:	e72b      	b.n	800f524 <__gethex+0xf8>
 800f6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1f3      	bne.n	800f6ba <__gethex+0x28e>
 800f6d2:	e7e0      	b.n	800f696 <__gethex+0x26a>
 800f6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1dd      	bne.n	800f696 <__gethex+0x26a>
 800f6da:	e7ee      	b.n	800f6ba <__gethex+0x28e>
 800f6dc:	08010557 	.word	0x08010557
 800f6e0:	080104ed 	.word	0x080104ed
 800f6e4:	080105ae 	.word	0x080105ae
 800f6e8:	1e6f      	subs	r7, r5, #1
 800f6ea:	f1b9 0f00 	cmp.w	r9, #0
 800f6ee:	d130      	bne.n	800f752 <__gethex+0x326>
 800f6f0:	b127      	cbz	r7, 800f6fc <__gethex+0x2d0>
 800f6f2:	4639      	mov	r1, r7
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f7fe fd10 	bl	800e11a <__any_on>
 800f6fa:	4681      	mov	r9, r0
 800f6fc:	117a      	asrs	r2, r7, #5
 800f6fe:	2301      	movs	r3, #1
 800f700:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f704:	f007 071f 	and.w	r7, r7, #31
 800f708:	40bb      	lsls	r3, r7
 800f70a:	4213      	tst	r3, r2
 800f70c:	4629      	mov	r1, r5
 800f70e:	4620      	mov	r0, r4
 800f710:	bf18      	it	ne
 800f712:	f049 0902 	orrne.w	r9, r9, #2
 800f716:	f7ff fe21 	bl	800f35c <rshift>
 800f71a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f71e:	1b76      	subs	r6, r6, r5
 800f720:	2502      	movs	r5, #2
 800f722:	f1b9 0f00 	cmp.w	r9, #0
 800f726:	d047      	beq.n	800f7b8 <__gethex+0x38c>
 800f728:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f72c:	2b02      	cmp	r3, #2
 800f72e:	d015      	beq.n	800f75c <__gethex+0x330>
 800f730:	2b03      	cmp	r3, #3
 800f732:	d017      	beq.n	800f764 <__gethex+0x338>
 800f734:	2b01      	cmp	r3, #1
 800f736:	d109      	bne.n	800f74c <__gethex+0x320>
 800f738:	f019 0f02 	tst.w	r9, #2
 800f73c:	d006      	beq.n	800f74c <__gethex+0x320>
 800f73e:	f8da 3000 	ldr.w	r3, [sl]
 800f742:	ea49 0903 	orr.w	r9, r9, r3
 800f746:	f019 0f01 	tst.w	r9, #1
 800f74a:	d10e      	bne.n	800f76a <__gethex+0x33e>
 800f74c:	f045 0510 	orr.w	r5, r5, #16
 800f750:	e032      	b.n	800f7b8 <__gethex+0x38c>
 800f752:	f04f 0901 	mov.w	r9, #1
 800f756:	e7d1      	b.n	800f6fc <__gethex+0x2d0>
 800f758:	2501      	movs	r5, #1
 800f75a:	e7e2      	b.n	800f722 <__gethex+0x2f6>
 800f75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f75e:	f1c3 0301 	rsb	r3, r3, #1
 800f762:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f766:	2b00      	cmp	r3, #0
 800f768:	d0f0      	beq.n	800f74c <__gethex+0x320>
 800f76a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f76e:	f104 0314 	add.w	r3, r4, #20
 800f772:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f776:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f77a:	f04f 0c00 	mov.w	ip, #0
 800f77e:	4618      	mov	r0, r3
 800f780:	f853 2b04 	ldr.w	r2, [r3], #4
 800f784:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f788:	d01b      	beq.n	800f7c2 <__gethex+0x396>
 800f78a:	3201      	adds	r2, #1
 800f78c:	6002      	str	r2, [r0, #0]
 800f78e:	2d02      	cmp	r5, #2
 800f790:	f104 0314 	add.w	r3, r4, #20
 800f794:	d13c      	bne.n	800f810 <__gethex+0x3e4>
 800f796:	f8d8 2000 	ldr.w	r2, [r8]
 800f79a:	3a01      	subs	r2, #1
 800f79c:	42b2      	cmp	r2, r6
 800f79e:	d109      	bne.n	800f7b4 <__gethex+0x388>
 800f7a0:	1171      	asrs	r1, r6, #5
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f7a8:	f006 061f 	and.w	r6, r6, #31
 800f7ac:	fa02 f606 	lsl.w	r6, r2, r6
 800f7b0:	421e      	tst	r6, r3
 800f7b2:	d13a      	bne.n	800f82a <__gethex+0x3fe>
 800f7b4:	f045 0520 	orr.w	r5, r5, #32
 800f7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7ba:	601c      	str	r4, [r3, #0]
 800f7bc:	9b02      	ldr	r3, [sp, #8]
 800f7be:	601f      	str	r7, [r3, #0]
 800f7c0:	e6b0      	b.n	800f524 <__gethex+0xf8>
 800f7c2:	4299      	cmp	r1, r3
 800f7c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f7c8:	d8d9      	bhi.n	800f77e <__gethex+0x352>
 800f7ca:	68a3      	ldr	r3, [r4, #8]
 800f7cc:	459b      	cmp	fp, r3
 800f7ce:	db17      	blt.n	800f800 <__gethex+0x3d4>
 800f7d0:	6861      	ldr	r1, [r4, #4]
 800f7d2:	9801      	ldr	r0, [sp, #4]
 800f7d4:	3101      	adds	r1, #1
 800f7d6:	f7fe f817 	bl	800d808 <_Balloc>
 800f7da:	4681      	mov	r9, r0
 800f7dc:	b918      	cbnz	r0, 800f7e6 <__gethex+0x3ba>
 800f7de:	4b1a      	ldr	r3, [pc, #104]	@ (800f848 <__gethex+0x41c>)
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	2184      	movs	r1, #132	@ 0x84
 800f7e4:	e6c5      	b.n	800f572 <__gethex+0x146>
 800f7e6:	6922      	ldr	r2, [r4, #16]
 800f7e8:	3202      	adds	r2, #2
 800f7ea:	f104 010c 	add.w	r1, r4, #12
 800f7ee:	0092      	lsls	r2, r2, #2
 800f7f0:	300c      	adds	r0, #12
 800f7f2:	f7fd f89c 	bl	800c92e <memcpy>
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	9801      	ldr	r0, [sp, #4]
 800f7fa:	f7fe f845 	bl	800d888 <_Bfree>
 800f7fe:	464c      	mov	r4, r9
 800f800:	6923      	ldr	r3, [r4, #16]
 800f802:	1c5a      	adds	r2, r3, #1
 800f804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f808:	6122      	str	r2, [r4, #16]
 800f80a:	2201      	movs	r2, #1
 800f80c:	615a      	str	r2, [r3, #20]
 800f80e:	e7be      	b.n	800f78e <__gethex+0x362>
 800f810:	6922      	ldr	r2, [r4, #16]
 800f812:	455a      	cmp	r2, fp
 800f814:	dd0b      	ble.n	800f82e <__gethex+0x402>
 800f816:	2101      	movs	r1, #1
 800f818:	4620      	mov	r0, r4
 800f81a:	f7ff fd9f 	bl	800f35c <rshift>
 800f81e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f822:	3701      	adds	r7, #1
 800f824:	42bb      	cmp	r3, r7
 800f826:	f6ff aee0 	blt.w	800f5ea <__gethex+0x1be>
 800f82a:	2501      	movs	r5, #1
 800f82c:	e7c2      	b.n	800f7b4 <__gethex+0x388>
 800f82e:	f016 061f 	ands.w	r6, r6, #31
 800f832:	d0fa      	beq.n	800f82a <__gethex+0x3fe>
 800f834:	4453      	add	r3, sl
 800f836:	f1c6 0620 	rsb	r6, r6, #32
 800f83a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f83e:	f7fe f8d5 	bl	800d9ec <__hi0bits>
 800f842:	42b0      	cmp	r0, r6
 800f844:	dbe7      	blt.n	800f816 <__gethex+0x3ea>
 800f846:	e7f0      	b.n	800f82a <__gethex+0x3fe>
 800f848:	080104ed 	.word	0x080104ed

0800f84c <L_shift>:
 800f84c:	f1c2 0208 	rsb	r2, r2, #8
 800f850:	0092      	lsls	r2, r2, #2
 800f852:	b570      	push	{r4, r5, r6, lr}
 800f854:	f1c2 0620 	rsb	r6, r2, #32
 800f858:	6843      	ldr	r3, [r0, #4]
 800f85a:	6804      	ldr	r4, [r0, #0]
 800f85c:	fa03 f506 	lsl.w	r5, r3, r6
 800f860:	432c      	orrs	r4, r5
 800f862:	40d3      	lsrs	r3, r2
 800f864:	6004      	str	r4, [r0, #0]
 800f866:	f840 3f04 	str.w	r3, [r0, #4]!
 800f86a:	4288      	cmp	r0, r1
 800f86c:	d3f4      	bcc.n	800f858 <L_shift+0xc>
 800f86e:	bd70      	pop	{r4, r5, r6, pc}

0800f870 <__match>:
 800f870:	b530      	push	{r4, r5, lr}
 800f872:	6803      	ldr	r3, [r0, #0]
 800f874:	3301      	adds	r3, #1
 800f876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f87a:	b914      	cbnz	r4, 800f882 <__match+0x12>
 800f87c:	6003      	str	r3, [r0, #0]
 800f87e:	2001      	movs	r0, #1
 800f880:	bd30      	pop	{r4, r5, pc}
 800f882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f886:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f88a:	2d19      	cmp	r5, #25
 800f88c:	bf98      	it	ls
 800f88e:	3220      	addls	r2, #32
 800f890:	42a2      	cmp	r2, r4
 800f892:	d0f0      	beq.n	800f876 <__match+0x6>
 800f894:	2000      	movs	r0, #0
 800f896:	e7f3      	b.n	800f880 <__match+0x10>

0800f898 <__hexnan>:
 800f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	680b      	ldr	r3, [r1, #0]
 800f89e:	6801      	ldr	r1, [r0, #0]
 800f8a0:	115e      	asrs	r6, r3, #5
 800f8a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f8a6:	f013 031f 	ands.w	r3, r3, #31
 800f8aa:	b087      	sub	sp, #28
 800f8ac:	bf18      	it	ne
 800f8ae:	3604      	addne	r6, #4
 800f8b0:	2500      	movs	r5, #0
 800f8b2:	1f37      	subs	r7, r6, #4
 800f8b4:	4682      	mov	sl, r0
 800f8b6:	4690      	mov	r8, r2
 800f8b8:	9301      	str	r3, [sp, #4]
 800f8ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800f8be:	46b9      	mov	r9, r7
 800f8c0:	463c      	mov	r4, r7
 800f8c2:	9502      	str	r5, [sp, #8]
 800f8c4:	46ab      	mov	fp, r5
 800f8c6:	784a      	ldrb	r2, [r1, #1]
 800f8c8:	1c4b      	adds	r3, r1, #1
 800f8ca:	9303      	str	r3, [sp, #12]
 800f8cc:	b342      	cbz	r2, 800f920 <__hexnan+0x88>
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	9105      	str	r1, [sp, #20]
 800f8d2:	9204      	str	r2, [sp, #16]
 800f8d4:	f7ff fd94 	bl	800f400 <__hexdig_fun>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d151      	bne.n	800f980 <__hexnan+0xe8>
 800f8dc:	9a04      	ldr	r2, [sp, #16]
 800f8de:	9905      	ldr	r1, [sp, #20]
 800f8e0:	2a20      	cmp	r2, #32
 800f8e2:	d818      	bhi.n	800f916 <__hexnan+0x7e>
 800f8e4:	9b02      	ldr	r3, [sp, #8]
 800f8e6:	459b      	cmp	fp, r3
 800f8e8:	dd13      	ble.n	800f912 <__hexnan+0x7a>
 800f8ea:	454c      	cmp	r4, r9
 800f8ec:	d206      	bcs.n	800f8fc <__hexnan+0x64>
 800f8ee:	2d07      	cmp	r5, #7
 800f8f0:	dc04      	bgt.n	800f8fc <__hexnan+0x64>
 800f8f2:	462a      	mov	r2, r5
 800f8f4:	4649      	mov	r1, r9
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f7ff ffa8 	bl	800f84c <L_shift>
 800f8fc:	4544      	cmp	r4, r8
 800f8fe:	d952      	bls.n	800f9a6 <__hexnan+0x10e>
 800f900:	2300      	movs	r3, #0
 800f902:	f1a4 0904 	sub.w	r9, r4, #4
 800f906:	f844 3c04 	str.w	r3, [r4, #-4]
 800f90a:	f8cd b008 	str.w	fp, [sp, #8]
 800f90e:	464c      	mov	r4, r9
 800f910:	461d      	mov	r5, r3
 800f912:	9903      	ldr	r1, [sp, #12]
 800f914:	e7d7      	b.n	800f8c6 <__hexnan+0x2e>
 800f916:	2a29      	cmp	r2, #41	@ 0x29
 800f918:	d157      	bne.n	800f9ca <__hexnan+0x132>
 800f91a:	3102      	adds	r1, #2
 800f91c:	f8ca 1000 	str.w	r1, [sl]
 800f920:	f1bb 0f00 	cmp.w	fp, #0
 800f924:	d051      	beq.n	800f9ca <__hexnan+0x132>
 800f926:	454c      	cmp	r4, r9
 800f928:	d206      	bcs.n	800f938 <__hexnan+0xa0>
 800f92a:	2d07      	cmp	r5, #7
 800f92c:	dc04      	bgt.n	800f938 <__hexnan+0xa0>
 800f92e:	462a      	mov	r2, r5
 800f930:	4649      	mov	r1, r9
 800f932:	4620      	mov	r0, r4
 800f934:	f7ff ff8a 	bl	800f84c <L_shift>
 800f938:	4544      	cmp	r4, r8
 800f93a:	d936      	bls.n	800f9aa <__hexnan+0x112>
 800f93c:	f1a8 0204 	sub.w	r2, r8, #4
 800f940:	4623      	mov	r3, r4
 800f942:	f853 1b04 	ldr.w	r1, [r3], #4
 800f946:	f842 1f04 	str.w	r1, [r2, #4]!
 800f94a:	429f      	cmp	r7, r3
 800f94c:	d2f9      	bcs.n	800f942 <__hexnan+0xaa>
 800f94e:	1b3b      	subs	r3, r7, r4
 800f950:	f023 0303 	bic.w	r3, r3, #3
 800f954:	3304      	adds	r3, #4
 800f956:	3401      	adds	r4, #1
 800f958:	3e03      	subs	r6, #3
 800f95a:	42b4      	cmp	r4, r6
 800f95c:	bf88      	it	hi
 800f95e:	2304      	movhi	r3, #4
 800f960:	4443      	add	r3, r8
 800f962:	2200      	movs	r2, #0
 800f964:	f843 2b04 	str.w	r2, [r3], #4
 800f968:	429f      	cmp	r7, r3
 800f96a:	d2fb      	bcs.n	800f964 <__hexnan+0xcc>
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	b91b      	cbnz	r3, 800f978 <__hexnan+0xe0>
 800f970:	4547      	cmp	r7, r8
 800f972:	d128      	bne.n	800f9c6 <__hexnan+0x12e>
 800f974:	2301      	movs	r3, #1
 800f976:	603b      	str	r3, [r7, #0]
 800f978:	2005      	movs	r0, #5
 800f97a:	b007      	add	sp, #28
 800f97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f980:	3501      	adds	r5, #1
 800f982:	2d08      	cmp	r5, #8
 800f984:	f10b 0b01 	add.w	fp, fp, #1
 800f988:	dd06      	ble.n	800f998 <__hexnan+0x100>
 800f98a:	4544      	cmp	r4, r8
 800f98c:	d9c1      	bls.n	800f912 <__hexnan+0x7a>
 800f98e:	2300      	movs	r3, #0
 800f990:	f844 3c04 	str.w	r3, [r4, #-4]
 800f994:	2501      	movs	r5, #1
 800f996:	3c04      	subs	r4, #4
 800f998:	6822      	ldr	r2, [r4, #0]
 800f99a:	f000 000f 	and.w	r0, r0, #15
 800f99e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f9a2:	6020      	str	r0, [r4, #0]
 800f9a4:	e7b5      	b.n	800f912 <__hexnan+0x7a>
 800f9a6:	2508      	movs	r5, #8
 800f9a8:	e7b3      	b.n	800f912 <__hexnan+0x7a>
 800f9aa:	9b01      	ldr	r3, [sp, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d0dd      	beq.n	800f96c <__hexnan+0xd4>
 800f9b0:	f1c3 0320 	rsb	r3, r3, #32
 800f9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b8:	40da      	lsrs	r2, r3
 800f9ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f9be:	4013      	ands	r3, r2
 800f9c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f9c4:	e7d2      	b.n	800f96c <__hexnan+0xd4>
 800f9c6:	3f04      	subs	r7, #4
 800f9c8:	e7d0      	b.n	800f96c <__hexnan+0xd4>
 800f9ca:	2004      	movs	r0, #4
 800f9cc:	e7d5      	b.n	800f97a <__hexnan+0xe2>

0800f9ce <__ascii_mbtowc>:
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	b901      	cbnz	r1, 800f9d4 <__ascii_mbtowc+0x6>
 800f9d2:	a901      	add	r1, sp, #4
 800f9d4:	b142      	cbz	r2, 800f9e8 <__ascii_mbtowc+0x1a>
 800f9d6:	b14b      	cbz	r3, 800f9ec <__ascii_mbtowc+0x1e>
 800f9d8:	7813      	ldrb	r3, [r2, #0]
 800f9da:	600b      	str	r3, [r1, #0]
 800f9dc:	7812      	ldrb	r2, [r2, #0]
 800f9de:	1e10      	subs	r0, r2, #0
 800f9e0:	bf18      	it	ne
 800f9e2:	2001      	movne	r0, #1
 800f9e4:	b002      	add	sp, #8
 800f9e6:	4770      	bx	lr
 800f9e8:	4610      	mov	r0, r2
 800f9ea:	e7fb      	b.n	800f9e4 <__ascii_mbtowc+0x16>
 800f9ec:	f06f 0001 	mvn.w	r0, #1
 800f9f0:	e7f8      	b.n	800f9e4 <__ascii_mbtowc+0x16>

0800f9f2 <_realloc_r>:
 800f9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f6:	4607      	mov	r7, r0
 800f9f8:	4614      	mov	r4, r2
 800f9fa:	460d      	mov	r5, r1
 800f9fc:	b921      	cbnz	r1, 800fa08 <_realloc_r+0x16>
 800f9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa02:	4611      	mov	r1, r2
 800fa04:	f7fd be74 	b.w	800d6f0 <_malloc_r>
 800fa08:	b92a      	cbnz	r2, 800fa16 <_realloc_r+0x24>
 800fa0a:	f7fd fdfd 	bl	800d608 <_free_r>
 800fa0e:	4625      	mov	r5, r4
 800fa10:	4628      	mov	r0, r5
 800fa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa16:	f000 f840 	bl	800fa9a <_malloc_usable_size_r>
 800fa1a:	4284      	cmp	r4, r0
 800fa1c:	4606      	mov	r6, r0
 800fa1e:	d802      	bhi.n	800fa26 <_realloc_r+0x34>
 800fa20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa24:	d8f4      	bhi.n	800fa10 <_realloc_r+0x1e>
 800fa26:	4621      	mov	r1, r4
 800fa28:	4638      	mov	r0, r7
 800fa2a:	f7fd fe61 	bl	800d6f0 <_malloc_r>
 800fa2e:	4680      	mov	r8, r0
 800fa30:	b908      	cbnz	r0, 800fa36 <_realloc_r+0x44>
 800fa32:	4645      	mov	r5, r8
 800fa34:	e7ec      	b.n	800fa10 <_realloc_r+0x1e>
 800fa36:	42b4      	cmp	r4, r6
 800fa38:	4622      	mov	r2, r4
 800fa3a:	4629      	mov	r1, r5
 800fa3c:	bf28      	it	cs
 800fa3e:	4632      	movcs	r2, r6
 800fa40:	f7fc ff75 	bl	800c92e <memcpy>
 800fa44:	4629      	mov	r1, r5
 800fa46:	4638      	mov	r0, r7
 800fa48:	f7fd fdde 	bl	800d608 <_free_r>
 800fa4c:	e7f1      	b.n	800fa32 <_realloc_r+0x40>

0800fa4e <__ascii_wctomb>:
 800fa4e:	4603      	mov	r3, r0
 800fa50:	4608      	mov	r0, r1
 800fa52:	b141      	cbz	r1, 800fa66 <__ascii_wctomb+0x18>
 800fa54:	2aff      	cmp	r2, #255	@ 0xff
 800fa56:	d904      	bls.n	800fa62 <__ascii_wctomb+0x14>
 800fa58:	228a      	movs	r2, #138	@ 0x8a
 800fa5a:	601a      	str	r2, [r3, #0]
 800fa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa60:	4770      	bx	lr
 800fa62:	700a      	strb	r2, [r1, #0]
 800fa64:	2001      	movs	r0, #1
 800fa66:	4770      	bx	lr

0800fa68 <fiprintf>:
 800fa68:	b40e      	push	{r1, r2, r3}
 800fa6a:	b503      	push	{r0, r1, lr}
 800fa6c:	4601      	mov	r1, r0
 800fa6e:	ab03      	add	r3, sp, #12
 800fa70:	4805      	ldr	r0, [pc, #20]	@ (800fa88 <fiprintf+0x20>)
 800fa72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa76:	6800      	ldr	r0, [r0, #0]
 800fa78:	9301      	str	r3, [sp, #4]
 800fa7a:	f000 f83f 	bl	800fafc <_vfiprintf_r>
 800fa7e:	b002      	add	sp, #8
 800fa80:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa84:	b003      	add	sp, #12
 800fa86:	4770      	bx	lr
 800fa88:	20000518 	.word	0x20000518

0800fa8c <abort>:
 800fa8c:	b508      	push	{r3, lr}
 800fa8e:	2006      	movs	r0, #6
 800fa90:	f000 fa08 	bl	800fea4 <raise>
 800fa94:	2001      	movs	r0, #1
 800fa96:	f7f5 fdbb 	bl	8005610 <_exit>

0800fa9a <_malloc_usable_size_r>:
 800fa9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa9e:	1f18      	subs	r0, r3, #4
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	bfbc      	itt	lt
 800faa4:	580b      	ldrlt	r3, [r1, r0]
 800faa6:	18c0      	addlt	r0, r0, r3
 800faa8:	4770      	bx	lr

0800faaa <__sfputc_r>:
 800faaa:	6893      	ldr	r3, [r2, #8]
 800faac:	3b01      	subs	r3, #1
 800faae:	2b00      	cmp	r3, #0
 800fab0:	b410      	push	{r4}
 800fab2:	6093      	str	r3, [r2, #8]
 800fab4:	da08      	bge.n	800fac8 <__sfputc_r+0x1e>
 800fab6:	6994      	ldr	r4, [r2, #24]
 800fab8:	42a3      	cmp	r3, r4
 800faba:	db01      	blt.n	800fac0 <__sfputc_r+0x16>
 800fabc:	290a      	cmp	r1, #10
 800fabe:	d103      	bne.n	800fac8 <__sfputc_r+0x1e>
 800fac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fac4:	f000 b932 	b.w	800fd2c <__swbuf_r>
 800fac8:	6813      	ldr	r3, [r2, #0]
 800faca:	1c58      	adds	r0, r3, #1
 800facc:	6010      	str	r0, [r2, #0]
 800face:	7019      	strb	r1, [r3, #0]
 800fad0:	4608      	mov	r0, r1
 800fad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fad6:	4770      	bx	lr

0800fad8 <__sfputs_r>:
 800fad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fada:	4606      	mov	r6, r0
 800fadc:	460f      	mov	r7, r1
 800fade:	4614      	mov	r4, r2
 800fae0:	18d5      	adds	r5, r2, r3
 800fae2:	42ac      	cmp	r4, r5
 800fae4:	d101      	bne.n	800faea <__sfputs_r+0x12>
 800fae6:	2000      	movs	r0, #0
 800fae8:	e007      	b.n	800fafa <__sfputs_r+0x22>
 800faea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faee:	463a      	mov	r2, r7
 800faf0:	4630      	mov	r0, r6
 800faf2:	f7ff ffda 	bl	800faaa <__sfputc_r>
 800faf6:	1c43      	adds	r3, r0, #1
 800faf8:	d1f3      	bne.n	800fae2 <__sfputs_r+0xa>
 800fafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fafc <_vfiprintf_r>:
 800fafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb00:	460d      	mov	r5, r1
 800fb02:	b09d      	sub	sp, #116	@ 0x74
 800fb04:	4614      	mov	r4, r2
 800fb06:	4698      	mov	r8, r3
 800fb08:	4606      	mov	r6, r0
 800fb0a:	b118      	cbz	r0, 800fb14 <_vfiprintf_r+0x18>
 800fb0c:	6a03      	ldr	r3, [r0, #32]
 800fb0e:	b90b      	cbnz	r3, 800fb14 <_vfiprintf_r+0x18>
 800fb10:	f7fc fdf2 	bl	800c6f8 <__sinit>
 800fb14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb16:	07d9      	lsls	r1, r3, #31
 800fb18:	d405      	bmi.n	800fb26 <_vfiprintf_r+0x2a>
 800fb1a:	89ab      	ldrh	r3, [r5, #12]
 800fb1c:	059a      	lsls	r2, r3, #22
 800fb1e:	d402      	bmi.n	800fb26 <_vfiprintf_r+0x2a>
 800fb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb22:	f7fc ff02 	bl	800c92a <__retarget_lock_acquire_recursive>
 800fb26:	89ab      	ldrh	r3, [r5, #12]
 800fb28:	071b      	lsls	r3, r3, #28
 800fb2a:	d501      	bpl.n	800fb30 <_vfiprintf_r+0x34>
 800fb2c:	692b      	ldr	r3, [r5, #16]
 800fb2e:	b99b      	cbnz	r3, 800fb58 <_vfiprintf_r+0x5c>
 800fb30:	4629      	mov	r1, r5
 800fb32:	4630      	mov	r0, r6
 800fb34:	f000 f938 	bl	800fda8 <__swsetup_r>
 800fb38:	b170      	cbz	r0, 800fb58 <_vfiprintf_r+0x5c>
 800fb3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb3c:	07dc      	lsls	r4, r3, #31
 800fb3e:	d504      	bpl.n	800fb4a <_vfiprintf_r+0x4e>
 800fb40:	f04f 30ff 	mov.w	r0, #4294967295
 800fb44:	b01d      	add	sp, #116	@ 0x74
 800fb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4a:	89ab      	ldrh	r3, [r5, #12]
 800fb4c:	0598      	lsls	r0, r3, #22
 800fb4e:	d4f7      	bmi.n	800fb40 <_vfiprintf_r+0x44>
 800fb50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb52:	f7fc feeb 	bl	800c92c <__retarget_lock_release_recursive>
 800fb56:	e7f3      	b.n	800fb40 <_vfiprintf_r+0x44>
 800fb58:	2300      	movs	r3, #0
 800fb5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb5c:	2320      	movs	r3, #32
 800fb5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb62:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb66:	2330      	movs	r3, #48	@ 0x30
 800fb68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fd18 <_vfiprintf_r+0x21c>
 800fb6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb70:	f04f 0901 	mov.w	r9, #1
 800fb74:	4623      	mov	r3, r4
 800fb76:	469a      	mov	sl, r3
 800fb78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb7c:	b10a      	cbz	r2, 800fb82 <_vfiprintf_r+0x86>
 800fb7e:	2a25      	cmp	r2, #37	@ 0x25
 800fb80:	d1f9      	bne.n	800fb76 <_vfiprintf_r+0x7a>
 800fb82:	ebba 0b04 	subs.w	fp, sl, r4
 800fb86:	d00b      	beq.n	800fba0 <_vfiprintf_r+0xa4>
 800fb88:	465b      	mov	r3, fp
 800fb8a:	4622      	mov	r2, r4
 800fb8c:	4629      	mov	r1, r5
 800fb8e:	4630      	mov	r0, r6
 800fb90:	f7ff ffa2 	bl	800fad8 <__sfputs_r>
 800fb94:	3001      	adds	r0, #1
 800fb96:	f000 80a7 	beq.w	800fce8 <_vfiprintf_r+0x1ec>
 800fb9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb9c:	445a      	add	r2, fp
 800fb9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fba0:	f89a 3000 	ldrb.w	r3, [sl]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 809f 	beq.w	800fce8 <_vfiprintf_r+0x1ec>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	f04f 32ff 	mov.w	r2, #4294967295
 800fbb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbb4:	f10a 0a01 	add.w	sl, sl, #1
 800fbb8:	9304      	str	r3, [sp, #16]
 800fbba:	9307      	str	r3, [sp, #28]
 800fbbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fbc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800fbc2:	4654      	mov	r4, sl
 800fbc4:	2205      	movs	r2, #5
 800fbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbca:	4853      	ldr	r0, [pc, #332]	@ (800fd18 <_vfiprintf_r+0x21c>)
 800fbcc:	f7f0 fb28 	bl	8000220 <memchr>
 800fbd0:	9a04      	ldr	r2, [sp, #16]
 800fbd2:	b9d8      	cbnz	r0, 800fc0c <_vfiprintf_r+0x110>
 800fbd4:	06d1      	lsls	r1, r2, #27
 800fbd6:	bf44      	itt	mi
 800fbd8:	2320      	movmi	r3, #32
 800fbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbde:	0713      	lsls	r3, r2, #28
 800fbe0:	bf44      	itt	mi
 800fbe2:	232b      	movmi	r3, #43	@ 0x2b
 800fbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbe8:	f89a 3000 	ldrb.w	r3, [sl]
 800fbec:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbee:	d015      	beq.n	800fc1c <_vfiprintf_r+0x120>
 800fbf0:	9a07      	ldr	r2, [sp, #28]
 800fbf2:	4654      	mov	r4, sl
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	f04f 0c0a 	mov.w	ip, #10
 800fbfa:	4621      	mov	r1, r4
 800fbfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc00:	3b30      	subs	r3, #48	@ 0x30
 800fc02:	2b09      	cmp	r3, #9
 800fc04:	d94b      	bls.n	800fc9e <_vfiprintf_r+0x1a2>
 800fc06:	b1b0      	cbz	r0, 800fc36 <_vfiprintf_r+0x13a>
 800fc08:	9207      	str	r2, [sp, #28]
 800fc0a:	e014      	b.n	800fc36 <_vfiprintf_r+0x13a>
 800fc0c:	eba0 0308 	sub.w	r3, r0, r8
 800fc10:	fa09 f303 	lsl.w	r3, r9, r3
 800fc14:	4313      	orrs	r3, r2
 800fc16:	9304      	str	r3, [sp, #16]
 800fc18:	46a2      	mov	sl, r4
 800fc1a:	e7d2      	b.n	800fbc2 <_vfiprintf_r+0xc6>
 800fc1c:	9b03      	ldr	r3, [sp, #12]
 800fc1e:	1d19      	adds	r1, r3, #4
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	9103      	str	r1, [sp, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	bfbb      	ittet	lt
 800fc28:	425b      	neglt	r3, r3
 800fc2a:	f042 0202 	orrlt.w	r2, r2, #2
 800fc2e:	9307      	strge	r3, [sp, #28]
 800fc30:	9307      	strlt	r3, [sp, #28]
 800fc32:	bfb8      	it	lt
 800fc34:	9204      	strlt	r2, [sp, #16]
 800fc36:	7823      	ldrb	r3, [r4, #0]
 800fc38:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc3a:	d10a      	bne.n	800fc52 <_vfiprintf_r+0x156>
 800fc3c:	7863      	ldrb	r3, [r4, #1]
 800fc3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc40:	d132      	bne.n	800fca8 <_vfiprintf_r+0x1ac>
 800fc42:	9b03      	ldr	r3, [sp, #12]
 800fc44:	1d1a      	adds	r2, r3, #4
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	9203      	str	r2, [sp, #12]
 800fc4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc4e:	3402      	adds	r4, #2
 800fc50:	9305      	str	r3, [sp, #20]
 800fc52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fd28 <_vfiprintf_r+0x22c>
 800fc56:	7821      	ldrb	r1, [r4, #0]
 800fc58:	2203      	movs	r2, #3
 800fc5a:	4650      	mov	r0, sl
 800fc5c:	f7f0 fae0 	bl	8000220 <memchr>
 800fc60:	b138      	cbz	r0, 800fc72 <_vfiprintf_r+0x176>
 800fc62:	9b04      	ldr	r3, [sp, #16]
 800fc64:	eba0 000a 	sub.w	r0, r0, sl
 800fc68:	2240      	movs	r2, #64	@ 0x40
 800fc6a:	4082      	lsls	r2, r0
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	3401      	adds	r4, #1
 800fc70:	9304      	str	r3, [sp, #16]
 800fc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc76:	4829      	ldr	r0, [pc, #164]	@ (800fd1c <_vfiprintf_r+0x220>)
 800fc78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc7c:	2206      	movs	r2, #6
 800fc7e:	f7f0 facf 	bl	8000220 <memchr>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d03f      	beq.n	800fd06 <_vfiprintf_r+0x20a>
 800fc86:	4b26      	ldr	r3, [pc, #152]	@ (800fd20 <_vfiprintf_r+0x224>)
 800fc88:	bb1b      	cbnz	r3, 800fcd2 <_vfiprintf_r+0x1d6>
 800fc8a:	9b03      	ldr	r3, [sp, #12]
 800fc8c:	3307      	adds	r3, #7
 800fc8e:	f023 0307 	bic.w	r3, r3, #7
 800fc92:	3308      	adds	r3, #8
 800fc94:	9303      	str	r3, [sp, #12]
 800fc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc98:	443b      	add	r3, r7
 800fc9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc9c:	e76a      	b.n	800fb74 <_vfiprintf_r+0x78>
 800fc9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fca2:	460c      	mov	r4, r1
 800fca4:	2001      	movs	r0, #1
 800fca6:	e7a8      	b.n	800fbfa <_vfiprintf_r+0xfe>
 800fca8:	2300      	movs	r3, #0
 800fcaa:	3401      	adds	r4, #1
 800fcac:	9305      	str	r3, [sp, #20]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	f04f 0c0a 	mov.w	ip, #10
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcba:	3a30      	subs	r2, #48	@ 0x30
 800fcbc:	2a09      	cmp	r2, #9
 800fcbe:	d903      	bls.n	800fcc8 <_vfiprintf_r+0x1cc>
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d0c6      	beq.n	800fc52 <_vfiprintf_r+0x156>
 800fcc4:	9105      	str	r1, [sp, #20]
 800fcc6:	e7c4      	b.n	800fc52 <_vfiprintf_r+0x156>
 800fcc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fccc:	4604      	mov	r4, r0
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e7f0      	b.n	800fcb4 <_vfiprintf_r+0x1b8>
 800fcd2:	ab03      	add	r3, sp, #12
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	462a      	mov	r2, r5
 800fcd8:	4b12      	ldr	r3, [pc, #72]	@ (800fd24 <_vfiprintf_r+0x228>)
 800fcda:	a904      	add	r1, sp, #16
 800fcdc:	4630      	mov	r0, r6
 800fcde:	f7fb febb 	bl	800ba58 <_printf_float>
 800fce2:	4607      	mov	r7, r0
 800fce4:	1c78      	adds	r0, r7, #1
 800fce6:	d1d6      	bne.n	800fc96 <_vfiprintf_r+0x19a>
 800fce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fcea:	07d9      	lsls	r1, r3, #31
 800fcec:	d405      	bmi.n	800fcfa <_vfiprintf_r+0x1fe>
 800fcee:	89ab      	ldrh	r3, [r5, #12]
 800fcf0:	059a      	lsls	r2, r3, #22
 800fcf2:	d402      	bmi.n	800fcfa <_vfiprintf_r+0x1fe>
 800fcf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcf6:	f7fc fe19 	bl	800c92c <__retarget_lock_release_recursive>
 800fcfa:	89ab      	ldrh	r3, [r5, #12]
 800fcfc:	065b      	lsls	r3, r3, #25
 800fcfe:	f53f af1f 	bmi.w	800fb40 <_vfiprintf_r+0x44>
 800fd02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd04:	e71e      	b.n	800fb44 <_vfiprintf_r+0x48>
 800fd06:	ab03      	add	r3, sp, #12
 800fd08:	9300      	str	r3, [sp, #0]
 800fd0a:	462a      	mov	r2, r5
 800fd0c:	4b05      	ldr	r3, [pc, #20]	@ (800fd24 <_vfiprintf_r+0x228>)
 800fd0e:	a904      	add	r1, sp, #16
 800fd10:	4630      	mov	r0, r6
 800fd12:	f7fc f939 	bl	800bf88 <_printf_i>
 800fd16:	e7e4      	b.n	800fce2 <_vfiprintf_r+0x1e6>
 800fd18:	08010559 	.word	0x08010559
 800fd1c:	08010563 	.word	0x08010563
 800fd20:	0800ba59 	.word	0x0800ba59
 800fd24:	0800fad9 	.word	0x0800fad9
 800fd28:	0801055f 	.word	0x0801055f

0800fd2c <__swbuf_r>:
 800fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2e:	460e      	mov	r6, r1
 800fd30:	4614      	mov	r4, r2
 800fd32:	4605      	mov	r5, r0
 800fd34:	b118      	cbz	r0, 800fd3e <__swbuf_r+0x12>
 800fd36:	6a03      	ldr	r3, [r0, #32]
 800fd38:	b90b      	cbnz	r3, 800fd3e <__swbuf_r+0x12>
 800fd3a:	f7fc fcdd 	bl	800c6f8 <__sinit>
 800fd3e:	69a3      	ldr	r3, [r4, #24]
 800fd40:	60a3      	str	r3, [r4, #8]
 800fd42:	89a3      	ldrh	r3, [r4, #12]
 800fd44:	071a      	lsls	r2, r3, #28
 800fd46:	d501      	bpl.n	800fd4c <__swbuf_r+0x20>
 800fd48:	6923      	ldr	r3, [r4, #16]
 800fd4a:	b943      	cbnz	r3, 800fd5e <__swbuf_r+0x32>
 800fd4c:	4621      	mov	r1, r4
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f000 f82a 	bl	800fda8 <__swsetup_r>
 800fd54:	b118      	cbz	r0, 800fd5e <__swbuf_r+0x32>
 800fd56:	f04f 37ff 	mov.w	r7, #4294967295
 800fd5a:	4638      	mov	r0, r7
 800fd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	6922      	ldr	r2, [r4, #16]
 800fd62:	1a98      	subs	r0, r3, r2
 800fd64:	6963      	ldr	r3, [r4, #20]
 800fd66:	b2f6      	uxtb	r6, r6
 800fd68:	4283      	cmp	r3, r0
 800fd6a:	4637      	mov	r7, r6
 800fd6c:	dc05      	bgt.n	800fd7a <__swbuf_r+0x4e>
 800fd6e:	4621      	mov	r1, r4
 800fd70:	4628      	mov	r0, r5
 800fd72:	f7ff fa53 	bl	800f21c <_fflush_r>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d1ed      	bne.n	800fd56 <__swbuf_r+0x2a>
 800fd7a:	68a3      	ldr	r3, [r4, #8]
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	60a3      	str	r3, [r4, #8]
 800fd80:	6823      	ldr	r3, [r4, #0]
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	6022      	str	r2, [r4, #0]
 800fd86:	701e      	strb	r6, [r3, #0]
 800fd88:	6962      	ldr	r2, [r4, #20]
 800fd8a:	1c43      	adds	r3, r0, #1
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d004      	beq.n	800fd9a <__swbuf_r+0x6e>
 800fd90:	89a3      	ldrh	r3, [r4, #12]
 800fd92:	07db      	lsls	r3, r3, #31
 800fd94:	d5e1      	bpl.n	800fd5a <__swbuf_r+0x2e>
 800fd96:	2e0a      	cmp	r6, #10
 800fd98:	d1df      	bne.n	800fd5a <__swbuf_r+0x2e>
 800fd9a:	4621      	mov	r1, r4
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f7ff fa3d 	bl	800f21c <_fflush_r>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d0d9      	beq.n	800fd5a <__swbuf_r+0x2e>
 800fda6:	e7d6      	b.n	800fd56 <__swbuf_r+0x2a>

0800fda8 <__swsetup_r>:
 800fda8:	b538      	push	{r3, r4, r5, lr}
 800fdaa:	4b29      	ldr	r3, [pc, #164]	@ (800fe50 <__swsetup_r+0xa8>)
 800fdac:	4605      	mov	r5, r0
 800fdae:	6818      	ldr	r0, [r3, #0]
 800fdb0:	460c      	mov	r4, r1
 800fdb2:	b118      	cbz	r0, 800fdbc <__swsetup_r+0x14>
 800fdb4:	6a03      	ldr	r3, [r0, #32]
 800fdb6:	b90b      	cbnz	r3, 800fdbc <__swsetup_r+0x14>
 800fdb8:	f7fc fc9e 	bl	800c6f8 <__sinit>
 800fdbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc0:	0719      	lsls	r1, r3, #28
 800fdc2:	d422      	bmi.n	800fe0a <__swsetup_r+0x62>
 800fdc4:	06da      	lsls	r2, r3, #27
 800fdc6:	d407      	bmi.n	800fdd8 <__swsetup_r+0x30>
 800fdc8:	2209      	movs	r2, #9
 800fdca:	602a      	str	r2, [r5, #0]
 800fdcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdd0:	81a3      	strh	r3, [r4, #12]
 800fdd2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd6:	e033      	b.n	800fe40 <__swsetup_r+0x98>
 800fdd8:	0758      	lsls	r0, r3, #29
 800fdda:	d512      	bpl.n	800fe02 <__swsetup_r+0x5a>
 800fddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fdde:	b141      	cbz	r1, 800fdf2 <__swsetup_r+0x4a>
 800fde0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fde4:	4299      	cmp	r1, r3
 800fde6:	d002      	beq.n	800fdee <__swsetup_r+0x46>
 800fde8:	4628      	mov	r0, r5
 800fdea:	f7fd fc0d 	bl	800d608 <_free_r>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fdf2:	89a3      	ldrh	r3, [r4, #12]
 800fdf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fdf8:	81a3      	strh	r3, [r4, #12]
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	6063      	str	r3, [r4, #4]
 800fdfe:	6923      	ldr	r3, [r4, #16]
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	89a3      	ldrh	r3, [r4, #12]
 800fe04:	f043 0308 	orr.w	r3, r3, #8
 800fe08:	81a3      	strh	r3, [r4, #12]
 800fe0a:	6923      	ldr	r3, [r4, #16]
 800fe0c:	b94b      	cbnz	r3, 800fe22 <__swsetup_r+0x7a>
 800fe0e:	89a3      	ldrh	r3, [r4, #12]
 800fe10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fe14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe18:	d003      	beq.n	800fe22 <__swsetup_r+0x7a>
 800fe1a:	4621      	mov	r1, r4
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	f000 f883 	bl	800ff28 <__smakebuf_r>
 800fe22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe26:	f013 0201 	ands.w	r2, r3, #1
 800fe2a:	d00a      	beq.n	800fe42 <__swsetup_r+0x9a>
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	60a2      	str	r2, [r4, #8]
 800fe30:	6962      	ldr	r2, [r4, #20]
 800fe32:	4252      	negs	r2, r2
 800fe34:	61a2      	str	r2, [r4, #24]
 800fe36:	6922      	ldr	r2, [r4, #16]
 800fe38:	b942      	cbnz	r2, 800fe4c <__swsetup_r+0xa4>
 800fe3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fe3e:	d1c5      	bne.n	800fdcc <__swsetup_r+0x24>
 800fe40:	bd38      	pop	{r3, r4, r5, pc}
 800fe42:	0799      	lsls	r1, r3, #30
 800fe44:	bf58      	it	pl
 800fe46:	6962      	ldrpl	r2, [r4, #20]
 800fe48:	60a2      	str	r2, [r4, #8]
 800fe4a:	e7f4      	b.n	800fe36 <__swsetup_r+0x8e>
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	e7f7      	b.n	800fe40 <__swsetup_r+0x98>
 800fe50:	20000518 	.word	0x20000518

0800fe54 <_raise_r>:
 800fe54:	291f      	cmp	r1, #31
 800fe56:	b538      	push	{r3, r4, r5, lr}
 800fe58:	4605      	mov	r5, r0
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	d904      	bls.n	800fe68 <_raise_r+0x14>
 800fe5e:	2316      	movs	r3, #22
 800fe60:	6003      	str	r3, [r0, #0]
 800fe62:	f04f 30ff 	mov.w	r0, #4294967295
 800fe66:	bd38      	pop	{r3, r4, r5, pc}
 800fe68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe6a:	b112      	cbz	r2, 800fe72 <_raise_r+0x1e>
 800fe6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe70:	b94b      	cbnz	r3, 800fe86 <_raise_r+0x32>
 800fe72:	4628      	mov	r0, r5
 800fe74:	f000 f830 	bl	800fed8 <_getpid_r>
 800fe78:	4622      	mov	r2, r4
 800fe7a:	4601      	mov	r1, r0
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe82:	f000 b817 	b.w	800feb4 <_kill_r>
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d00a      	beq.n	800fea0 <_raise_r+0x4c>
 800fe8a:	1c59      	adds	r1, r3, #1
 800fe8c:	d103      	bne.n	800fe96 <_raise_r+0x42>
 800fe8e:	2316      	movs	r3, #22
 800fe90:	6003      	str	r3, [r0, #0]
 800fe92:	2001      	movs	r0, #1
 800fe94:	e7e7      	b.n	800fe66 <_raise_r+0x12>
 800fe96:	2100      	movs	r1, #0
 800fe98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	4798      	blx	r3
 800fea0:	2000      	movs	r0, #0
 800fea2:	e7e0      	b.n	800fe66 <_raise_r+0x12>

0800fea4 <raise>:
 800fea4:	4b02      	ldr	r3, [pc, #8]	@ (800feb0 <raise+0xc>)
 800fea6:	4601      	mov	r1, r0
 800fea8:	6818      	ldr	r0, [r3, #0]
 800feaa:	f7ff bfd3 	b.w	800fe54 <_raise_r>
 800feae:	bf00      	nop
 800feb0:	20000518 	.word	0x20000518

0800feb4 <_kill_r>:
 800feb4:	b538      	push	{r3, r4, r5, lr}
 800feb6:	4d07      	ldr	r5, [pc, #28]	@ (800fed4 <_kill_r+0x20>)
 800feb8:	2300      	movs	r3, #0
 800feba:	4604      	mov	r4, r0
 800febc:	4608      	mov	r0, r1
 800febe:	4611      	mov	r1, r2
 800fec0:	602b      	str	r3, [r5, #0]
 800fec2:	f7f5 fb9d 	bl	8005600 <_kill>
 800fec6:	1c43      	adds	r3, r0, #1
 800fec8:	d102      	bne.n	800fed0 <_kill_r+0x1c>
 800feca:	682b      	ldr	r3, [r5, #0]
 800fecc:	b103      	cbz	r3, 800fed0 <_kill_r+0x1c>
 800fece:	6023      	str	r3, [r4, #0]
 800fed0:	bd38      	pop	{r3, r4, r5, pc}
 800fed2:	bf00      	nop
 800fed4:	20002094 	.word	0x20002094

0800fed8 <_getpid_r>:
 800fed8:	f7f5 bb90 	b.w	80055fc <_getpid>

0800fedc <__swhatbuf_r>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	460c      	mov	r4, r1
 800fee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee4:	2900      	cmp	r1, #0
 800fee6:	b096      	sub	sp, #88	@ 0x58
 800fee8:	4615      	mov	r5, r2
 800feea:	461e      	mov	r6, r3
 800feec:	da0d      	bge.n	800ff0a <__swhatbuf_r+0x2e>
 800feee:	89a3      	ldrh	r3, [r4, #12]
 800fef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fef4:	f04f 0100 	mov.w	r1, #0
 800fef8:	bf14      	ite	ne
 800fefa:	2340      	movne	r3, #64	@ 0x40
 800fefc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ff00:	2000      	movs	r0, #0
 800ff02:	6031      	str	r1, [r6, #0]
 800ff04:	602b      	str	r3, [r5, #0]
 800ff06:	b016      	add	sp, #88	@ 0x58
 800ff08:	bd70      	pop	{r4, r5, r6, pc}
 800ff0a:	466a      	mov	r2, sp
 800ff0c:	f000 f848 	bl	800ffa0 <_fstat_r>
 800ff10:	2800      	cmp	r0, #0
 800ff12:	dbec      	blt.n	800feee <__swhatbuf_r+0x12>
 800ff14:	9901      	ldr	r1, [sp, #4]
 800ff16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff1e:	4259      	negs	r1, r3
 800ff20:	4159      	adcs	r1, r3
 800ff22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff26:	e7eb      	b.n	800ff00 <__swhatbuf_r+0x24>

0800ff28 <__smakebuf_r>:
 800ff28:	898b      	ldrh	r3, [r1, #12]
 800ff2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff2c:	079d      	lsls	r5, r3, #30
 800ff2e:	4606      	mov	r6, r0
 800ff30:	460c      	mov	r4, r1
 800ff32:	d507      	bpl.n	800ff44 <__smakebuf_r+0x1c>
 800ff34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff38:	6023      	str	r3, [r4, #0]
 800ff3a:	6123      	str	r3, [r4, #16]
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	6163      	str	r3, [r4, #20]
 800ff40:	b003      	add	sp, #12
 800ff42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff44:	ab01      	add	r3, sp, #4
 800ff46:	466a      	mov	r2, sp
 800ff48:	f7ff ffc8 	bl	800fedc <__swhatbuf_r>
 800ff4c:	9f00      	ldr	r7, [sp, #0]
 800ff4e:	4605      	mov	r5, r0
 800ff50:	4639      	mov	r1, r7
 800ff52:	4630      	mov	r0, r6
 800ff54:	f7fd fbcc 	bl	800d6f0 <_malloc_r>
 800ff58:	b948      	cbnz	r0, 800ff6e <__smakebuf_r+0x46>
 800ff5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff5e:	059a      	lsls	r2, r3, #22
 800ff60:	d4ee      	bmi.n	800ff40 <__smakebuf_r+0x18>
 800ff62:	f023 0303 	bic.w	r3, r3, #3
 800ff66:	f043 0302 	orr.w	r3, r3, #2
 800ff6a:	81a3      	strh	r3, [r4, #12]
 800ff6c:	e7e2      	b.n	800ff34 <__smakebuf_r+0xc>
 800ff6e:	89a3      	ldrh	r3, [r4, #12]
 800ff70:	6020      	str	r0, [r4, #0]
 800ff72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff76:	81a3      	strh	r3, [r4, #12]
 800ff78:	9b01      	ldr	r3, [sp, #4]
 800ff7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff7e:	b15b      	cbz	r3, 800ff98 <__smakebuf_r+0x70>
 800ff80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff84:	4630      	mov	r0, r6
 800ff86:	f000 f81d 	bl	800ffc4 <_isatty_r>
 800ff8a:	b128      	cbz	r0, 800ff98 <__smakebuf_r+0x70>
 800ff8c:	89a3      	ldrh	r3, [r4, #12]
 800ff8e:	f023 0303 	bic.w	r3, r3, #3
 800ff92:	f043 0301 	orr.w	r3, r3, #1
 800ff96:	81a3      	strh	r3, [r4, #12]
 800ff98:	89a3      	ldrh	r3, [r4, #12]
 800ff9a:	431d      	orrs	r5, r3
 800ff9c:	81a5      	strh	r5, [r4, #12]
 800ff9e:	e7cf      	b.n	800ff40 <__smakebuf_r+0x18>

0800ffa0 <_fstat_r>:
 800ffa0:	b538      	push	{r3, r4, r5, lr}
 800ffa2:	4d07      	ldr	r5, [pc, #28]	@ (800ffc0 <_fstat_r+0x20>)
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	4608      	mov	r0, r1
 800ffaa:	4611      	mov	r1, r2
 800ffac:	602b      	str	r3, [r5, #0]
 800ffae:	f7f5 fb55 	bl	800565c <_fstat>
 800ffb2:	1c43      	adds	r3, r0, #1
 800ffb4:	d102      	bne.n	800ffbc <_fstat_r+0x1c>
 800ffb6:	682b      	ldr	r3, [r5, #0]
 800ffb8:	b103      	cbz	r3, 800ffbc <_fstat_r+0x1c>
 800ffba:	6023      	str	r3, [r4, #0]
 800ffbc:	bd38      	pop	{r3, r4, r5, pc}
 800ffbe:	bf00      	nop
 800ffc0:	20002094 	.word	0x20002094

0800ffc4 <_isatty_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4d06      	ldr	r5, [pc, #24]	@ (800ffe0 <_isatty_r+0x1c>)
 800ffc8:	2300      	movs	r3, #0
 800ffca:	4604      	mov	r4, r0
 800ffcc:	4608      	mov	r0, r1
 800ffce:	602b      	str	r3, [r5, #0]
 800ffd0:	f7f5 fb4a 	bl	8005668 <_isatty>
 800ffd4:	1c43      	adds	r3, r0, #1
 800ffd6:	d102      	bne.n	800ffde <_isatty_r+0x1a>
 800ffd8:	682b      	ldr	r3, [r5, #0]
 800ffda:	b103      	cbz	r3, 800ffde <_isatty_r+0x1a>
 800ffdc:	6023      	str	r3, [r4, #0]
 800ffde:	bd38      	pop	{r3, r4, r5, pc}
 800ffe0:	20002094 	.word	0x20002094

0800ffe4 <_init>:
 800ffe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe6:	bf00      	nop
 800ffe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffea:	bc08      	pop	{r3}
 800ffec:	469e      	mov	lr, r3
 800ffee:	4770      	bx	lr

0800fff0 <_fini>:
 800fff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff2:	bf00      	nop
 800fff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fff6:	bc08      	pop	{r3}
 800fff8:	469e      	mov	lr, r3
 800fffa:	4770      	bx	lr
